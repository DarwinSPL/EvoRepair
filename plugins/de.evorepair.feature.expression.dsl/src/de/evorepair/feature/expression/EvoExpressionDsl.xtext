// automatically generated by Xtext
grammar de.evorepair.feature.expression.EvoExpressionDsl with de.evorepair.logic.EvoLogicDsl

import "http://darwinspl.de/evorepair/logic/0.5" as evo_logic
import "http://hyvar-project.eu/feature/1.0" as dw_feature
import "http://hyvar-project.eu/feature/context/1.0" as dw_context
import "http://hyvar-project.eu/feature/expression/1.0" as dw_expression
import "http://hyvar-project.eu/feature/dataValues/1.0" as dw_data
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

import "http://hyvar-project.eu/feature/mapping/1.0" as dw_mapping

EvoMappingExpression returns dw_expression::HyExpression:
	EvoMappingOr;


EvoMappingOr returns dw_expression::HyExpression:
	EvoMappingAnd({dw_expression::HyOrExpression.operand1=current} ('||') operand2=EvoMappingAnd)*;
	
	
EvoMappingAnd returns dw_expression::HyExpression:
	EvoMappingEqual({dw_expression::HyAndExpression.operand1=current} ('&&') operand2=EvoMappingEqual)*;
	
	
EvoMappingEqual returns dw_expression::HyExpression:
	EvoMappingUnequal({dw_expression::HyEqualExpression.operand1=current} ('==') operand2=EvoMappingUnequal)*;

	
EvoMappingUnequal returns dw_expression::HyExpression:
	EvoMappingImplication({dw_expression::HyNotEqualExpression.operand1=current} ('!=') operand2=EvoMappingImplication)* ;


EvoMappingImplication returns dw_expression::HyExpression:
	EvoMappingEquivalence({dw_expression::HyImpliesExpression.operand1=current} ('->') operand2=EvoMappingEquivalence)*;
	
	
EvoMappingEquivalence returns dw_expression::HyExpression:
	EvoMappingLessExpression({dw_expression::HyEquivalenceExpression.operand1=current} ('<->') operand2=EvoMappingLessExpression)*;
	

EvoMappingLessExpression returns dw_expression::HyExpression:
	EvoMappingIfPossibleExpression({dw_expression::HyLessExpression.operand1=current} ('<') operand2=EvoMappingIfPossibleExpression)*;
	
	
EvoMappingIfPossibleExpression returns dw_expression::HyExpression:
	EvoMappingLessOrEqualExpression("ifPossible(" {dw_expression::HyIfPossibleExpression.operands+=current} (',' operands+=EvoMappingLessOrEqualExpression)* ")")*;


EvoMappingLessOrEqualExpression returns dw_expression::HyExpression:
	EvoMappingGreaterExpression({dw_expression::HyLessOrEqualExpression.operand1=current} ('<=') operand2=EvoMappingGreaterExpression)*;
	

EvoMappingGreaterExpression returns dw_expression::HyExpression:
	EvoMappingGreaterOrEqualExpression({dw_expression::HyGreaterExpression.operand1=current} ('>') operand2=EvoMappingGreaterOrEqualExpression)*;
	

EvoMappingGreaterOrEqualExpression returns dw_expression::HyExpression:
	EvoMappingSubtractionExpression({dw_expression::HyGreaterOrEqualExpression.operand1=current} ('>=') operand2=EvoMappingSubtractionExpression)*;
		

EvoMappingSubtractionExpression returns dw_expression::HyExpression: 
	EvoMappingAdditionExpression({dw_expression::HySubtractionExpression.operand1=current} ('-') operand2=EvoMappingAdditionExpression)*;
	
	
EvoMappingAdditionExpression returns dw_expression::HyExpression: 
	EvoMappingModuloExpression({dw_expression::HyAdditionExpression.operand1=current} ('+') operand2=EvoMappingModuloExpression)*;
	

EvoMappingModuloExpression returns dw_expression::HyExpression: 
	EvoMappingMultiplicationExpression({dw_expression::HyModuloExpression.operand1=current} ('%') operand2=EvoMappingMultiplicationExpression)*;
	
	
EvoMappingMultiplicationExpression returns dw_expression::HyExpression: 
	EvoMappingDivisionExpression({dw_expression::HyMultiplicationExpression.operand1=current} ('*') operand2=EvoMappingDivisionExpression)*;
	

EvoMappingDivisionExpression returns dw_expression::HyExpression: 
	EvoMappingTerminal({dw_expression::HyDivisionExpression.operand1=current} ('/') operand2=EvoMappingTerminal)*;

EvoMappingNegation returns dw_expression::HyNegationExpression:
	'-' operand=EvoMappingTerminal;


EvoMappingTerminal returns dw_expression::HyExpression:	
	EvoMappingFeatureReferenceExpression |
	EvoVariableTerm |
	EvoMappingNestedExpression |
	EvoMappingNegation |
	EvoMappingConditionalFeatureReferenceExpression |
	EvoMappingContextInformationReferenceExpression |
	EvoMappingAttributeReferenceExpression |
	EvoMappingValueExpression |
	EvoMappingBooleanValueExpression |
	EvoMappingMimumumExpression | 
	EvoMappingMaximumExpression |
	EvoMappingNot;
	


EvoMappingNestedExpression returns dw_expression::HyNestedExpression:
	'(' operand=EvoMappingExpression ')';
	
	


EvoMappingNot returns dw_expression::HyNotExpression:
	'!' operand=EvoMappingTerminal;
	

EvoMappingFeatureReferenceExpression returns dw_expression::HyFeatureReferenceExpression:
	feature=[dw_feature::HyFeature | STRING]; // (versionRestriction=EvoMappingVersionRestriction)?;
	
	
EvoMappingConditionalFeatureReferenceExpression returns dw_expression::HyConditionalFeatureReferenceExpression:
	"?" feature=[dw_feature::HyFeature | QualifiedName] (versionRestriction=EvoMappingVersionRestriction)?;	
	

EvoMappingVersionRestriction returns dw_expression::HyVersionRestriction:
	EvoMappingRelativeVersionRestriction | EvoMappingVersionRangeRestriction;


EvoMappingRelativeVersionRestriction returns dw_expression::HyRelativeVersionRestriction:
	 "[" operator=EvoMappingRelativeVersionRestrictionOperator version=[dw_feature::HyVersion] "]";
	

enum EvoMappingRelativeVersionRestrictionOperator returns dw_expression::HyRelativeVersionRestrictionOperator:
	lessThan = "<" | lessThanOrEqual = "<=" | equal = "=" | greaterThanOrEqual = ">=" | greaterThan = ">";
		

EvoMappingVersionRangeRestriction returns dw_expression::HyVersionRangeRestriction:
"[" lowerIncluded?= 'true' | 'false' lowerVersion=[dw_feature::HyVersion | QualifiedName] "-" upperIncluded?= 'true' | 'false' upperVersion=[dw_feature::HyVersion | QualifiedName] "]";


EvoMappingContextInformationReferenceExpression returns dw_expression::HyContextInformationReferenceExpression:
	"context:" contextInformation=[dw_context::HyContextualInformation | QualifiedName];


EvoMappingAttributeReferenceExpression returns dw_expression::HyAttributeReferenceExpression:
	feature=[dw_feature::HyFeature | STRING] '.' attribute=[dw_feature::HyFeatureAttribute | QualifiedName];
	

EvoMappingValueExpression returns dw_expression::HyValueExpression:
	value=EvoMappingNumberValue;
	
EvoMappingBooleanValueExpression returns dw_expression::HyBooleanValueExpression: 
	{dw_expression::HyBooleanValueExpression}(value?='true' | 'false');	
	

EvoMappingNumberValue returns dw_data::HyNumberValue:
	value=INT;
	
/*
EvoMappingEnumValue returns dw_data::HyEnumValue:
	"enum:" ^enum=[dw_data::HyEnum | QualifiedName] "." enumLiteral=[dw_data::HyEnumLiteral | QualifiedName];


EvoMappingEnum returns dw_data::HyEnum:
	"Enum(" name=ID"," (literals+=EvoMappingEnumLiteral (',' literals+=EvoMappingEnumLiteral)*);
	

EvoMappingEnumLiteral returns dw_data::HyEnumLiteral:
	"EnumLiteral(" name=ID "," value=INT ")" ("[" (validSince=DATE "-" validUntil=DATE | validSince=DATE "-"  | "eternity" "-" validUntil=DATE)  "]")?;
*/	

EvoMappingMimumumExpression returns dw_expression::HyMinimumExpression:
	"min(" operand=EvoMappingExpression ")";
		

EvoMappingMaximumExpression returns dw_expression::HyMaximumExpression:
	"max(" operand=EvoMappingExpression ")";




terminal DATE returns ecore::EDate:
	('0'..'9')*('/')('0' | '1')('0'..'9')('/')('0'('1'..'9'))|(('0'..'2')('1'..'9'))|('3'('0'..'1'));