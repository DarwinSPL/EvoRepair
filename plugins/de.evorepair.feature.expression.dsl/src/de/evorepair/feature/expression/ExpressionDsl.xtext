// automatically generated by Xtext
grammar de.evorepair.feature.expression.ExpressionDsl with de.evorepair.logic.EvoLogicDsl

import "http://darwinspl.de/evorepair/logic/0.4" as evo_logic
import "http://hyvar-project.eu/feature/1.0" as dw_feature
import "http://hyvar-project.eu/feature/context/1.0" as dw_context
import "http://hyvar-project.eu/feature/expression/1.0" as dw_expression
import "http://hyvar-project.eu/feature/dataValues/1.0" as dw_data
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate evo_expression_dsl "http://darwinspl.de/evorepair/feature/expression/dsl"

@Override
GrammarEntry:
	expression=EvoExpression
;

@Override
EvoExpression returns dw_expression::HyExpression:
	EvoOr;

/**
 * Override this method to allow custom terminals. This is needed because otherwise the terminals of 
 * the super language (EvoDSL) are overriden and inaccessable
 */ 
@Override
EvoElementOf returns dw_expression::HyExpression:
	EvoTerminal({EvoSetElementOf.operand1=current} ('elementOf') operand2=EvoTerminal)*;
	

@Override
EvoTerminal returns dw_expression::HyExpression:
	EvoFeatureReferenceExpression |
	EvoNestedExpression
;

@Override
QualifiedName returns ecore::EString:
	ID ("." ID)*;

EvoNestedExpression returns dw_expression::HyNestedExpression:
	'(' operand=EvoExpression ')'
;

@Override
EvoImplication returns dw_expression::HyExpression:
	EvoBiconditional({EvoImplication.operand1=current} ('->') operand2=EvoBiconditionalSize)*;


EvoEquivalenceExpression returns dw_expression::HyEquivalenceExpression:
	operand1=EvoExpression ('<->') operand2=EvoExpression;
	
	
EvoNegation returns dw_expression::HyNegationExpression:
	'-' operand=EvoExpression;


//EvoNot returns evo_logic::EvoNot: 
	//operand=EvoExpression
//	STRING
//;



 
 
//	@Operator(type="unary_prefix", weight="14", superclass="EvoExpression")
//	HyNotExpression ::= "!" operand;
	

//	@Operator(type="primitive", weight="15", superclass="EvoExpression")
//	HyNestedExpression ::= "(" operand ")";

	
	
	
EvoFeatureReferenceExpression returns HyFeatureReferenceExpression:
	feature=[dw_feature::HyFeature | STRING]; // (versionRestriction=EvoVersionRestriction)?;
	
	
EvoConditionalFeatureReferenceExpression returns dw_expression::HyConditionalFeatureReferenceExpression:
	"?" feature=[dw_feature::HyFeature | QualifiedName] (versionRestriction=EvoVersionRestriction)?;	
	

EvoVersionRestriction returns dw_expression::HyVersionRestriction:
	EvoRelativeVersionRestriction | EvoVersionRangeRestriction;


EvoRelativeVersionRestriction returns dw_expression::HyRelativeVersionRestriction:
	 "[" operator=EvoRelativeVersionRestrictionOperator version=[dw_feature::HyVersion] "]";
	

enum EvoRelativeVersionRestrictionOperator returns dw_expression::HyRelativeVersionRestrictionOperator:
	lessThan = "<" | lessThanOrEqual = "<=" | equal = "=" | greaterThanOrEqual = ">=" | greaterThan = ">";
		

EvoVersionRangeRestriction returns dw_expression::HyVersionRangeRestriction:
"[" lowerIncluded?= 'true' | 'false' lowerVersion=[dw_feature::HyVersion | QualifiedName] "-" upperIncluded?= 'true' | 'false' upperVersion=[dw_feature::HyVersion | QualifiedName] "]";


EvoContextInformationReferenceExpression returns dw_expression::HyContextInformationReferenceExpression:
	"context:" contextInformation=[dw_context::HyContextualInformation | QualifiedName];


EvoAttributeReferenceExpression returns dw_expression::HyAttributeReferenceExpression:
	feature=[dw_feature::HyFeature] '.' attribute=[dw_feature::HyFeatureAttribute | QualifiedName];
	

EvoValueExpression returns dw_expression::HyValueExpression:
	value=EvoValue;
	

EvoValue returns dw_data::HyValue:
	EvoNumberValue | EvoBooleanValue;
		

EvoNumberValue returns dw_data::HyNumberValue:
	value=INT;
	

EvoBooleanValue returns dw_data::HyBooleanValue:
	{dw_data::HyBooleanValue}(value?= 'true' | 'false');
	

EvoEnumValue returns dw_data::HyEnumValue:
	"enum:" ^enum=[dw_data::HyEnum | QualifiedName] "." enumLiteral=[dw_data::HyEnumLiteral | QualifiedName];


EvoEnum returns dw_data::HyEnum:
	"Enum(" name=ID"," (literals+=EvoEnumLiteral (',' literals+=EvoEnumLiteral)*);
	

EvoEnumLiteral returns dw_data::HyEnumLiteral:
	"EnumLiteral(" name=ID "," value=INT ")" ("[" (validSince=DATE "-" validUntil=DATE | validSince=DATE "-"  | "eternity" "-" validUntil=DATE)  "]")?;
	

EvoBooleanValueExpression returns dw_expression::HyBooleanValueExpression: 
	{dw_expression::HyBooleanValueExpression}(value?='true' | 'false');


EvoMimumumExpression returns dw_expression::HyMinimumExpression:
	"min(" operand=EvoExpression ")";
		

EvoMaximumExpression returns dw_expression::HyMaximumExpression:
	"max(" operand=EvoExpression ")";
	

EvoIfPossibleExpression returns dw_expression::HyIfPossibleExpression:
	"ifPossible(" operands+=EvoExpression ("," operands+=EvoExpression)* ")";
	

EvoLessExpression returns dw_expression::HyLessExpression:
	operand1=EvoExpression "<" operand2=EvoExpression;
	

EvoLessOrEqualExpression returns dw_expression::HyLessOrEqualExpression:
	operand1=EvoExpression "<=" operand2=EvoExpression;
	

EvoGreaterExpression returns dw_expression::HyGreaterExpression:
	operand1=EvoExpression "<" operand2=EvoExpression;
	

EvoGreaterOrEqualExpression returns dw_expression::HyGreaterOrEqualExpression:
	operand1=EvoExpression "<=" operand2=EvoExpression;
		

EvoSubtractionExpression returns dw_expression::HySubtractionExpression: 
	operand1=EvoExpression "-" operand2=EvoExpression;
	
	
EvoAdditionExpression returns dw_expression::HyAdditionExpression: 
	operand1=EvoExpression "+" operand2=EvoExpression;
	

EvoModuloExpression returns dw_expression::HyModuloExpression: 
	operand1=EvoExpression "%" operand2=EvoExpression;
	
	
EvoMultiplicationExpression returns dw_expression::HyMultiplicationExpression: 
	operand1=EvoExpression "*" operand2=EvoExpression;
	

EvoDivisionExpression returns dw_expression::HyDivisionExpression: 
	operand1=EvoExpression "/" operand2=EvoExpression;

terminal DATE returns ecore::EDate:
	('0'..'9')('/')('0' | '1')('0'..'9')('/')('0'..'9')*;
	