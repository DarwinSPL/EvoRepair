/*
 * generated by Xtext 2.12.0
 */
package de.evorepair.feature.expression.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.evorepair.logic.services.EvoLogicDslGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ExpressionDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class GrammarEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.GrammarEntry");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionEvoExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//@ Override GrammarEntry:
		//	expression=EvoExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=EvoExpression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//EvoExpression
		public RuleCall getExpressionEvoExpressionParserRuleCall_0() { return cExpressionEvoExpressionParserRuleCall_0; }
	}
	public class EvoExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoExpression");
		private final RuleCall cEvoOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//@ Override EvoExpression dw_expression::HyExpression:
		//	EvoOr;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoOr
		public RuleCall getEvoOrParserRuleCall() { return cEvoOrParserRuleCall; }
	}
	public class EvoElementOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoElementOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEvoTerminalParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEvoSetElementOfOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cElementOfKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2EvoTerminalParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//@ Override EvoElementOf dw_expression::HyExpression:
		//	EvoTerminal ({EvoSetElementOf.operand1=current} 'elementOf' operand2=EvoTerminal)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoTerminal ({EvoSetElementOf.operand1=current} 'elementOf' operand2=EvoTerminal)*
		public Group getGroup() { return cGroup; }
		
		//EvoTerminal
		public RuleCall getEvoTerminalParserRuleCall_0() { return cEvoTerminalParserRuleCall_0; }
		
		//({EvoSetElementOf.operand1=current} 'elementOf' operand2=EvoTerminal)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{EvoSetElementOf.operand1=current}
		public Action getEvoSetElementOfOperand1Action_1_0() { return cEvoSetElementOfOperand1Action_1_0; }
		
		//'elementOf'
		public Keyword getElementOfKeyword_1_1() { return cElementOfKeyword_1_1; }
		
		//operand2=EvoTerminal
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//EvoTerminal
		public RuleCall getOperand2EvoTerminalParserRuleCall_1_2_0() { return cOperand2EvoTerminalParserRuleCall_1_2_0; }
	}
	public class EvoTerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoTerminal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEvoFeatureReferenceExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEvoNestedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//@ Override EvoTerminal dw_expression::HyExpression:
		//	EvoFeatureReferenceExpression | EvoNestedExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoFeatureReferenceExpression | EvoNestedExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EvoFeatureReferenceExpression
		public RuleCall getEvoFeatureReferenceExpressionParserRuleCall_0() { return cEvoFeatureReferenceExpressionParserRuleCall_0; }
		
		//EvoNestedExpression
		public RuleCall getEvoNestedExpressionParserRuleCall_1() { return cEvoNestedExpressionParserRuleCall_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//@ Override QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ("." ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class EvoNestedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoNestedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandEvoExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//EvoNestedExpression dw_expression::HyNestedExpression:
		//	'(' operand=EvoExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' operand=EvoExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//operand=EvoExpression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }
		
		//EvoExpression
		public RuleCall getOperandEvoExpressionParserRuleCall_1_0() { return cOperandEvoExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class EvoImplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoImplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEvoBiconditionalParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEvoImplicationOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2EvoBiconditionalSizeParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//@ Override EvoImplication dw_expression::HyExpression:
		//	EvoBiconditional ({EvoImplication.operand1=current} '->' operand2=EvoBiconditionalSize)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoBiconditional ({EvoImplication.operand1=current} '->' operand2=EvoBiconditionalSize)*
		public Group getGroup() { return cGroup; }
		
		//EvoBiconditional
		public RuleCall getEvoBiconditionalParserRuleCall_0() { return cEvoBiconditionalParserRuleCall_0; }
		
		//({EvoImplication.operand1=current} '->' operand2=EvoBiconditionalSize)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{EvoImplication.operand1=current}
		public Action getEvoImplicationOperand1Action_1_0() { return cEvoImplicationOperand1Action_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_1() { return cHyphenMinusGreaterThanSignKeyword_1_1; }
		
		//operand2=EvoBiconditionalSize
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//EvoBiconditionalSize
		public RuleCall getOperand2EvoBiconditionalSizeParserRuleCall_1_2_0() { return cOperand2EvoBiconditionalSizeParserRuleCall_1_2_0; }
	}
	public class EvoEquivalenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoEquivalenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperand1EvoExpressionParserRuleCall_0_0 = (RuleCall)cOperand1Assignment_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperand2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperand2EvoExpressionParserRuleCall_2_0 = (RuleCall)cOperand2Assignment_2.eContents().get(0);
		
		//EvoEquivalenceExpression dw_expression::HyEquivalenceExpression:
		//	operand1=EvoExpression '<->' operand2=EvoExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//operand1=EvoExpression '<->' operand2=EvoExpression
		public Group getGroup() { return cGroup; }
		
		//operand1=EvoExpression
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }
		
		//EvoExpression
		public RuleCall getOperand1EvoExpressionParserRuleCall_0_0() { return cOperand1EvoExpressionParserRuleCall_0_0; }
		
		//'<->'
		public Keyword getLessThanSignHyphenMinusGreaterThanSignKeyword_1() { return cLessThanSignHyphenMinusGreaterThanSignKeyword_1; }
		
		//operand2=EvoExpression
		public Assignment getOperand2Assignment_2() { return cOperand2Assignment_2; }
		
		//EvoExpression
		public RuleCall getOperand2EvoExpressionParserRuleCall_2_0() { return cOperand2EvoExpressionParserRuleCall_2_0; }
	}
	public class EvoNegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoNegation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandEvoExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//EvoNegation dw_expression::HyNegationExpression:
		//	'-' operand=EvoExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'-' operand=EvoExpression
		public Group getGroup() { return cGroup; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//operand=EvoExpression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }
		
		//EvoExpression
		public RuleCall getOperandEvoExpressionParserRuleCall_1_0() { return cOperandEvoExpressionParserRuleCall_1_0; }
	}
	public class EvoFeatureReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoFeatureReferenceExpression");
		private final Assignment cFeatureAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cFeatureHyFeatureCrossReference_0 = (CrossReference)cFeatureAssignment.eContents().get(0);
		private final RuleCall cFeatureHyFeatureSTRINGTerminalRuleCall_0_1 = (RuleCall)cFeatureHyFeatureCrossReference_0.eContents().get(1);
		
		////EvoNot returns evo_logic::EvoNot: 
		////operand=EvoExpression
		////	STRING
		// //;
		////	@Operator(type="unary_prefix", weight="14", superclass="EvoExpression")
		////	HyNotExpression ::= "!" operand;
		////	@Operator(type="primitive", weight="15", superclass="EvoExpression")
		////	HyNestedExpression ::= "(" operand ")";
		//EvoFeatureReferenceExpression HyFeatureReferenceExpression:
		//	feature=[dw_feature::HyFeature|STRING];
		@Override public ParserRule getRule() { return rule; }
		
		//feature=[dw_feature::HyFeature|STRING]
		public Assignment getFeatureAssignment() { return cFeatureAssignment; }
		
		//[dw_feature::HyFeature|STRING]
		public CrossReference getFeatureHyFeatureCrossReference_0() { return cFeatureHyFeatureCrossReference_0; }
		
		//STRING
		public RuleCall getFeatureHyFeatureSTRINGTerminalRuleCall_0_1() { return cFeatureHyFeatureSTRINGTerminalRuleCall_0_1; }
	}
	public class EvoConditionalFeatureReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoConditionalFeatureReferenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureHyFeatureCrossReference_1_0 = (CrossReference)cFeatureAssignment_1.eContents().get(0);
		private final RuleCall cFeatureHyFeatureQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cFeatureHyFeatureCrossReference_1_0.eContents().get(1);
		private final Assignment cVersionRestrictionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVersionRestrictionEvoVersionRestrictionParserRuleCall_2_0 = (RuleCall)cVersionRestrictionAssignment_2.eContents().get(0);
		
		//// (versionRestriction=EvoVersionRestriction)?;
		//EvoConditionalFeatureReferenceExpression dw_expression::HyConditionalFeatureReferenceExpression:
		//	"?" feature=[dw_feature::HyFeature|QualifiedName] versionRestriction=EvoVersionRestriction?;
		@Override public ParserRule getRule() { return rule; }
		
		//"?" feature=[dw_feature::HyFeature|QualifiedName] versionRestriction=EvoVersionRestriction?
		public Group getGroup() { return cGroup; }
		
		//"?"
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }
		
		//feature=[dw_feature::HyFeature|QualifiedName]
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }
		
		//[dw_feature::HyFeature|QualifiedName]
		public CrossReference getFeatureHyFeatureCrossReference_1_0() { return cFeatureHyFeatureCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getFeatureHyFeatureQualifiedNameParserRuleCall_1_0_1() { return cFeatureHyFeatureQualifiedNameParserRuleCall_1_0_1; }
		
		//versionRestriction=EvoVersionRestriction?
		public Assignment getVersionRestrictionAssignment_2() { return cVersionRestrictionAssignment_2; }
		
		//EvoVersionRestriction
		public RuleCall getVersionRestrictionEvoVersionRestrictionParserRuleCall_2_0() { return cVersionRestrictionEvoVersionRestrictionParserRuleCall_2_0; }
	}
	public class EvoVersionRestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoVersionRestriction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEvoRelativeVersionRestrictionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEvoVersionRangeRestrictionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EvoVersionRestriction dw_expression::HyVersionRestriction:
		//	EvoRelativeVersionRestriction | EvoVersionRangeRestriction;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoRelativeVersionRestriction | EvoVersionRangeRestriction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EvoRelativeVersionRestriction
		public RuleCall getEvoRelativeVersionRestrictionParserRuleCall_0() { return cEvoRelativeVersionRestrictionParserRuleCall_0; }
		
		//EvoVersionRangeRestriction
		public RuleCall getEvoVersionRangeRestrictionParserRuleCall_1() { return cEvoVersionRangeRestrictionParserRuleCall_1; }
	}
	public class EvoRelativeVersionRestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoRelativeVersionRestriction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorEvoRelativeVersionRestrictionOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cVersionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVersionHyVersionCrossReference_2_0 = (CrossReference)cVersionAssignment_2.eContents().get(0);
		private final RuleCall cVersionHyVersionIDTerminalRuleCall_2_0_1 = (RuleCall)cVersionHyVersionCrossReference_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EvoRelativeVersionRestriction dw_expression::HyRelativeVersionRestriction:
		//	"[" operator=EvoRelativeVersionRestrictionOperator version=[dw_feature::HyVersion] "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" operator=EvoRelativeVersionRestrictionOperator version=[dw_feature::HyVersion] "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//operator=EvoRelativeVersionRestrictionOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//EvoRelativeVersionRestrictionOperator
		public RuleCall getOperatorEvoRelativeVersionRestrictionOperatorEnumRuleCall_1_0() { return cOperatorEvoRelativeVersionRestrictionOperatorEnumRuleCall_1_0; }
		
		//version=[dw_feature::HyVersion]
		public Assignment getVersionAssignment_2() { return cVersionAssignment_2; }
		
		//[dw_feature::HyVersion]
		public CrossReference getVersionHyVersionCrossReference_2_0() { return cVersionHyVersionCrossReference_2_0; }
		
		//ID
		public RuleCall getVersionHyVersionIDTerminalRuleCall_2_0_1() { return cVersionHyVersionIDTerminalRuleCall_2_0_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class EvoVersionRangeRestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoVersionRangeRestriction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cLowerIncludedAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cLowerIncludedTrueKeyword_0_1_0 = (Keyword)cLowerIncludedAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFalseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLowerVersionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cLowerVersionHyVersionCrossReference_1_1_0 = (CrossReference)cLowerVersionAssignment_1_1.eContents().get(0);
		private final RuleCall cLowerVersionHyVersionQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cLowerVersionHyVersionCrossReference_1_1_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cUpperIncludedAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Keyword cUpperIncludedTrueKeyword_1_3_0 = (Keyword)cUpperIncludedAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cFalseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUpperVersionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cUpperVersionHyVersionCrossReference_2_1_0 = (CrossReference)cUpperVersionAssignment_2_1.eContents().get(0);
		private final RuleCall cUpperVersionHyVersionQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cUpperVersionHyVersionCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//EvoVersionRangeRestriction dw_expression::HyVersionRangeRestriction:
		//	"[" lowerIncluded?='true' | 'false' lowerVersion=[dw_feature::HyVersion|QualifiedName] "-" upperIncluded?='true' |
		//	'false' upperVersion=[dw_feature::HyVersion|QualifiedName] "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" lowerIncluded?='true' | 'false' lowerVersion=[dw_feature::HyVersion|QualifiedName] "-" upperIncluded?='true' |
		//'false' upperVersion=[dw_feature::HyVersion|QualifiedName] "]"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"[" lowerIncluded?='true'
		public Group getGroup_0() { return cGroup_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//lowerIncluded?='true'
		public Assignment getLowerIncludedAssignment_0_1() { return cLowerIncludedAssignment_0_1; }
		
		//'true'
		public Keyword getLowerIncludedTrueKeyword_0_1_0() { return cLowerIncludedTrueKeyword_0_1_0; }
		
		//'false' lowerVersion=[dw_feature::HyVersion|QualifiedName] "-" upperIncluded?='true'
		public Group getGroup_1() { return cGroup_1; }
		
		//'false'
		public Keyword getFalseKeyword_1_0() { return cFalseKeyword_1_0; }
		
		//lowerVersion=[dw_feature::HyVersion|QualifiedName]
		public Assignment getLowerVersionAssignment_1_1() { return cLowerVersionAssignment_1_1; }
		
		//[dw_feature::HyVersion|QualifiedName]
		public CrossReference getLowerVersionHyVersionCrossReference_1_1_0() { return cLowerVersionHyVersionCrossReference_1_1_0; }
		
		//QualifiedName
		public RuleCall getLowerVersionHyVersionQualifiedNameParserRuleCall_1_1_0_1() { return cLowerVersionHyVersionQualifiedNameParserRuleCall_1_1_0_1; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1_2() { return cHyphenMinusKeyword_1_2; }
		
		//upperIncluded?='true'
		public Assignment getUpperIncludedAssignment_1_3() { return cUpperIncludedAssignment_1_3; }
		
		//'true'
		public Keyword getUpperIncludedTrueKeyword_1_3_0() { return cUpperIncludedTrueKeyword_1_3_0; }
		
		//'false' upperVersion=[dw_feature::HyVersion|QualifiedName] "]"
		public Group getGroup_2() { return cGroup_2; }
		
		//'false'
		public Keyword getFalseKeyword_2_0() { return cFalseKeyword_2_0; }
		
		//upperVersion=[dw_feature::HyVersion|QualifiedName]
		public Assignment getUpperVersionAssignment_2_1() { return cUpperVersionAssignment_2_1; }
		
		//[dw_feature::HyVersion|QualifiedName]
		public CrossReference getUpperVersionHyVersionCrossReference_2_1_0() { return cUpperVersionHyVersionCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getUpperVersionHyVersionQualifiedNameParserRuleCall_2_1_0_1() { return cUpperVersionHyVersionQualifiedNameParserRuleCall_2_1_0_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
	}
	public class EvoContextInformationReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoContextInformationReferenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContextInformationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContextInformationHyContextualInformationCrossReference_1_0 = (CrossReference)cContextInformationAssignment_1.eContents().get(0);
		private final RuleCall cContextInformationHyContextualInformationQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cContextInformationHyContextualInformationCrossReference_1_0.eContents().get(1);
		
		//EvoContextInformationReferenceExpression dw_expression::HyContextInformationReferenceExpression:
		//	"context:" contextInformation=[dw_context::HyContextualInformation|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//"context:" contextInformation=[dw_context::HyContextualInformation|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//"context:"
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//contextInformation=[dw_context::HyContextualInformation|QualifiedName]
		public Assignment getContextInformationAssignment_1() { return cContextInformationAssignment_1; }
		
		//[dw_context::HyContextualInformation|QualifiedName]
		public CrossReference getContextInformationHyContextualInformationCrossReference_1_0() { return cContextInformationHyContextualInformationCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getContextInformationHyContextualInformationQualifiedNameParserRuleCall_1_0_1() { return cContextInformationHyContextualInformationQualifiedNameParserRuleCall_1_0_1; }
	}
	public class EvoAttributeReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoAttributeReferenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFeatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFeatureHyFeatureCrossReference_0_0 = (CrossReference)cFeatureAssignment_0.eContents().get(0);
		private final RuleCall cFeatureHyFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cFeatureHyFeatureCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttributeHyFeatureAttributeCrossReference_2_0 = (CrossReference)cAttributeAssignment_2.eContents().get(0);
		private final RuleCall cAttributeHyFeatureAttributeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cAttributeHyFeatureAttributeCrossReference_2_0.eContents().get(1);
		
		//EvoAttributeReferenceExpression dw_expression::HyAttributeReferenceExpression:
		//	feature=[dw_feature::HyFeature] '.' attribute=[dw_feature::HyFeatureAttribute|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//feature=[dw_feature::HyFeature] '.' attribute=[dw_feature::HyFeatureAttribute|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//feature=[dw_feature::HyFeature]
		public Assignment getFeatureAssignment_0() { return cFeatureAssignment_0; }
		
		//[dw_feature::HyFeature]
		public CrossReference getFeatureHyFeatureCrossReference_0_0() { return cFeatureHyFeatureCrossReference_0_0; }
		
		//ID
		public RuleCall getFeatureHyFeatureIDTerminalRuleCall_0_0_1() { return cFeatureHyFeatureIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//attribute=[dw_feature::HyFeatureAttribute|QualifiedName]
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }
		
		//[dw_feature::HyFeatureAttribute|QualifiedName]
		public CrossReference getAttributeHyFeatureAttributeCrossReference_2_0() { return cAttributeHyFeatureAttributeCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getAttributeHyFeatureAttributeQualifiedNameParserRuleCall_2_0_1() { return cAttributeHyFeatureAttributeQualifiedNameParserRuleCall_2_0_1; }
	}
	public class EvoValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoValueExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEvoValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//EvoValueExpression dw_expression::HyValueExpression:
		//	value=EvoValue;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EvoValue
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EvoValue
		public RuleCall getValueEvoValueParserRuleCall_0() { return cValueEvoValueParserRuleCall_0; }
	}
	public class EvoValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEvoNumberValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEvoBooleanValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EvoValue dw_data::HyValue:
		//	EvoNumberValue | EvoBooleanValue;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoNumberValue | EvoBooleanValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EvoNumberValue
		public RuleCall getEvoNumberValueParserRuleCall_0() { return cEvoNumberValueParserRuleCall_0; }
		
		//EvoBooleanValue
		public RuleCall getEvoBooleanValueParserRuleCall_1() { return cEvoBooleanValueParserRuleCall_1; }
	}
	public class EvoNumberValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoNumberValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//EvoNumberValue dw_data::HyNumberValue:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class EvoBooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoBooleanValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHyBooleanValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_0_0 = (Keyword)cValueAssignment_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//EvoBooleanValue dw_data::HyBooleanValue:
		//	{dw_data::HyBooleanValue} (value?='true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//{dw_data::HyBooleanValue} (value?='true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//{dw_data::HyBooleanValue}
		public Action getHyBooleanValueAction_0() { return cHyBooleanValueAction_0; }
		
		//value?='true' | 'false'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value?='true'
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_1_0_0() { return cValueTrueKeyword_1_0_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}
	public class EvoEnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoEnumValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEnumAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEnumHyEnumCrossReference_1_0 = (CrossReference)cEnumAssignment_1.eContents().get(0);
		private final RuleCall cEnumHyEnumQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cEnumHyEnumCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEnumLiteralAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cEnumLiteralHyEnumLiteralCrossReference_3_0 = (CrossReference)cEnumLiteralAssignment_3.eContents().get(0);
		private final RuleCall cEnumLiteralHyEnumLiteralQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cEnumLiteralHyEnumLiteralCrossReference_3_0.eContents().get(1);
		
		//EvoEnumValue dw_data::HyEnumValue:
		//	"enum:" ^enum=[dw_data::HyEnum|QualifiedName] "." enumLiteral=[dw_data::HyEnumLiteral|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//"enum:" ^enum=[dw_data::HyEnum|QualifiedName] "." enumLiteral=[dw_data::HyEnumLiteral|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//"enum:"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//^enum=[dw_data::HyEnum|QualifiedName]
		public Assignment getEnumAssignment_1() { return cEnumAssignment_1; }
		
		//[dw_data::HyEnum|QualifiedName]
		public CrossReference getEnumHyEnumCrossReference_1_0() { return cEnumHyEnumCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getEnumHyEnumQualifiedNameParserRuleCall_1_0_1() { return cEnumHyEnumQualifiedNameParserRuleCall_1_0_1; }
		
		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//enumLiteral=[dw_data::HyEnumLiteral|QualifiedName]
		public Assignment getEnumLiteralAssignment_3() { return cEnumLiteralAssignment_3; }
		
		//[dw_data::HyEnumLiteral|QualifiedName]
		public CrossReference getEnumLiteralHyEnumLiteralCrossReference_3_0() { return cEnumLiteralHyEnumLiteralCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getEnumLiteralHyEnumLiteralQualifiedNameParserRuleCall_3_0_1() { return cEnumLiteralHyEnumLiteralQualifiedNameParserRuleCall_3_0_1; }
	}
	public class EvoEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cLiteralsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cLiteralsEvoEnumLiteralParserRuleCall_3_0_0 = (RuleCall)cLiteralsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cLiteralsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cLiteralsEvoEnumLiteralParserRuleCall_3_1_1_0 = (RuleCall)cLiteralsAssignment_3_1_1.eContents().get(0);
		
		//EvoEnum dw_data::HyEnum:
		//	"Enum(" name=ID "," (literals+=EvoEnumLiteral (',' literals+=EvoEnumLiteral)*);
		@Override public ParserRule getRule() { return rule; }
		
		//"Enum(" name=ID "," (literals+=EvoEnumLiteral (',' literals+=EvoEnumLiteral)*)
		public Group getGroup() { return cGroup; }
		
		//"Enum("
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//literals+=EvoEnumLiteral (',' literals+=EvoEnumLiteral)*
		public Group getGroup_3() { return cGroup_3; }
		
		//literals+=EvoEnumLiteral
		public Assignment getLiteralsAssignment_3_0() { return cLiteralsAssignment_3_0; }
		
		//EvoEnumLiteral
		public RuleCall getLiteralsEvoEnumLiteralParserRuleCall_3_0_0() { return cLiteralsEvoEnumLiteralParserRuleCall_3_0_0; }
		
		//(',' literals+=EvoEnumLiteral)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//literals+=EvoEnumLiteral
		public Assignment getLiteralsAssignment_3_1_1() { return cLiteralsAssignment_3_1_1; }
		
		//EvoEnumLiteral
		public RuleCall getLiteralsEvoEnumLiteralParserRuleCall_3_1_1_0() { return cLiteralsEvoEnumLiteralParserRuleCall_3_1_1_0; }
	}
	public class EvoEnumLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoEnumLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumLiteralKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueINTTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Group cGroup_5_1_0 = (Group)cAlternatives_5_1.eContents().get(0);
		private final Assignment cValidSinceAssignment_5_1_0_0 = (Assignment)cGroup_5_1_0.eContents().get(0);
		private final RuleCall cValidSinceDATETerminalRuleCall_5_1_0_0_0 = (RuleCall)cValidSinceAssignment_5_1_0_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_5_1_0_1 = (Keyword)cGroup_5_1_0.eContents().get(1);
		private final Assignment cValidUntilAssignment_5_1_0_2 = (Assignment)cGroup_5_1_0.eContents().get(2);
		private final RuleCall cValidUntilDATETerminalRuleCall_5_1_0_2_0 = (RuleCall)cValidUntilAssignment_5_1_0_2.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cAlternatives_5_1.eContents().get(1);
		private final Assignment cValidSinceAssignment_5_1_1_0 = (Assignment)cGroup_5_1_1.eContents().get(0);
		private final RuleCall cValidSinceDATETerminalRuleCall_5_1_1_0_0 = (RuleCall)cValidSinceAssignment_5_1_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_5_1_1_1 = (Keyword)cGroup_5_1_1.eContents().get(1);
		private final Group cGroup_5_1_2 = (Group)cAlternatives_5_1.eContents().get(2);
		private final Keyword cEternityKeyword_5_1_2_0 = (Keyword)cGroup_5_1_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_5_1_2_1 = (Keyword)cGroup_5_1_2.eContents().get(1);
		private final Assignment cValidUntilAssignment_5_1_2_2 = (Assignment)cGroup_5_1_2.eContents().get(2);
		private final RuleCall cValidUntilDATETerminalRuleCall_5_1_2_2_0 = (RuleCall)cValidUntilAssignment_5_1_2_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//EvoEnumLiteral dw_data::HyEnumLiteral:
		//	"EnumLiteral(" name=ID "," value=INT ")" ("[" (validSince=DATE "-" validUntil=DATE | validSince=DATE "-" | "eternity"
		//	"-" validUntil=DATE) "]")?;
		@Override public ParserRule getRule() { return rule; }
		
		//"EnumLiteral(" name=ID "," value=INT ")" ("[" (validSince=DATE "-" validUntil=DATE | validSince=DATE "-" | "eternity"
		//"-" validUntil=DATE) "]")?
		public Group getGroup() { return cGroup; }
		
		//"EnumLiteral("
		public Keyword getEnumLiteralKeyword_0() { return cEnumLiteralKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//value=INT
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_3_0() { return cValueINTTerminalRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//("[" (validSince=DATE "-" validUntil=DATE | validSince=DATE "-" | "eternity" "-" validUntil=DATE) "]")?
		public Group getGroup_5() { return cGroup_5; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_5_0() { return cLeftSquareBracketKeyword_5_0; }
		
		//validSince=DATE "-" validUntil=DATE | validSince=DATE "-" | "eternity" "-" validUntil=DATE
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }
		
		//validSince=DATE "-" validUntil=DATE
		public Group getGroup_5_1_0() { return cGroup_5_1_0; }
		
		//validSince=DATE
		public Assignment getValidSinceAssignment_5_1_0_0() { return cValidSinceAssignment_5_1_0_0; }
		
		//DATE
		public RuleCall getValidSinceDATETerminalRuleCall_5_1_0_0_0() { return cValidSinceDATETerminalRuleCall_5_1_0_0_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_5_1_0_1() { return cHyphenMinusKeyword_5_1_0_1; }
		
		//validUntil=DATE
		public Assignment getValidUntilAssignment_5_1_0_2() { return cValidUntilAssignment_5_1_0_2; }
		
		//DATE
		public RuleCall getValidUntilDATETerminalRuleCall_5_1_0_2_0() { return cValidUntilDATETerminalRuleCall_5_1_0_2_0; }
		
		//validSince=DATE "-"
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }
		
		//validSince=DATE
		public Assignment getValidSinceAssignment_5_1_1_0() { return cValidSinceAssignment_5_1_1_0; }
		
		//DATE
		public RuleCall getValidSinceDATETerminalRuleCall_5_1_1_0_0() { return cValidSinceDATETerminalRuleCall_5_1_1_0_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_5_1_1_1() { return cHyphenMinusKeyword_5_1_1_1; }
		
		//"eternity" "-" validUntil=DATE
		public Group getGroup_5_1_2() { return cGroup_5_1_2; }
		
		//"eternity"
		public Keyword getEternityKeyword_5_1_2_0() { return cEternityKeyword_5_1_2_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_5_1_2_1() { return cHyphenMinusKeyword_5_1_2_1; }
		
		//validUntil=DATE
		public Assignment getValidUntilAssignment_5_1_2_2() { return cValidUntilAssignment_5_1_2_2; }
		
		//DATE
		public RuleCall getValidUntilDATETerminalRuleCall_5_1_2_2_0() { return cValidUntilDATETerminalRuleCall_5_1_2_2_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_5_2() { return cRightSquareBracketKeyword_5_2; }
	}
	public class EvoBooleanValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoBooleanValueExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHyBooleanValueExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_0_0 = (Keyword)cValueAssignment_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//EvoBooleanValueExpression dw_expression::HyBooleanValueExpression:
		//	{dw_expression::HyBooleanValueExpression} (value?='true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//{dw_expression::HyBooleanValueExpression} (value?='true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//{dw_expression::HyBooleanValueExpression}
		public Action getHyBooleanValueExpressionAction_0() { return cHyBooleanValueExpressionAction_0; }
		
		//value?='true' | 'false'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value?='true'
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_1_0_0() { return cValueTrueKeyword_1_0_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}
	public class EvoMimumumExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoMimumumExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandEvoExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//EvoMimumumExpression dw_expression::HyMinimumExpression:
		//	"min(" operand=EvoExpression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"min(" operand=EvoExpression ")"
		public Group getGroup() { return cGroup; }
		
		//"min("
		public Keyword getMinKeyword_0() { return cMinKeyword_0; }
		
		//operand=EvoExpression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }
		
		//EvoExpression
		public RuleCall getOperandEvoExpressionParserRuleCall_1_0() { return cOperandEvoExpressionParserRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class EvoMaximumExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoMaximumExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandEvoExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//EvoMaximumExpression dw_expression::HyMaximumExpression:
		//	"max(" operand=EvoExpression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"max(" operand=EvoExpression ")"
		public Group getGroup() { return cGroup; }
		
		//"max("
		public Keyword getMaxKeyword_0() { return cMaxKeyword_0; }
		
		//operand=EvoExpression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }
		
		//EvoExpression
		public RuleCall getOperandEvoExpressionParserRuleCall_1_0() { return cOperandEvoExpressionParserRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class EvoIfPossibleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoIfPossibleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfPossibleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperandsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandsEvoExpressionParserRuleCall_1_0 = (RuleCall)cOperandsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOperandsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOperandsEvoExpressionParserRuleCall_2_1_0 = (RuleCall)cOperandsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EvoIfPossibleExpression dw_expression::HyIfPossibleExpression:
		//	"ifPossible(" operands+=EvoExpression ("," operands+=EvoExpression)* ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"ifPossible(" operands+=EvoExpression ("," operands+=EvoExpression)* ")"
		public Group getGroup() { return cGroup; }
		
		//"ifPossible("
		public Keyword getIfPossibleKeyword_0() { return cIfPossibleKeyword_0; }
		
		//operands+=EvoExpression
		public Assignment getOperandsAssignment_1() { return cOperandsAssignment_1; }
		
		//EvoExpression
		public RuleCall getOperandsEvoExpressionParserRuleCall_1_0() { return cOperandsEvoExpressionParserRuleCall_1_0; }
		
		//("," operands+=EvoExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//operands+=EvoExpression
		public Assignment getOperandsAssignment_2_1() { return cOperandsAssignment_2_1; }
		
		//EvoExpression
		public RuleCall getOperandsEvoExpressionParserRuleCall_2_1_0() { return cOperandsEvoExpressionParserRuleCall_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class EvoLessExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoLessExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperand1EvoExpressionParserRuleCall_0_0 = (RuleCall)cOperand1Assignment_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperand2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperand2EvoExpressionParserRuleCall_2_0 = (RuleCall)cOperand2Assignment_2.eContents().get(0);
		
		//EvoLessExpression dw_expression::HyLessExpression:
		//	operand1=EvoExpression "<" operand2=EvoExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//operand1=EvoExpression "<" operand2=EvoExpression
		public Group getGroup() { return cGroup; }
		
		//operand1=EvoExpression
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }
		
		//EvoExpression
		public RuleCall getOperand1EvoExpressionParserRuleCall_0_0() { return cOperand1EvoExpressionParserRuleCall_0_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//operand2=EvoExpression
		public Assignment getOperand2Assignment_2() { return cOperand2Assignment_2; }
		
		//EvoExpression
		public RuleCall getOperand2EvoExpressionParserRuleCall_2_0() { return cOperand2EvoExpressionParserRuleCall_2_0; }
	}
	public class EvoLessOrEqualExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoLessOrEqualExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperand1EvoExpressionParserRuleCall_0_0 = (RuleCall)cOperand1Assignment_0.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperand2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperand2EvoExpressionParserRuleCall_2_0 = (RuleCall)cOperand2Assignment_2.eContents().get(0);
		
		//EvoLessOrEqualExpression dw_expression::HyLessOrEqualExpression:
		//	operand1=EvoExpression "<=" operand2=EvoExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//operand1=EvoExpression "<=" operand2=EvoExpression
		public Group getGroup() { return cGroup; }
		
		//operand1=EvoExpression
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }
		
		//EvoExpression
		public RuleCall getOperand1EvoExpressionParserRuleCall_0_0() { return cOperand1EvoExpressionParserRuleCall_0_0; }
		
		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }
		
		//operand2=EvoExpression
		public Assignment getOperand2Assignment_2() { return cOperand2Assignment_2; }
		
		//EvoExpression
		public RuleCall getOperand2EvoExpressionParserRuleCall_2_0() { return cOperand2EvoExpressionParserRuleCall_2_0; }
	}
	public class EvoGreaterExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoGreaterExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperand1EvoExpressionParserRuleCall_0_0 = (RuleCall)cOperand1Assignment_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperand2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperand2EvoExpressionParserRuleCall_2_0 = (RuleCall)cOperand2Assignment_2.eContents().get(0);
		
		//EvoGreaterExpression dw_expression::HyGreaterExpression:
		//	operand1=EvoExpression "<" operand2=EvoExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//operand1=EvoExpression "<" operand2=EvoExpression
		public Group getGroup() { return cGroup; }
		
		//operand1=EvoExpression
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }
		
		//EvoExpression
		public RuleCall getOperand1EvoExpressionParserRuleCall_0_0() { return cOperand1EvoExpressionParserRuleCall_0_0; }
		
		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//operand2=EvoExpression
		public Assignment getOperand2Assignment_2() { return cOperand2Assignment_2; }
		
		//EvoExpression
		public RuleCall getOperand2EvoExpressionParserRuleCall_2_0() { return cOperand2EvoExpressionParserRuleCall_2_0; }
	}
	public class EvoGreaterOrEqualExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoGreaterOrEqualExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperand1EvoExpressionParserRuleCall_0_0 = (RuleCall)cOperand1Assignment_0.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperand2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperand2EvoExpressionParserRuleCall_2_0 = (RuleCall)cOperand2Assignment_2.eContents().get(0);
		
		//EvoGreaterOrEqualExpression dw_expression::HyGreaterOrEqualExpression:
		//	operand1=EvoExpression "<=" operand2=EvoExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//operand1=EvoExpression "<=" operand2=EvoExpression
		public Group getGroup() { return cGroup; }
		
		//operand1=EvoExpression
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }
		
		//EvoExpression
		public RuleCall getOperand1EvoExpressionParserRuleCall_0_0() { return cOperand1EvoExpressionParserRuleCall_0_0; }
		
		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }
		
		//operand2=EvoExpression
		public Assignment getOperand2Assignment_2() { return cOperand2Assignment_2; }
		
		//EvoExpression
		public RuleCall getOperand2EvoExpressionParserRuleCall_2_0() { return cOperand2EvoExpressionParserRuleCall_2_0; }
	}
	public class EvoSubtractionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoSubtractionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperand1EvoExpressionParserRuleCall_0_0 = (RuleCall)cOperand1Assignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperand2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperand2EvoExpressionParserRuleCall_2_0 = (RuleCall)cOperand2Assignment_2.eContents().get(0);
		
		//EvoSubtractionExpression dw_expression::HySubtractionExpression:
		//	operand1=EvoExpression "-" operand2=EvoExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//operand1=EvoExpression "-" operand2=EvoExpression
		public Group getGroup() { return cGroup; }
		
		//operand1=EvoExpression
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }
		
		//EvoExpression
		public RuleCall getOperand1EvoExpressionParserRuleCall_0_0() { return cOperand1EvoExpressionParserRuleCall_0_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//operand2=EvoExpression
		public Assignment getOperand2Assignment_2() { return cOperand2Assignment_2; }
		
		//EvoExpression
		public RuleCall getOperand2EvoExpressionParserRuleCall_2_0() { return cOperand2EvoExpressionParserRuleCall_2_0; }
	}
	public class EvoAdditionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoAdditionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperand1EvoExpressionParserRuleCall_0_0 = (RuleCall)cOperand1Assignment_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperand2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperand2EvoExpressionParserRuleCall_2_0 = (RuleCall)cOperand2Assignment_2.eContents().get(0);
		
		//EvoAdditionExpression dw_expression::HyAdditionExpression:
		//	operand1=EvoExpression "+" operand2=EvoExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//operand1=EvoExpression "+" operand2=EvoExpression
		public Group getGroup() { return cGroup; }
		
		//operand1=EvoExpression
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }
		
		//EvoExpression
		public RuleCall getOperand1EvoExpressionParserRuleCall_0_0() { return cOperand1EvoExpressionParserRuleCall_0_0; }
		
		//"+"
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
		
		//operand2=EvoExpression
		public Assignment getOperand2Assignment_2() { return cOperand2Assignment_2; }
		
		//EvoExpression
		public RuleCall getOperand2EvoExpressionParserRuleCall_2_0() { return cOperand2EvoExpressionParserRuleCall_2_0; }
	}
	public class EvoModuloExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoModuloExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperand1EvoExpressionParserRuleCall_0_0 = (RuleCall)cOperand1Assignment_0.eContents().get(0);
		private final Keyword cPercentSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperand2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperand2EvoExpressionParserRuleCall_2_0 = (RuleCall)cOperand2Assignment_2.eContents().get(0);
		
		//EvoModuloExpression dw_expression::HyModuloExpression:
		//	operand1=EvoExpression "%" operand2=EvoExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//operand1=EvoExpression "%" operand2=EvoExpression
		public Group getGroup() { return cGroup; }
		
		//operand1=EvoExpression
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }
		
		//EvoExpression
		public RuleCall getOperand1EvoExpressionParserRuleCall_0_0() { return cOperand1EvoExpressionParserRuleCall_0_0; }
		
		//"%"
		public Keyword getPercentSignKeyword_1() { return cPercentSignKeyword_1; }
		
		//operand2=EvoExpression
		public Assignment getOperand2Assignment_2() { return cOperand2Assignment_2; }
		
		//EvoExpression
		public RuleCall getOperand2EvoExpressionParserRuleCall_2_0() { return cOperand2EvoExpressionParserRuleCall_2_0; }
	}
	public class EvoMultiplicationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoMultiplicationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperand1EvoExpressionParserRuleCall_0_0 = (RuleCall)cOperand1Assignment_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperand2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperand2EvoExpressionParserRuleCall_2_0 = (RuleCall)cOperand2Assignment_2.eContents().get(0);
		
		//EvoMultiplicationExpression dw_expression::HyMultiplicationExpression:
		//	operand1=EvoExpression "*" operand2=EvoExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//operand1=EvoExpression "*" operand2=EvoExpression
		public Group getGroup() { return cGroup; }
		
		//operand1=EvoExpression
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }
		
		//EvoExpression
		public RuleCall getOperand1EvoExpressionParserRuleCall_0_0() { return cOperand1EvoExpressionParserRuleCall_0_0; }
		
		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
		
		//operand2=EvoExpression
		public Assignment getOperand2Assignment_2() { return cOperand2Assignment_2; }
		
		//EvoExpression
		public RuleCall getOperand2EvoExpressionParserRuleCall_2_0() { return cOperand2EvoExpressionParserRuleCall_2_0; }
	}
	public class EvoDivisionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoDivisionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperand1EvoExpressionParserRuleCall_0_0 = (RuleCall)cOperand1Assignment_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperand2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperand2EvoExpressionParserRuleCall_2_0 = (RuleCall)cOperand2Assignment_2.eContents().get(0);
		
		//EvoDivisionExpression dw_expression::HyDivisionExpression:
		//	operand1=EvoExpression "/" operand2=EvoExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//operand1=EvoExpression "/" operand2=EvoExpression
		public Group getGroup() { return cGroup; }
		
		//operand1=EvoExpression
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }
		
		//EvoExpression
		public RuleCall getOperand1EvoExpressionParserRuleCall_0_0() { return cOperand1EvoExpressionParserRuleCall_0_0; }
		
		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//operand2=EvoExpression
		public Assignment getOperand2Assignment_2() { return cOperand2Assignment_2; }
		
		//EvoExpression
		public RuleCall getOperand2EvoExpressionParserRuleCall_2_0() { return cOperand2EvoExpressionParserRuleCall_2_0; }
	}
	
	public class EvoRelativeVersionRestrictionOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.EvoRelativeVersionRestrictionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLessThanEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLessThanLessThanSignKeyword_0_0 = (Keyword)cLessThanEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLessThanOrEqualEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLessThanOrEqualLessThanSignEqualsSignKeyword_1_0 = (Keyword)cLessThanOrEqualEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEqualEqualsSignKeyword_2_0 = (Keyword)cEqualEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThanOrEqualEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanOrEqualGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGreaterThanOrEqualEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThanEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanGreaterThanSignKeyword_4_0 = (Keyword)cGreaterThanEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum EvoRelativeVersionRestrictionOperator returns dw_expression::HyRelativeVersionRestrictionOperator:
		//	lessThan="<" | lessThanOrEqual="<=" | equal="=" | greaterThanOrEqual=">=" | greaterThan=">";
		public EnumRule getRule() { return rule; }
		
		//lessThan="<" | lessThanOrEqual="<=" | equal="=" | greaterThanOrEqual=">=" | greaterThan=">"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//lessThan="<"
		public EnumLiteralDeclaration getLessThanEnumLiteralDeclaration_0() { return cLessThanEnumLiteralDeclaration_0; }
		
		//"<"
		public Keyword getLessThanLessThanSignKeyword_0_0() { return cLessThanLessThanSignKeyword_0_0; }
		
		//lessThanOrEqual="<="
		public EnumLiteralDeclaration getLessThanOrEqualEnumLiteralDeclaration_1() { return cLessThanOrEqualEnumLiteralDeclaration_1; }
		
		//"<="
		public Keyword getLessThanOrEqualLessThanSignEqualsSignKeyword_1_0() { return cLessThanOrEqualLessThanSignEqualsSignKeyword_1_0; }
		
		//equal="="
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_2() { return cEqualEnumLiteralDeclaration_2; }
		
		//"="
		public Keyword getEqualEqualsSignKeyword_2_0() { return cEqualEqualsSignKeyword_2_0; }
		
		//greaterThanOrEqual=">="
		public EnumLiteralDeclaration getGreaterThanOrEqualEnumLiteralDeclaration_3() { return cGreaterThanOrEqualEnumLiteralDeclaration_3; }
		
		//">="
		public Keyword getGreaterThanOrEqualGreaterThanSignEqualsSignKeyword_3_0() { return cGreaterThanOrEqualGreaterThanSignEqualsSignKeyword_3_0; }
		
		//greaterThan=">"
		public EnumLiteralDeclaration getGreaterThanEnumLiteralDeclaration_4() { return cGreaterThanEnumLiteralDeclaration_4; }
		
		//">"
		public Keyword getGreaterThanGreaterThanSignKeyword_4_0() { return cGreaterThanGreaterThanSignKeyword_4_0; }
	}
	
	private final GrammarEntryElements pGrammarEntry;
	private final EvoExpressionElements pEvoExpression;
	private final EvoElementOfElements pEvoElementOf;
	private final EvoTerminalElements pEvoTerminal;
	private final QualifiedNameElements pQualifiedName;
	private final EvoNestedExpressionElements pEvoNestedExpression;
	private final EvoImplicationElements pEvoImplication;
	private final EvoEquivalenceExpressionElements pEvoEquivalenceExpression;
	private final EvoNegationElements pEvoNegation;
	private final EvoFeatureReferenceExpressionElements pEvoFeatureReferenceExpression;
	private final EvoConditionalFeatureReferenceExpressionElements pEvoConditionalFeatureReferenceExpression;
	private final EvoVersionRestrictionElements pEvoVersionRestriction;
	private final EvoRelativeVersionRestrictionElements pEvoRelativeVersionRestriction;
	private final EvoRelativeVersionRestrictionOperatorElements eEvoRelativeVersionRestrictionOperator;
	private final EvoVersionRangeRestrictionElements pEvoVersionRangeRestriction;
	private final EvoContextInformationReferenceExpressionElements pEvoContextInformationReferenceExpression;
	private final EvoAttributeReferenceExpressionElements pEvoAttributeReferenceExpression;
	private final EvoValueExpressionElements pEvoValueExpression;
	private final EvoValueElements pEvoValue;
	private final EvoNumberValueElements pEvoNumberValue;
	private final EvoBooleanValueElements pEvoBooleanValue;
	private final EvoEnumValueElements pEvoEnumValue;
	private final EvoEnumElements pEvoEnum;
	private final EvoEnumLiteralElements pEvoEnumLiteral;
	private final EvoBooleanValueExpressionElements pEvoBooleanValueExpression;
	private final EvoMimumumExpressionElements pEvoMimumumExpression;
	private final EvoMaximumExpressionElements pEvoMaximumExpression;
	private final EvoIfPossibleExpressionElements pEvoIfPossibleExpression;
	private final EvoLessExpressionElements pEvoLessExpression;
	private final EvoLessOrEqualExpressionElements pEvoLessOrEqualExpression;
	private final EvoGreaterExpressionElements pEvoGreaterExpression;
	private final EvoGreaterOrEqualExpressionElements pEvoGreaterOrEqualExpression;
	private final EvoSubtractionExpressionElements pEvoSubtractionExpression;
	private final EvoAdditionExpressionElements pEvoAdditionExpression;
	private final EvoModuloExpressionElements pEvoModuloExpression;
	private final EvoMultiplicationExpressionElements pEvoMultiplicationExpression;
	private final EvoDivisionExpressionElements pEvoDivisionExpression;
	private final TerminalRule tDATE;
	
	private final Grammar grammar;
	
	private final EvoLogicDslGrammarAccess gaEvoLogicDsl;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExpressionDslGrammarAccess(GrammarProvider grammarProvider,
			EvoLogicDslGrammarAccess gaEvoLogicDsl,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaEvoLogicDsl = gaEvoLogicDsl;
		this.gaTerminals = gaTerminals;
		this.pGrammarEntry = new GrammarEntryElements();
		this.pEvoExpression = new EvoExpressionElements();
		this.pEvoElementOf = new EvoElementOfElements();
		this.pEvoTerminal = new EvoTerminalElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pEvoNestedExpression = new EvoNestedExpressionElements();
		this.pEvoImplication = new EvoImplicationElements();
		this.pEvoEquivalenceExpression = new EvoEquivalenceExpressionElements();
		this.pEvoNegation = new EvoNegationElements();
		this.pEvoFeatureReferenceExpression = new EvoFeatureReferenceExpressionElements();
		this.pEvoConditionalFeatureReferenceExpression = new EvoConditionalFeatureReferenceExpressionElements();
		this.pEvoVersionRestriction = new EvoVersionRestrictionElements();
		this.pEvoRelativeVersionRestriction = new EvoRelativeVersionRestrictionElements();
		this.eEvoRelativeVersionRestrictionOperator = new EvoRelativeVersionRestrictionOperatorElements();
		this.pEvoVersionRangeRestriction = new EvoVersionRangeRestrictionElements();
		this.pEvoContextInformationReferenceExpression = new EvoContextInformationReferenceExpressionElements();
		this.pEvoAttributeReferenceExpression = new EvoAttributeReferenceExpressionElements();
		this.pEvoValueExpression = new EvoValueExpressionElements();
		this.pEvoValue = new EvoValueElements();
		this.pEvoNumberValue = new EvoNumberValueElements();
		this.pEvoBooleanValue = new EvoBooleanValueElements();
		this.pEvoEnumValue = new EvoEnumValueElements();
		this.pEvoEnum = new EvoEnumElements();
		this.pEvoEnumLiteral = new EvoEnumLiteralElements();
		this.pEvoBooleanValueExpression = new EvoBooleanValueExpressionElements();
		this.pEvoMimumumExpression = new EvoMimumumExpressionElements();
		this.pEvoMaximumExpression = new EvoMaximumExpressionElements();
		this.pEvoIfPossibleExpression = new EvoIfPossibleExpressionElements();
		this.pEvoLessExpression = new EvoLessExpressionElements();
		this.pEvoLessOrEqualExpression = new EvoLessOrEqualExpressionElements();
		this.pEvoGreaterExpression = new EvoGreaterExpressionElements();
		this.pEvoGreaterOrEqualExpression = new EvoGreaterOrEqualExpressionElements();
		this.pEvoSubtractionExpression = new EvoSubtractionExpressionElements();
		this.pEvoAdditionExpression = new EvoAdditionExpressionElements();
		this.pEvoModuloExpression = new EvoModuloExpressionElements();
		this.pEvoMultiplicationExpression = new EvoMultiplicationExpressionElements();
		this.pEvoDivisionExpression = new EvoDivisionExpressionElements();
		this.tDATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.ExpressionDsl.DATE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.evorepair.feature.expression.ExpressionDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public EvoLogicDslGrammarAccess getEvoLogicDslGrammarAccess() {
		return gaEvoLogicDsl;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//@ Override GrammarEntry:
	//	expression=EvoExpression;
	public GrammarEntryElements getGrammarEntryAccess() {
		return pGrammarEntry;
	}
	
	public ParserRule getGrammarEntryRule() {
		return getGrammarEntryAccess().getRule();
	}
	
	//@ Override EvoExpression dw_expression::HyExpression:
	//	EvoOr;
	public EvoExpressionElements getEvoExpressionAccess() {
		return pEvoExpression;
	}
	
	public ParserRule getEvoExpressionRule() {
		return getEvoExpressionAccess().getRule();
	}
	
	//@ Override EvoElementOf dw_expression::HyExpression:
	//	EvoTerminal ({EvoSetElementOf.operand1=current} 'elementOf' operand2=EvoTerminal)*;
	public EvoElementOfElements getEvoElementOfAccess() {
		return pEvoElementOf;
	}
	
	public ParserRule getEvoElementOfRule() {
		return getEvoElementOfAccess().getRule();
	}
	
	//@ Override EvoTerminal dw_expression::HyExpression:
	//	EvoFeatureReferenceExpression | EvoNestedExpression;
	public EvoTerminalElements getEvoTerminalAccess() {
		return pEvoTerminal;
	}
	
	public ParserRule getEvoTerminalRule() {
		return getEvoTerminalAccess().getRule();
	}
	
	//@ Override QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//EvoNestedExpression dw_expression::HyNestedExpression:
	//	'(' operand=EvoExpression ')';
	public EvoNestedExpressionElements getEvoNestedExpressionAccess() {
		return pEvoNestedExpression;
	}
	
	public ParserRule getEvoNestedExpressionRule() {
		return getEvoNestedExpressionAccess().getRule();
	}
	
	//@ Override EvoImplication dw_expression::HyExpression:
	//	EvoBiconditional ({EvoImplication.operand1=current} '->' operand2=EvoBiconditionalSize)*;
	public EvoImplicationElements getEvoImplicationAccess() {
		return pEvoImplication;
	}
	
	public ParserRule getEvoImplicationRule() {
		return getEvoImplicationAccess().getRule();
	}
	
	//EvoEquivalenceExpression dw_expression::HyEquivalenceExpression:
	//	operand1=EvoExpression '<->' operand2=EvoExpression;
	public EvoEquivalenceExpressionElements getEvoEquivalenceExpressionAccess() {
		return pEvoEquivalenceExpression;
	}
	
	public ParserRule getEvoEquivalenceExpressionRule() {
		return getEvoEquivalenceExpressionAccess().getRule();
	}
	
	//EvoNegation dw_expression::HyNegationExpression:
	//	'-' operand=EvoExpression;
	public EvoNegationElements getEvoNegationAccess() {
		return pEvoNegation;
	}
	
	public ParserRule getEvoNegationRule() {
		return getEvoNegationAccess().getRule();
	}
	
	////EvoNot returns evo_logic::EvoNot: 
	////operand=EvoExpression
	////	STRING
	// //;
	////	@Operator(type="unary_prefix", weight="14", superclass="EvoExpression")
	////	HyNotExpression ::= "!" operand;
	////	@Operator(type="primitive", weight="15", superclass="EvoExpression")
	////	HyNestedExpression ::= "(" operand ")";
	//EvoFeatureReferenceExpression HyFeatureReferenceExpression:
	//	feature=[dw_feature::HyFeature|STRING];
	public EvoFeatureReferenceExpressionElements getEvoFeatureReferenceExpressionAccess() {
		return pEvoFeatureReferenceExpression;
	}
	
	public ParserRule getEvoFeatureReferenceExpressionRule() {
		return getEvoFeatureReferenceExpressionAccess().getRule();
	}
	
	//// (versionRestriction=EvoVersionRestriction)?;
	//EvoConditionalFeatureReferenceExpression dw_expression::HyConditionalFeatureReferenceExpression:
	//	"?" feature=[dw_feature::HyFeature|QualifiedName] versionRestriction=EvoVersionRestriction?;
	public EvoConditionalFeatureReferenceExpressionElements getEvoConditionalFeatureReferenceExpressionAccess() {
		return pEvoConditionalFeatureReferenceExpression;
	}
	
	public ParserRule getEvoConditionalFeatureReferenceExpressionRule() {
		return getEvoConditionalFeatureReferenceExpressionAccess().getRule();
	}
	
	//EvoVersionRestriction dw_expression::HyVersionRestriction:
	//	EvoRelativeVersionRestriction | EvoVersionRangeRestriction;
	public EvoVersionRestrictionElements getEvoVersionRestrictionAccess() {
		return pEvoVersionRestriction;
	}
	
	public ParserRule getEvoVersionRestrictionRule() {
		return getEvoVersionRestrictionAccess().getRule();
	}
	
	//EvoRelativeVersionRestriction dw_expression::HyRelativeVersionRestriction:
	//	"[" operator=EvoRelativeVersionRestrictionOperator version=[dw_feature::HyVersion] "]";
	public EvoRelativeVersionRestrictionElements getEvoRelativeVersionRestrictionAccess() {
		return pEvoRelativeVersionRestriction;
	}
	
	public ParserRule getEvoRelativeVersionRestrictionRule() {
		return getEvoRelativeVersionRestrictionAccess().getRule();
	}
	
	//enum EvoRelativeVersionRestrictionOperator returns dw_expression::HyRelativeVersionRestrictionOperator:
	//	lessThan="<" | lessThanOrEqual="<=" | equal="=" | greaterThanOrEqual=">=" | greaterThan=">";
	public EvoRelativeVersionRestrictionOperatorElements getEvoRelativeVersionRestrictionOperatorAccess() {
		return eEvoRelativeVersionRestrictionOperator;
	}
	
	public EnumRule getEvoRelativeVersionRestrictionOperatorRule() {
		return getEvoRelativeVersionRestrictionOperatorAccess().getRule();
	}
	
	//EvoVersionRangeRestriction dw_expression::HyVersionRangeRestriction:
	//	"[" lowerIncluded?='true' | 'false' lowerVersion=[dw_feature::HyVersion|QualifiedName] "-" upperIncluded?='true' |
	//	'false' upperVersion=[dw_feature::HyVersion|QualifiedName] "]";
	public EvoVersionRangeRestrictionElements getEvoVersionRangeRestrictionAccess() {
		return pEvoVersionRangeRestriction;
	}
	
	public ParserRule getEvoVersionRangeRestrictionRule() {
		return getEvoVersionRangeRestrictionAccess().getRule();
	}
	
	//EvoContextInformationReferenceExpression dw_expression::HyContextInformationReferenceExpression:
	//	"context:" contextInformation=[dw_context::HyContextualInformation|QualifiedName];
	public EvoContextInformationReferenceExpressionElements getEvoContextInformationReferenceExpressionAccess() {
		return pEvoContextInformationReferenceExpression;
	}
	
	public ParserRule getEvoContextInformationReferenceExpressionRule() {
		return getEvoContextInformationReferenceExpressionAccess().getRule();
	}
	
	//EvoAttributeReferenceExpression dw_expression::HyAttributeReferenceExpression:
	//	feature=[dw_feature::HyFeature] '.' attribute=[dw_feature::HyFeatureAttribute|QualifiedName];
	public EvoAttributeReferenceExpressionElements getEvoAttributeReferenceExpressionAccess() {
		return pEvoAttributeReferenceExpression;
	}
	
	public ParserRule getEvoAttributeReferenceExpressionRule() {
		return getEvoAttributeReferenceExpressionAccess().getRule();
	}
	
	//EvoValueExpression dw_expression::HyValueExpression:
	//	value=EvoValue;
	public EvoValueExpressionElements getEvoValueExpressionAccess() {
		return pEvoValueExpression;
	}
	
	public ParserRule getEvoValueExpressionRule() {
		return getEvoValueExpressionAccess().getRule();
	}
	
	//EvoValue dw_data::HyValue:
	//	EvoNumberValue | EvoBooleanValue;
	public EvoValueElements getEvoValueAccess() {
		return pEvoValue;
	}
	
	public ParserRule getEvoValueRule() {
		return getEvoValueAccess().getRule();
	}
	
	//EvoNumberValue dw_data::HyNumberValue:
	//	value=INT;
	public EvoNumberValueElements getEvoNumberValueAccess() {
		return pEvoNumberValue;
	}
	
	public ParserRule getEvoNumberValueRule() {
		return getEvoNumberValueAccess().getRule();
	}
	
	//EvoBooleanValue dw_data::HyBooleanValue:
	//	{dw_data::HyBooleanValue} (value?='true' | 'false');
	public EvoBooleanValueElements getEvoBooleanValueAccess() {
		return pEvoBooleanValue;
	}
	
	public ParserRule getEvoBooleanValueRule() {
		return getEvoBooleanValueAccess().getRule();
	}
	
	//EvoEnumValue dw_data::HyEnumValue:
	//	"enum:" ^enum=[dw_data::HyEnum|QualifiedName] "." enumLiteral=[dw_data::HyEnumLiteral|QualifiedName];
	public EvoEnumValueElements getEvoEnumValueAccess() {
		return pEvoEnumValue;
	}
	
	public ParserRule getEvoEnumValueRule() {
		return getEvoEnumValueAccess().getRule();
	}
	
	//EvoEnum dw_data::HyEnum:
	//	"Enum(" name=ID "," (literals+=EvoEnumLiteral (',' literals+=EvoEnumLiteral)*);
	public EvoEnumElements getEvoEnumAccess() {
		return pEvoEnum;
	}
	
	public ParserRule getEvoEnumRule() {
		return getEvoEnumAccess().getRule();
	}
	
	//EvoEnumLiteral dw_data::HyEnumLiteral:
	//	"EnumLiteral(" name=ID "," value=INT ")" ("[" (validSince=DATE "-" validUntil=DATE | validSince=DATE "-" | "eternity"
	//	"-" validUntil=DATE) "]")?;
	public EvoEnumLiteralElements getEvoEnumLiteralAccess() {
		return pEvoEnumLiteral;
	}
	
	public ParserRule getEvoEnumLiteralRule() {
		return getEvoEnumLiteralAccess().getRule();
	}
	
	//EvoBooleanValueExpression dw_expression::HyBooleanValueExpression:
	//	{dw_expression::HyBooleanValueExpression} (value?='true' | 'false');
	public EvoBooleanValueExpressionElements getEvoBooleanValueExpressionAccess() {
		return pEvoBooleanValueExpression;
	}
	
	public ParserRule getEvoBooleanValueExpressionRule() {
		return getEvoBooleanValueExpressionAccess().getRule();
	}
	
	//EvoMimumumExpression dw_expression::HyMinimumExpression:
	//	"min(" operand=EvoExpression ")";
	public EvoMimumumExpressionElements getEvoMimumumExpressionAccess() {
		return pEvoMimumumExpression;
	}
	
	public ParserRule getEvoMimumumExpressionRule() {
		return getEvoMimumumExpressionAccess().getRule();
	}
	
	//EvoMaximumExpression dw_expression::HyMaximumExpression:
	//	"max(" operand=EvoExpression ")";
	public EvoMaximumExpressionElements getEvoMaximumExpressionAccess() {
		return pEvoMaximumExpression;
	}
	
	public ParserRule getEvoMaximumExpressionRule() {
		return getEvoMaximumExpressionAccess().getRule();
	}
	
	//EvoIfPossibleExpression dw_expression::HyIfPossibleExpression:
	//	"ifPossible(" operands+=EvoExpression ("," operands+=EvoExpression)* ")";
	public EvoIfPossibleExpressionElements getEvoIfPossibleExpressionAccess() {
		return pEvoIfPossibleExpression;
	}
	
	public ParserRule getEvoIfPossibleExpressionRule() {
		return getEvoIfPossibleExpressionAccess().getRule();
	}
	
	//EvoLessExpression dw_expression::HyLessExpression:
	//	operand1=EvoExpression "<" operand2=EvoExpression;
	public EvoLessExpressionElements getEvoLessExpressionAccess() {
		return pEvoLessExpression;
	}
	
	public ParserRule getEvoLessExpressionRule() {
		return getEvoLessExpressionAccess().getRule();
	}
	
	//EvoLessOrEqualExpression dw_expression::HyLessOrEqualExpression:
	//	operand1=EvoExpression "<=" operand2=EvoExpression;
	public EvoLessOrEqualExpressionElements getEvoLessOrEqualExpressionAccess() {
		return pEvoLessOrEqualExpression;
	}
	
	public ParserRule getEvoLessOrEqualExpressionRule() {
		return getEvoLessOrEqualExpressionAccess().getRule();
	}
	
	//EvoGreaterExpression dw_expression::HyGreaterExpression:
	//	operand1=EvoExpression "<" operand2=EvoExpression;
	public EvoGreaterExpressionElements getEvoGreaterExpressionAccess() {
		return pEvoGreaterExpression;
	}
	
	public ParserRule getEvoGreaterExpressionRule() {
		return getEvoGreaterExpressionAccess().getRule();
	}
	
	//EvoGreaterOrEqualExpression dw_expression::HyGreaterOrEqualExpression:
	//	operand1=EvoExpression "<=" operand2=EvoExpression;
	public EvoGreaterOrEqualExpressionElements getEvoGreaterOrEqualExpressionAccess() {
		return pEvoGreaterOrEqualExpression;
	}
	
	public ParserRule getEvoGreaterOrEqualExpressionRule() {
		return getEvoGreaterOrEqualExpressionAccess().getRule();
	}
	
	//EvoSubtractionExpression dw_expression::HySubtractionExpression:
	//	operand1=EvoExpression "-" operand2=EvoExpression;
	public EvoSubtractionExpressionElements getEvoSubtractionExpressionAccess() {
		return pEvoSubtractionExpression;
	}
	
	public ParserRule getEvoSubtractionExpressionRule() {
		return getEvoSubtractionExpressionAccess().getRule();
	}
	
	//EvoAdditionExpression dw_expression::HyAdditionExpression:
	//	operand1=EvoExpression "+" operand2=EvoExpression;
	public EvoAdditionExpressionElements getEvoAdditionExpressionAccess() {
		return pEvoAdditionExpression;
	}
	
	public ParserRule getEvoAdditionExpressionRule() {
		return getEvoAdditionExpressionAccess().getRule();
	}
	
	//EvoModuloExpression dw_expression::HyModuloExpression:
	//	operand1=EvoExpression "%" operand2=EvoExpression;
	public EvoModuloExpressionElements getEvoModuloExpressionAccess() {
		return pEvoModuloExpression;
	}
	
	public ParserRule getEvoModuloExpressionRule() {
		return getEvoModuloExpressionAccess().getRule();
	}
	
	//EvoMultiplicationExpression dw_expression::HyMultiplicationExpression:
	//	operand1=EvoExpression "*" operand2=EvoExpression;
	public EvoMultiplicationExpressionElements getEvoMultiplicationExpressionAccess() {
		return pEvoMultiplicationExpression;
	}
	
	public ParserRule getEvoMultiplicationExpressionRule() {
		return getEvoMultiplicationExpressionAccess().getRule();
	}
	
	//EvoDivisionExpression dw_expression::HyDivisionExpression:
	//	operand1=EvoExpression "/" operand2=EvoExpression;
	public EvoDivisionExpressionElements getEvoDivisionExpressionAccess() {
		return pEvoDivisionExpression;
	}
	
	public ParserRule getEvoDivisionExpressionRule() {
		return getEvoDivisionExpressionAccess().getRule();
	}
	
	//terminal DATE returns ecore::EDate:
	//	'0'..'9' '/' ('0' | '1') '0'..'9' '/' '0'..'9'*;
	public TerminalRule getDATERule() {
		return tDATE;
	}
	
	//EvoFormula evo_logic::EvoFormula:
	//	'formula'
	//	'{'
	//	'term' ':' term=super::EvoExpression ';'
	//	'}';
	public EvoLogicDslGrammarAccess.EvoFormulaElements getEvoFormulaAccess() {
		return gaEvoLogicDsl.getEvoFormulaAccess();
	}
	
	public ParserRule getEvoFormulaRule() {
		return getEvoFormulaAccess().getRule();
	}
	
	//EvoXOr dw_expression::HyExpression:
	//	EvoOr ({EvoXOr.operand1=current} 'xor' operand2=EvoOr)*;
	public EvoLogicDslGrammarAccess.EvoXOrElements getEvoXOrAccess() {
		return gaEvoLogicDsl.getEvoXOrAccess();
	}
	
	public ParserRule getEvoXOrRule() {
		return getEvoXOrAccess().getRule();
	}
	
	//EvoOr dw_expression::HyExpression:
	//	EvoAnd ({EvoOr.operand1=current} '||' operand2=EvoAnd)*;
	public EvoLogicDslGrammarAccess.EvoOrElements getEvoOrAccess() {
		return gaEvoLogicDsl.getEvoOrAccess();
	}
	
	public ParserRule getEvoOrRule() {
		return getEvoOrAccess().getRule();
	}
	
	//EvoAnd dw_expression::HyExpression:
	//	EvoEqual ({EvoAnd.operand1=current} '&&' operand2=EvoEqual)*;
	public EvoLogicDslGrammarAccess.EvoAndElements getEvoAndAccess() {
		return gaEvoLogicDsl.getEvoAndAccess();
	}
	
	public ParserRule getEvoAndRule() {
		return getEvoAndAccess().getRule();
	}
	
	//EvoEqual dw_expression::HyExpression:
	//	EvoUnequal ({EvoEqual.operand1=current} '==' operand2=EvoUnequalSize)*;
	public EvoLogicDslGrammarAccess.EvoEqualElements getEvoEqualAccess() {
		return gaEvoLogicDsl.getEvoEqualAccess();
	}
	
	public ParserRule getEvoEqualRule() {
		return getEvoEqualAccess().getRule();
	}
	
	//EvoUnequalSize dw_expression::HyExpression:
	//	EvoUnequal | EvoSize;
	public EvoLogicDslGrammarAccess.EvoUnequalSizeElements getEvoUnequalSizeAccess() {
		return gaEvoLogicDsl.getEvoUnequalSizeAccess();
	}
	
	public ParserRule getEvoUnequalSizeRule() {
		return getEvoUnequalSizeAccess().getRule();
	}
	
	//EvoUnequal dw_expression::HyExpression:
	//	super::EvoImplication ({EvoUnequal.operand1=current} '!=' operand2=EvoImplicationSize)*;
	public EvoLogicDslGrammarAccess.EvoUnequalElements getEvoUnequalAccess() {
		return gaEvoLogicDsl.getEvoUnequalAccess();
	}
	
	public ParserRule getEvoUnequalRule() {
		return getEvoUnequalAccess().getRule();
	}
	
	//EvoImplicationSize dw_expression::HyExpression:
	//	super::EvoImplication | EvoSize;
	public EvoLogicDslGrammarAccess.EvoImplicationSizeElements getEvoImplicationSizeAccess() {
		return gaEvoLogicDsl.getEvoImplicationSizeAccess();
	}
	
	public ParserRule getEvoImplicationSizeRule() {
		return getEvoImplicationSizeAccess().getRule();
	}
	
	//EvoBiconditionalSize dw_expression::HyExpression:
	//	EvoBiconditional | EvoSize;
	public EvoLogicDslGrammarAccess.EvoBiconditionalSizeElements getEvoBiconditionalSizeAccess() {
		return gaEvoLogicDsl.getEvoBiconditionalSizeAccess();
	}
	
	public ParserRule getEvoBiconditionalSizeRule() {
		return getEvoBiconditionalSizeAccess().getRule();
	}
	
	//EvoBiconditional dw_expression::HyExpression:
	//	EvoSetInclusion ({EvoBiconditional.operand1=current} '<=>' operand2=EvoSetInclusionSize)*;
	public EvoLogicDslGrammarAccess.EvoBiconditionalElements getEvoBiconditionalAccess() {
		return gaEvoLogicDsl.getEvoBiconditionalAccess();
	}
	
	public ParserRule getEvoBiconditionalRule() {
		return getEvoBiconditionalAccess().getRule();
	}
	
	//EvoSetInclusionSize dw_expression::HyExpression:
	//	EvoSetInclusion | EvoSize;
	public EvoLogicDslGrammarAccess.EvoSetInclusionSizeElements getEvoSetInclusionSizeAccess() {
		return gaEvoLogicDsl.getEvoSetInclusionSizeAccess();
	}
	
	public ParserRule getEvoSetInclusionSizeRule() {
		return getEvoSetInclusionSizeAccess().getRule();
	}
	
	//EvoSetInclusion dw_expression::HyExpression:
	//	EvoSetIntersection ({EvoSetInclusion.operand1=current} 'inclusion' operand2=EvoSetIntersection)*;
	public EvoLogicDslGrammarAccess.EvoSetInclusionElements getEvoSetInclusionAccess() {
		return gaEvoLogicDsl.getEvoSetInclusionAccess();
	}
	
	public ParserRule getEvoSetInclusionRule() {
		return getEvoSetInclusionAccess().getRule();
	}
	
	//EvoSetIntersection dw_expression::HyExpression:
	//	EvoSetUnion ({EvoSetIntersection.operand1=current} 'intersection' operand2=EvoSetUnion)*;
	public EvoLogicDslGrammarAccess.EvoSetIntersectionElements getEvoSetIntersectionAccess() {
		return gaEvoLogicDsl.getEvoSetIntersectionAccess();
	}
	
	public ParserRule getEvoSetIntersectionRule() {
		return getEvoSetIntersectionAccess().getRule();
	}
	
	//EvoSetUnion dw_expression::HyExpression:
	//	EvoSetDifference ({EvoSetUnion.operand1=current} 'union' operand2=EvoSetDifference)*;
	public EvoLogicDslGrammarAccess.EvoSetUnionElements getEvoSetUnionAccess() {
		return gaEvoLogicDsl.getEvoSetUnionAccess();
	}
	
	public ParserRule getEvoSetUnionRule() {
		return getEvoSetUnionAccess().getRule();
	}
	
	//EvoSetDifference dw_expression::HyExpression:
	//	EvoSetSymmetricDifference ({EvoSetDifference.operand1=current} 'difference' operand2=EvoSetSymmetricDifference)*;
	public EvoLogicDslGrammarAccess.EvoSetDifferenceElements getEvoSetDifferenceAccess() {
		return gaEvoLogicDsl.getEvoSetDifferenceAccess();
	}
	
	public ParserRule getEvoSetDifferenceRule() {
		return getEvoSetDifferenceAccess().getRule();
	}
	
	//EvoSetSymmetricDifference dw_expression::HyExpression:
	//	EvoSetCartesianProduct ({EvoSetSymmetricDifference.operand1=current} 'symmetric_difference'
	//	operand2=EvoSetCartesianProduct)*;
	public EvoLogicDslGrammarAccess.EvoSetSymmetricDifferenceElements getEvoSetSymmetricDifferenceAccess() {
		return gaEvoLogicDsl.getEvoSetSymmetricDifferenceAccess();
	}
	
	public ParserRule getEvoSetSymmetricDifferenceRule() {
		return getEvoSetSymmetricDifferenceAccess().getRule();
	}
	
	//EvoSetCartesianProduct dw_expression::HyExpression:
	//	super::EvoElementOf ({EvoSetCartesianProduct.operand1=current} 'x' operand2=super::EvoElementOf)*;
	public EvoLogicDslGrammarAccess.EvoSetCartesianProductElements getEvoSetCartesianProductAccess() {
		return gaEvoLogicDsl.getEvoSetCartesianProductAccess();
	}
	
	public ParserRule getEvoSetCartesianProductRule() {
		return getEvoSetCartesianProductAccess().getRule();
	}
	
	//EvoSetCardinality dw_expression::HyExpression:
	//	{EvoSetCardinality} ('|' operand=super::EvoExpression '|' | 'size' '(' operand=super::EvoExpression ')');
	public EvoLogicDslGrammarAccess.EvoSetCardinalityElements getEvoSetCardinalityAccess() {
		return gaEvoLogicDsl.getEvoSetCardinalityAccess();
	}
	
	public ParserRule getEvoSetCardinalityRule() {
		return getEvoSetCardinalityAccess().getRule();
	}
	
	//EvoFeatureVariable evo_variable::EvoFeatureVariable:
	//	'feature' name=ID;
	public EvoLogicDslGrammarAccess.EvoFeatureVariableElements getEvoFeatureVariableAccess() {
		return gaEvoLogicDsl.getEvoFeatureVariableAccess();
	}
	
	public ParserRule getEvoFeatureVariableRule() {
		return getEvoFeatureVariableAccess().getRule();
	}
	
	//EvoForAll:
	//	'forAll' '('
	//	boundedVariables+=EvoFeatureVariable (',' boundedVariables+=EvoFeatureVariable) ':'
	//	operand=super::EvoExpression
	//	')';
	public EvoLogicDslGrammarAccess.EvoForAllElements getEvoForAllAccess() {
		return gaEvoLogicDsl.getEvoForAllAccess();
	}
	
	public ParserRule getEvoForAllRule() {
		return getEvoForAllAccess().getRule();
	}
	
	//EvoExists:
	//	'exists' '('
	//	boundedVariables+=EvoFeatureVariable ':'
	//	element=super::EvoExpression
	//	')';
	public EvoLogicDslGrammarAccess.EvoExistsElements getEvoExistsAccess() {
		return gaEvoLogicDsl.getEvoExistsAccess();
	}
	
	public ParserRule getEvoExistsRule() {
		return getEvoExistsAccess().getRule();
	}
	
	//EvoNot:
	//	'not' '(' operand=super::EvoExpression ')';
	public EvoLogicDslGrammarAccess.EvoNotElements getEvoNotAccess() {
		return gaEvoLogicDsl.getEvoNotAccess();
	}
	
	public ParserRule getEvoNotRule() {
		return getEvoNotAccess().getRule();
	}
	
	//EvoSatisfiable dw_expression::HyExpression:
	//	{EvoSatisfiable} 'satisfiable' '(' variables+=(EvoSetVariable | EvoApplicationConstraintTerm) (','
	//	variables+=(EvoSetVariable | EvoApplicationConstraintTerm))* ')';
	public EvoLogicDslGrammarAccess.EvoSatisfiableElements getEvoSatisfiableAccess() {
		return gaEvoLogicDsl.getEvoSatisfiableAccess();
	}
	
	public ParserRule getEvoSatisfiableRule() {
		return getEvoSatisfiableAccess().getRule();
	}
	
	//EvoSize dw_expression::HyExpression:
	//	{EvoSize} size=INT;
	public EvoLogicDslGrammarAccess.EvoSizeElements getEvoSizeAccess() {
		return gaEvoLogicDsl.getEvoSizeAccess();
	}
	
	public ParserRule getEvoSizeRule() {
		return getEvoSizeAccess().getRule();
	}
	
	//enum EvoVariableType returns evo_variable::EvoVariableType:
	//	EvoIdentifier='@ident' |
	//	EvoSource='@pre' |
	//	EvoTarget='@post';
	public EvoLogicDslGrammarAccess.EvoVariableTypeElements getEvoVariableTypeAccess() {
		return gaEvoLogicDsl.getEvoVariableTypeAccess();
	}
	
	public EnumRule getEvoVariableTypeRule() {
		return getEvoVariableTypeAccess().getRule();
	}
	
	//EvoVariableTerm evo_logic::EvoVariableTerm:
	//	variable=[evo_variable::EvoVariable|super::QualifiedName] type=EvoVariableType?;
	public EvoLogicDslGrammarAccess.EvoVariableTermElements getEvoVariableTermAccess() {
		return gaEvoLogicDsl.getEvoVariableTermAccess();
	}
	
	public ParserRule getEvoVariableTermRule() {
		return getEvoVariableTermAccess().getRule();
	}
	
	//EvoApplicationConstraintTerm evo_logic::EvoVariableTerm:
	//	'AC' '(' variable=[evo_variable::EvoMappingVariable|super::QualifiedName] ')';
	public EvoLogicDslGrammarAccess.EvoApplicationConstraintTermElements getEvoApplicationConstraintTermAccess() {
		return gaEvoLogicDsl.getEvoApplicationConstraintTermAccess();
	}
	
	public ParserRule getEvoApplicationConstraintTermRule() {
		return getEvoApplicationConstraintTermAccess().getRule();
	}
	
	//EvoFeatureType dw_expression::HyExpression:
	//	{EvoFeatureType} 'featureType' ('(' variables+=EvoVariableTerm (',' variables+=EvoVariableTerm)* ')') '=='
	//	type=HyFeatureTypeEnum;
	public EvoLogicDslGrammarAccess.EvoFeatureTypeElements getEvoFeatureTypeAccess() {
		return gaEvoLogicDsl.getEvoFeatureTypeAccess();
	}
	
	public ParserRule getEvoFeatureTypeRule() {
		return getEvoFeatureTypeAccess().getRule();
	}
	
	//enum HyFeatureTypeEnum returns dw_feature::HyFeatureTypeEnum:
	//	OPTIONAL='optional' | MANDATORY='mandatory';
	public EvoLogicDslGrammarAccess.HyFeatureTypeEnumElements getHyFeatureTypeEnumAccess() {
		return gaEvoLogicDsl.getHyFeatureTypeEnumAccess();
	}
	
	public EnumRule getHyFeatureTypeEnumRule() {
		return getHyFeatureTypeEnumAccess().getRule();
	}
	
	//EvoGroupType dw_expression::HyExpression:
	//	{EvoGroupType} 'groupType' ('(' variables+=EvoGroupTerm (',' variables+=EvoGroupTerm)* ')') '=='
	//	type=HyGroupTypeEnum;
	public EvoLogicDslGrammarAccess.EvoGroupTypeElements getEvoGroupTypeAccess() {
		return gaEvoLogicDsl.getEvoGroupTypeAccess();
	}
	
	public ParserRule getEvoGroupTypeRule() {
		return getEvoGroupTypeAccess().getRule();
	}
	
	//EvoGroupTerm evo_logic::EvoVariableTerm:
	//	variable=[evo_variable::EvoGroupVariable|super::QualifiedName] type=EvoVariableType?;
	public EvoLogicDslGrammarAccess.EvoGroupTermElements getEvoGroupTermAccess() {
		return gaEvoLogicDsl.getEvoGroupTermAccess();
	}
	
	public ParserRule getEvoGroupTermRule() {
		return getEvoGroupTermAccess().getRule();
	}
	
	//enum HyGroupTypeEnum returns dw_feature::HyGroupTypeEnum:
	//	AND='and' | OR='or' | ALTERNATIVE='alternative';
	public EvoLogicDslGrammarAccess.HyGroupTypeEnumElements getHyGroupTypeEnumAccess() {
		return gaEvoLogicDsl.getHyGroupTypeEnumAccess();
	}
	
	public EnumRule getHyGroupTypeEnumRule() {
		return getHyGroupTypeEnumAccess().getRule();
	}
	
	//EvoSetTerm:
	//	'{' variables+=EvoSetVariable (',' variables+=EvoSetVariable)* '}';
	public EvoLogicDslGrammarAccess.EvoSetTermElements getEvoSetTermAccess() {
		return gaEvoLogicDsl.getEvoSetTermAccess();
	}
	
	public ParserRule getEvoSetTermRule() {
		return getEvoSetTermAccess().getRule();
	}
	
	//EvoSetVariable dw_expression::HyExpression:
	//	EvoVariableTerm | EvoSetTerm | EvoNot;
	public EvoLogicDslGrammarAccess.EvoSetVariableElements getEvoSetVariableAccess() {
		return gaEvoLogicDsl.getEvoSetVariableAccess();
	}
	
	public ParserRule getEvoSetVariableRule() {
		return getEvoSetVariableAccess().getRule();
	}
	
	//EvoParentOf:
	//	'parentOf' '(' variable=EvoVariableTerm ')';
	public EvoLogicDslGrammarAccess.EvoParentOfElements getEvoParentOfAccess() {
		return gaEvoLogicDsl.getEvoParentOfAccess();
	}
	
	public ParserRule getEvoParentOfRule() {
		return getEvoParentOfAccess().getRule();
	}
	
	//EvoSiblingsOf:
	//	'sibilingsOf' '(' variable=EvoVariableTerm ')';
	public EvoLogicDslGrammarAccess.EvoSiblingsOfElements getEvoSiblingsOfAccess() {
		return gaEvoLogicDsl.getEvoSiblingsOfAccess();
	}
	
	public ParserRule getEvoSiblingsOfRule() {
		return getEvoSiblingsOfAccess().getRule();
	}
	
	//EvoChildrenOf:
	//	'childrenOf' '(' variable=EvoVariableTerm ')';
	public EvoLogicDslGrammarAccess.EvoChildrenOfElements getEvoChildrenOfAccess() {
		return gaEvoLogicDsl.getEvoChildrenOfAccess();
	}
	
	public ParserRule getEvoChildrenOfRule() {
		return getEvoChildrenOfAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
