/*
 * generated by Xtext 2.12.0
 */
package de.evorepair.feature.expression.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.evorepair.logic.services.EvoLogicDslGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EvoExpressionDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class GrammarEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.GrammarEntry");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionEvoMappingExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//@ Override GrammarEntry:
		//	expression=EvoMappingExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=EvoMappingExpression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//EvoMappingExpression
		public RuleCall getExpressionEvoMappingExpressionParserRuleCall_0() { return cExpressionEvoMappingExpressionParserRuleCall_0; }
	}
	public class EvoMappingExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingExpression");
		private final RuleCall cEvoMappingOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EvoMappingExpression dw_expression::HyExpression:
		//	EvoMappingOr;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoMappingOr
		public RuleCall getEvoMappingOrParserRuleCall() { return cEvoMappingOrParserRuleCall; }
	}
	public class EvoMappingOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEvoMappingAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cHyOrExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2EvoMappingAndParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//EvoMappingOr dw_expression::HyExpression:
		//	EvoMappingAnd ({dw_expression::HyOrExpression.operand1=current} '||' operand2=EvoMappingAnd)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoMappingAnd ({dw_expression::HyOrExpression.operand1=current} '||' operand2=EvoMappingAnd)*
		public Group getGroup() { return cGroup; }
		
		//EvoMappingAnd
		public RuleCall getEvoMappingAndParserRuleCall_0() { return cEvoMappingAndParserRuleCall_0; }
		
		//({dw_expression::HyOrExpression.operand1=current} '||' operand2=EvoMappingAnd)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{dw_expression::HyOrExpression.operand1=current}
		public Action getHyOrExpressionOperand1Action_1_0() { return cHyOrExpressionOperand1Action_1_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//operand2=EvoMappingAnd
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//EvoMappingAnd
		public RuleCall getOperand2EvoMappingAndParserRuleCall_1_2_0() { return cOperand2EvoMappingAndParserRuleCall_1_2_0; }
	}
	public class EvoMappingAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEvoMappingEqualParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cHyAndExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2EvoMappingEqualParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//EvoMappingAnd dw_expression::HyExpression:
		//	EvoMappingEqual ({dw_expression::HyAndExpression.operand1=current} '&&' operand2=EvoMappingEqual)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoMappingEqual ({dw_expression::HyAndExpression.operand1=current} '&&' operand2=EvoMappingEqual)*
		public Group getGroup() { return cGroup; }
		
		//EvoMappingEqual
		public RuleCall getEvoMappingEqualParserRuleCall_0() { return cEvoMappingEqualParserRuleCall_0; }
		
		//({dw_expression::HyAndExpression.operand1=current} '&&' operand2=EvoMappingEqual)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{dw_expression::HyAndExpression.operand1=current}
		public Action getHyAndExpressionOperand1Action_1_0() { return cHyAndExpressionOperand1Action_1_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//operand2=EvoMappingEqual
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//EvoMappingEqual
		public RuleCall getOperand2EvoMappingEqualParserRuleCall_1_2_0() { return cOperand2EvoMappingEqualParserRuleCall_1_2_0; }
	}
	public class EvoMappingEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingEqual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEvoMappingUnequalParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cHyEqualExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2EvoMappingUnequalParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//EvoMappingEqual dw_expression::HyExpression:
		//	EvoMappingUnequal ({dw_expression::HyEqualExpression.operand1=current} '==' operand2=EvoMappingUnequal)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoMappingUnequal ({dw_expression::HyEqualExpression.operand1=current} '==' operand2=EvoMappingUnequal)*
		public Group getGroup() { return cGroup; }
		
		//EvoMappingUnequal
		public RuleCall getEvoMappingUnequalParserRuleCall_0() { return cEvoMappingUnequalParserRuleCall_0; }
		
		//({dw_expression::HyEqualExpression.operand1=current} '==' operand2=EvoMappingUnequal)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{dw_expression::HyEqualExpression.operand1=current}
		public Action getHyEqualExpressionOperand1Action_1_0() { return cHyEqualExpressionOperand1Action_1_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_1() { return cEqualsSignEqualsSignKeyword_1_1; }
		
		//operand2=EvoMappingUnequal
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//EvoMappingUnequal
		public RuleCall getOperand2EvoMappingUnequalParserRuleCall_1_2_0() { return cOperand2EvoMappingUnequalParserRuleCall_1_2_0; }
	}
	public class EvoMappingUnequalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingUnequal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEvoMappingImplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cHyNotEqualExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2EvoMappingImplicationParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//EvoMappingUnequal dw_expression::HyExpression:
		//	EvoMappingImplication ({dw_expression::HyNotEqualExpression.operand1=current} '!=' operand2=EvoMappingImplication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoMappingImplication ({dw_expression::HyNotEqualExpression.operand1=current} '!=' operand2=EvoMappingImplication)*
		public Group getGroup() { return cGroup; }
		
		//EvoMappingImplication
		public RuleCall getEvoMappingImplicationParserRuleCall_0() { return cEvoMappingImplicationParserRuleCall_0; }
		
		//({dw_expression::HyNotEqualExpression.operand1=current} '!=' operand2=EvoMappingImplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{dw_expression::HyNotEqualExpression.operand1=current}
		public Action getHyNotEqualExpressionOperand1Action_1_0() { return cHyNotEqualExpressionOperand1Action_1_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_1() { return cExclamationMarkEqualsSignKeyword_1_1; }
		
		//operand2=EvoMappingImplication
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//EvoMappingImplication
		public RuleCall getOperand2EvoMappingImplicationParserRuleCall_1_2_0() { return cOperand2EvoMappingImplicationParserRuleCall_1_2_0; }
	}
	public class EvoMappingImplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingImplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEvoMappingEquivalenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cHyImpliesExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2EvoMappingEquivalenceParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//EvoMappingImplication dw_expression::HyExpression:
		//	EvoMappingEquivalence ({dw_expression::HyImpliesExpression.operand1=current} '->' operand2=EvoMappingEquivalence)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoMappingEquivalence ({dw_expression::HyImpliesExpression.operand1=current} '->' operand2=EvoMappingEquivalence)*
		public Group getGroup() { return cGroup; }
		
		//EvoMappingEquivalence
		public RuleCall getEvoMappingEquivalenceParserRuleCall_0() { return cEvoMappingEquivalenceParserRuleCall_0; }
		
		//({dw_expression::HyImpliesExpression.operand1=current} '->' operand2=EvoMappingEquivalence)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{dw_expression::HyImpliesExpression.operand1=current}
		public Action getHyImpliesExpressionOperand1Action_1_0() { return cHyImpliesExpressionOperand1Action_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_1() { return cHyphenMinusGreaterThanSignKeyword_1_1; }
		
		//operand2=EvoMappingEquivalence
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//EvoMappingEquivalence
		public RuleCall getOperand2EvoMappingEquivalenceParserRuleCall_1_2_0() { return cOperand2EvoMappingEquivalenceParserRuleCall_1_2_0; }
	}
	public class EvoMappingEquivalenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingEquivalence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEvoMappingLessExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cHyEquivalenceExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2EvoMappingLessExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//EvoMappingEquivalence dw_expression::HyExpression:
		//	EvoMappingLessExpression ({dw_expression::HyEquivalenceExpression.operand1=current} '<->'
		//	operand2=EvoMappingLessExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoMappingLessExpression ({dw_expression::HyEquivalenceExpression.operand1=current} '<->'
		//operand2=EvoMappingLessExpression)*
		public Group getGroup() { return cGroup; }
		
		//EvoMappingLessExpression
		public RuleCall getEvoMappingLessExpressionParserRuleCall_0() { return cEvoMappingLessExpressionParserRuleCall_0; }
		
		//({dw_expression::HyEquivalenceExpression.operand1=current} '<->' operand2=EvoMappingLessExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{dw_expression::HyEquivalenceExpression.operand1=current}
		public Action getHyEquivalenceExpressionOperand1Action_1_0() { return cHyEquivalenceExpressionOperand1Action_1_0; }
		
		//'<->'
		public Keyword getLessThanSignHyphenMinusGreaterThanSignKeyword_1_1() { return cLessThanSignHyphenMinusGreaterThanSignKeyword_1_1; }
		
		//operand2=EvoMappingLessExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//EvoMappingLessExpression
		public RuleCall getOperand2EvoMappingLessExpressionParserRuleCall_1_2_0() { return cOperand2EvoMappingLessExpressionParserRuleCall_1_2_0; }
	}
	public class EvoMappingLessExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingLessExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEvoMappingIfPossibleExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cHyLessExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2EvoMappingIfPossibleExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//EvoMappingLessExpression dw_expression::HyExpression:
		//	EvoMappingIfPossibleExpression ({dw_expression::HyLessExpression.operand1=current} '<'
		//	operand2=EvoMappingIfPossibleExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoMappingIfPossibleExpression ({dw_expression::HyLessExpression.operand1=current} '<'
		//operand2=EvoMappingIfPossibleExpression)*
		public Group getGroup() { return cGroup; }
		
		//EvoMappingIfPossibleExpression
		public RuleCall getEvoMappingIfPossibleExpressionParserRuleCall_0() { return cEvoMappingIfPossibleExpressionParserRuleCall_0; }
		
		//({dw_expression::HyLessExpression.operand1=current} '<' operand2=EvoMappingIfPossibleExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{dw_expression::HyLessExpression.operand1=current}
		public Action getHyLessExpressionOperand1Action_1_0() { return cHyLessExpressionOperand1Action_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_1() { return cLessThanSignKeyword_1_1; }
		
		//operand2=EvoMappingIfPossibleExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//EvoMappingIfPossibleExpression
		public RuleCall getOperand2EvoMappingIfPossibleExpressionParserRuleCall_1_2_0() { return cOperand2EvoMappingIfPossibleExpressionParserRuleCall_1_2_0; }
	}
	public class EvoMappingIfPossibleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingIfPossibleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEvoMappingLessOrEqualExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIfPossibleKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cHyIfPossibleExpressionOperandsAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cOperandsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cOperandsEvoMappingLessOrEqualExpressionParserRuleCall_1_2_1_0 = (RuleCall)cOperandsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//EvoMappingIfPossibleExpression dw_expression::HyExpression:
		//	EvoMappingLessOrEqualExpression ("ifPossible(" {dw_expression::HyIfPossibleExpression.operands+=current} (','
		//	operands+=EvoMappingLessOrEqualExpression)* ")")*;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoMappingLessOrEqualExpression ("ifPossible(" {dw_expression::HyIfPossibleExpression.operands+=current} (','
		//operands+=EvoMappingLessOrEqualExpression)* ")")*
		public Group getGroup() { return cGroup; }
		
		//EvoMappingLessOrEqualExpression
		public RuleCall getEvoMappingLessOrEqualExpressionParserRuleCall_0() { return cEvoMappingLessOrEqualExpressionParserRuleCall_0; }
		
		//("ifPossible(" {dw_expression::HyIfPossibleExpression.operands+=current} (','
		//operands+=EvoMappingLessOrEqualExpression)* ")")*
		public Group getGroup_1() { return cGroup_1; }
		
		//"ifPossible("
		public Keyword getIfPossibleKeyword_1_0() { return cIfPossibleKeyword_1_0; }
		
		//{dw_expression::HyIfPossibleExpression.operands+=current}
		public Action getHyIfPossibleExpressionOperandsAction_1_1() { return cHyIfPossibleExpressionOperandsAction_1_1; }
		
		//(',' operands+=EvoMappingLessOrEqualExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//operands+=EvoMappingLessOrEqualExpression
		public Assignment getOperandsAssignment_1_2_1() { return cOperandsAssignment_1_2_1; }
		
		//EvoMappingLessOrEqualExpression
		public RuleCall getOperandsEvoMappingLessOrEqualExpressionParserRuleCall_1_2_1_0() { return cOperandsEvoMappingLessOrEqualExpressionParserRuleCall_1_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class EvoMappingLessOrEqualExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingLessOrEqualExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEvoMappingGreaterExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cHyLessOrEqualExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2EvoMappingGreaterExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//EvoMappingLessOrEqualExpression dw_expression::HyExpression:
		//	EvoMappingGreaterExpression ({dw_expression::HyLessOrEqualExpression.operand1=current} '<='
		//	operand2=EvoMappingGreaterExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoMappingGreaterExpression ({dw_expression::HyLessOrEqualExpression.operand1=current} '<='
		//operand2=EvoMappingGreaterExpression)*
		public Group getGroup() { return cGroup; }
		
		//EvoMappingGreaterExpression
		public RuleCall getEvoMappingGreaterExpressionParserRuleCall_0() { return cEvoMappingGreaterExpressionParserRuleCall_0; }
		
		//({dw_expression::HyLessOrEqualExpression.operand1=current} '<=' operand2=EvoMappingGreaterExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{dw_expression::HyLessOrEqualExpression.operand1=current}
		public Action getHyLessOrEqualExpressionOperand1Action_1_0() { return cHyLessOrEqualExpressionOperand1Action_1_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_1() { return cLessThanSignEqualsSignKeyword_1_1; }
		
		//operand2=EvoMappingGreaterExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//EvoMappingGreaterExpression
		public RuleCall getOperand2EvoMappingGreaterExpressionParserRuleCall_1_2_0() { return cOperand2EvoMappingGreaterExpressionParserRuleCall_1_2_0; }
	}
	public class EvoMappingGreaterExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingGreaterExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEvoMappingGreaterOrEqualExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cHyGreaterExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2EvoMappingGreaterOrEqualExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//EvoMappingGreaterExpression dw_expression::HyExpression:
		//	EvoMappingGreaterOrEqualExpression ({dw_expression::HyGreaterExpression.operand1=current} '>'
		//	operand2=EvoMappingGreaterOrEqualExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoMappingGreaterOrEqualExpression ({dw_expression::HyGreaterExpression.operand1=current} '>'
		//operand2=EvoMappingGreaterOrEqualExpression)*
		public Group getGroup() { return cGroup; }
		
		//EvoMappingGreaterOrEqualExpression
		public RuleCall getEvoMappingGreaterOrEqualExpressionParserRuleCall_0() { return cEvoMappingGreaterOrEqualExpressionParserRuleCall_0; }
		
		//({dw_expression::HyGreaterExpression.operand1=current} '>' operand2=EvoMappingGreaterOrEqualExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{dw_expression::HyGreaterExpression.operand1=current}
		public Action getHyGreaterExpressionOperand1Action_1_0() { return cHyGreaterExpressionOperand1Action_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_1() { return cGreaterThanSignKeyword_1_1; }
		
		//operand2=EvoMappingGreaterOrEqualExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//EvoMappingGreaterOrEqualExpression
		public RuleCall getOperand2EvoMappingGreaterOrEqualExpressionParserRuleCall_1_2_0() { return cOperand2EvoMappingGreaterOrEqualExpressionParserRuleCall_1_2_0; }
	}
	public class EvoMappingGreaterOrEqualExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingGreaterOrEqualExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEvoMappingSubtractionExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cHyGreaterOrEqualExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2EvoMappingSubtractionExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//EvoMappingGreaterOrEqualExpression dw_expression::HyExpression:
		//	EvoMappingSubtractionExpression ({dw_expression::HyGreaterOrEqualExpression.operand1=current} '>='
		//	operand2=EvoMappingSubtractionExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoMappingSubtractionExpression ({dw_expression::HyGreaterOrEqualExpression.operand1=current} '>='
		//operand2=EvoMappingSubtractionExpression)*
		public Group getGroup() { return cGroup; }
		
		//EvoMappingSubtractionExpression
		public RuleCall getEvoMappingSubtractionExpressionParserRuleCall_0() { return cEvoMappingSubtractionExpressionParserRuleCall_0; }
		
		//({dw_expression::HyGreaterOrEqualExpression.operand1=current} '>=' operand2=EvoMappingSubtractionExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{dw_expression::HyGreaterOrEqualExpression.operand1=current}
		public Action getHyGreaterOrEqualExpressionOperand1Action_1_0() { return cHyGreaterOrEqualExpressionOperand1Action_1_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_1() { return cGreaterThanSignEqualsSignKeyword_1_1; }
		
		//operand2=EvoMappingSubtractionExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//EvoMappingSubtractionExpression
		public RuleCall getOperand2EvoMappingSubtractionExpressionParserRuleCall_1_2_0() { return cOperand2EvoMappingSubtractionExpressionParserRuleCall_1_2_0; }
	}
	public class EvoMappingSubtractionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingSubtractionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEvoMappingAdditionExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cHySubtractionExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2EvoMappingAdditionExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//EvoMappingSubtractionExpression dw_expression::HyExpression:
		//	EvoMappingAdditionExpression ({dw_expression::HySubtractionExpression.operand1=current} '-'
		//	operand2=EvoMappingAdditionExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoMappingAdditionExpression ({dw_expression::HySubtractionExpression.operand1=current} '-'
		//operand2=EvoMappingAdditionExpression)*
		public Group getGroup() { return cGroup; }
		
		//EvoMappingAdditionExpression
		public RuleCall getEvoMappingAdditionExpressionParserRuleCall_0() { return cEvoMappingAdditionExpressionParserRuleCall_0; }
		
		//({dw_expression::HySubtractionExpression.operand1=current} '-' operand2=EvoMappingAdditionExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{dw_expression::HySubtractionExpression.operand1=current}
		public Action getHySubtractionExpressionOperand1Action_1_0() { return cHySubtractionExpressionOperand1Action_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//operand2=EvoMappingAdditionExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//EvoMappingAdditionExpression
		public RuleCall getOperand2EvoMappingAdditionExpressionParserRuleCall_1_2_0() { return cOperand2EvoMappingAdditionExpressionParserRuleCall_1_2_0; }
	}
	public class EvoMappingAdditionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingAdditionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEvoMappingModuloExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cHyAdditionExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2EvoMappingModuloExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//EvoMappingAdditionExpression dw_expression::HyExpression:
		//	EvoMappingModuloExpression ({dw_expression::HyAdditionExpression.operand1=current} '+'
		//	operand2=EvoMappingModuloExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoMappingModuloExpression ({dw_expression::HyAdditionExpression.operand1=current} '+'
		//operand2=EvoMappingModuloExpression)*
		public Group getGroup() { return cGroup; }
		
		//EvoMappingModuloExpression
		public RuleCall getEvoMappingModuloExpressionParserRuleCall_0() { return cEvoMappingModuloExpressionParserRuleCall_0; }
		
		//({dw_expression::HyAdditionExpression.operand1=current} '+' operand2=EvoMappingModuloExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{dw_expression::HyAdditionExpression.operand1=current}
		public Action getHyAdditionExpressionOperand1Action_1_0() { return cHyAdditionExpressionOperand1Action_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }
		
		//operand2=EvoMappingModuloExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//EvoMappingModuloExpression
		public RuleCall getOperand2EvoMappingModuloExpressionParserRuleCall_1_2_0() { return cOperand2EvoMappingModuloExpressionParserRuleCall_1_2_0; }
	}
	public class EvoMappingModuloExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingModuloExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEvoMappingMultiplicationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cHyModuloExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPercentSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2EvoMappingMultiplicationExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//EvoMappingModuloExpression dw_expression::HyExpression:
		//	EvoMappingMultiplicationExpression ({dw_expression::HyModuloExpression.operand1=current} '%'
		//	operand2=EvoMappingMultiplicationExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoMappingMultiplicationExpression ({dw_expression::HyModuloExpression.operand1=current} '%'
		//operand2=EvoMappingMultiplicationExpression)*
		public Group getGroup() { return cGroup; }
		
		//EvoMappingMultiplicationExpression
		public RuleCall getEvoMappingMultiplicationExpressionParserRuleCall_0() { return cEvoMappingMultiplicationExpressionParserRuleCall_0; }
		
		//({dw_expression::HyModuloExpression.operand1=current} '%' operand2=EvoMappingMultiplicationExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{dw_expression::HyModuloExpression.operand1=current}
		public Action getHyModuloExpressionOperand1Action_1_0() { return cHyModuloExpressionOperand1Action_1_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_1_1() { return cPercentSignKeyword_1_1; }
		
		//operand2=EvoMappingMultiplicationExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//EvoMappingMultiplicationExpression
		public RuleCall getOperand2EvoMappingMultiplicationExpressionParserRuleCall_1_2_0() { return cOperand2EvoMappingMultiplicationExpressionParserRuleCall_1_2_0; }
	}
	public class EvoMappingMultiplicationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingMultiplicationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEvoMappingDivisionExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cHyMultiplicationExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2EvoMappingDivisionExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//EvoMappingMultiplicationExpression dw_expression::HyExpression:
		//	EvoMappingDivisionExpression ({dw_expression::HyMultiplicationExpression.operand1=current} '*'
		//	operand2=EvoMappingDivisionExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoMappingDivisionExpression ({dw_expression::HyMultiplicationExpression.operand1=current} '*'
		//operand2=EvoMappingDivisionExpression)*
		public Group getGroup() { return cGroup; }
		
		//EvoMappingDivisionExpression
		public RuleCall getEvoMappingDivisionExpressionParserRuleCall_0() { return cEvoMappingDivisionExpressionParserRuleCall_0; }
		
		//({dw_expression::HyMultiplicationExpression.operand1=current} '*' operand2=EvoMappingDivisionExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{dw_expression::HyMultiplicationExpression.operand1=current}
		public Action getHyMultiplicationExpressionOperand1Action_1_0() { return cHyMultiplicationExpressionOperand1Action_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
		
		//operand2=EvoMappingDivisionExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//EvoMappingDivisionExpression
		public RuleCall getOperand2EvoMappingDivisionExpressionParserRuleCall_1_2_0() { return cOperand2EvoMappingDivisionExpressionParserRuleCall_1_2_0; }
	}
	public class EvoMappingDivisionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingDivisionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEvoMappingTerminalParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cHyDivisionExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2EvoMappingTerminalParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//EvoMappingDivisionExpression dw_expression::HyExpression:
		//	EvoMappingTerminal ({dw_expression::HyDivisionExpression.operand1=current} '/' operand2=EvoMappingTerminal)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoMappingTerminal ({dw_expression::HyDivisionExpression.operand1=current} '/' operand2=EvoMappingTerminal)*
		public Group getGroup() { return cGroup; }
		
		//EvoMappingTerminal
		public RuleCall getEvoMappingTerminalParserRuleCall_0() { return cEvoMappingTerminalParserRuleCall_0; }
		
		//({dw_expression::HyDivisionExpression.operand1=current} '/' operand2=EvoMappingTerminal)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{dw_expression::HyDivisionExpression.operand1=current}
		public Action getHyDivisionExpressionOperand1Action_1_0() { return cHyDivisionExpressionOperand1Action_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }
		
		//operand2=EvoMappingTerminal
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//EvoMappingTerminal
		public RuleCall getOperand2EvoMappingTerminalParserRuleCall_1_2_0() { return cOperand2EvoMappingTerminalParserRuleCall_1_2_0; }
	}
	public class EvoMappingNegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingNegation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandEvoMappingTerminalParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//EvoMappingNegation dw_expression::HyNegationExpression:
		//	'-' operand=EvoMappingTerminal;
		@Override public ParserRule getRule() { return rule; }
		
		//'-' operand=EvoMappingTerminal
		public Group getGroup() { return cGroup; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//operand=EvoMappingTerminal
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }
		
		//EvoMappingTerminal
		public RuleCall getOperandEvoMappingTerminalParserRuleCall_1_0() { return cOperandEvoMappingTerminalParserRuleCall_1_0; }
	}
	public class EvoMappingTerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingTerminal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEvoMappingFeatureReferenceExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEvoMappingNestedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEvoMappingNegationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEvoMappingConditionalFeatureReferenceExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEvoMappingContextInformationReferenceExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEvoMappingAttributeReferenceExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cEvoMappingValueExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cEvoMappingBooleanValueExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cEvoMappingMimumumExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cEvoMappingMaximumExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cEvoMappingNotParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//EvoMappingTerminal dw_expression::HyExpression:
		//	EvoMappingFeatureReferenceExpression | EvoMappingNestedExpression | EvoMappingNegation |
		//	EvoMappingConditionalFeatureReferenceExpression | EvoMappingContextInformationReferenceExpression |
		//	EvoMappingAttributeReferenceExpression | EvoMappingValueExpression | EvoMappingBooleanValueExpression |
		//	EvoMappingMimumumExpression | EvoMappingMaximumExpression | EvoMappingNot;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoMappingFeatureReferenceExpression | EvoMappingNestedExpression | EvoMappingNegation |
		//EvoMappingConditionalFeatureReferenceExpression | EvoMappingContextInformationReferenceExpression |
		//EvoMappingAttributeReferenceExpression | EvoMappingValueExpression | EvoMappingBooleanValueExpression |
		//EvoMappingMimumumExpression | EvoMappingMaximumExpression | EvoMappingNot
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EvoMappingFeatureReferenceExpression
		public RuleCall getEvoMappingFeatureReferenceExpressionParserRuleCall_0() { return cEvoMappingFeatureReferenceExpressionParserRuleCall_0; }
		
		//EvoMappingNestedExpression
		public RuleCall getEvoMappingNestedExpressionParserRuleCall_1() { return cEvoMappingNestedExpressionParserRuleCall_1; }
		
		//EvoMappingNegation
		public RuleCall getEvoMappingNegationParserRuleCall_2() { return cEvoMappingNegationParserRuleCall_2; }
		
		//EvoMappingConditionalFeatureReferenceExpression
		public RuleCall getEvoMappingConditionalFeatureReferenceExpressionParserRuleCall_3() { return cEvoMappingConditionalFeatureReferenceExpressionParserRuleCall_3; }
		
		//EvoMappingContextInformationReferenceExpression
		public RuleCall getEvoMappingContextInformationReferenceExpressionParserRuleCall_4() { return cEvoMappingContextInformationReferenceExpressionParserRuleCall_4; }
		
		//EvoMappingAttributeReferenceExpression
		public RuleCall getEvoMappingAttributeReferenceExpressionParserRuleCall_5() { return cEvoMappingAttributeReferenceExpressionParserRuleCall_5; }
		
		//EvoMappingValueExpression
		public RuleCall getEvoMappingValueExpressionParserRuleCall_6() { return cEvoMappingValueExpressionParserRuleCall_6; }
		
		//EvoMappingBooleanValueExpression
		public RuleCall getEvoMappingBooleanValueExpressionParserRuleCall_7() { return cEvoMappingBooleanValueExpressionParserRuleCall_7; }
		
		//EvoMappingMimumumExpression
		public RuleCall getEvoMappingMimumumExpressionParserRuleCall_8() { return cEvoMappingMimumumExpressionParserRuleCall_8; }
		
		//EvoMappingMaximumExpression
		public RuleCall getEvoMappingMaximumExpressionParserRuleCall_9() { return cEvoMappingMaximumExpressionParserRuleCall_9; }
		
		//EvoMappingNot
		public RuleCall getEvoMappingNotParserRuleCall_10() { return cEvoMappingNotParserRuleCall_10; }
	}
	public class EvoMappingNestedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingNestedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandEvoMappingExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//EvoMappingNestedExpression dw_expression::HyNestedExpression:
		//	'(' operand=EvoMappingExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' operand=EvoMappingExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//operand=EvoMappingExpression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }
		
		//EvoMappingExpression
		public RuleCall getOperandEvoMappingExpressionParserRuleCall_1_0() { return cOperandEvoMappingExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class EvoMappingNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingNot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandEvoMappingTerminalParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//EvoMappingNot dw_expression::HyNotExpression:
		//	'!' operand=EvoMappingTerminal;
		@Override public ParserRule getRule() { return rule; }
		
		//'!' operand=EvoMappingTerminal
		public Group getGroup() { return cGroup; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//operand=EvoMappingTerminal
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }
		
		//EvoMappingTerminal
		public RuleCall getOperandEvoMappingTerminalParserRuleCall_1_0() { return cOperandEvoMappingTerminalParserRuleCall_1_0; }
	}
	public class EvoMappingFeatureReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingFeatureReferenceExpression");
		private final Assignment cFeatureAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cFeatureHyFeatureCrossReference_0 = (CrossReference)cFeatureAssignment.eContents().get(0);
		private final RuleCall cFeatureHyFeatureSTRINGTerminalRuleCall_0_1 = (RuleCall)cFeatureHyFeatureCrossReference_0.eContents().get(1);
		
		//EvoMappingFeatureReferenceExpression dw_expression::HyFeatureReferenceExpression:
		//	feature=[dw_feature::HyFeature|STRING];
		@Override public ParserRule getRule() { return rule; }
		
		//feature=[dw_feature::HyFeature|STRING]
		public Assignment getFeatureAssignment() { return cFeatureAssignment; }
		
		//[dw_feature::HyFeature|STRING]
		public CrossReference getFeatureHyFeatureCrossReference_0() { return cFeatureHyFeatureCrossReference_0; }
		
		//STRING
		public RuleCall getFeatureHyFeatureSTRINGTerminalRuleCall_0_1() { return cFeatureHyFeatureSTRINGTerminalRuleCall_0_1; }
	}
	public class EvoMappingConditionalFeatureReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingConditionalFeatureReferenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureHyFeatureCrossReference_1_0 = (CrossReference)cFeatureAssignment_1.eContents().get(0);
		private final RuleCall cFeatureHyFeatureQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cFeatureHyFeatureCrossReference_1_0.eContents().get(1);
		private final Assignment cVersionRestrictionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVersionRestrictionEvoMappingVersionRestrictionParserRuleCall_2_0 = (RuleCall)cVersionRestrictionAssignment_2.eContents().get(0);
		
		//// (versionRestriction=EvoMappingVersionRestriction)?;
		//EvoMappingConditionalFeatureReferenceExpression dw_expression::HyConditionalFeatureReferenceExpression:
		//	"?" feature=[dw_feature::HyFeature|QualifiedName] versionRestriction=EvoMappingVersionRestriction?;
		@Override public ParserRule getRule() { return rule; }
		
		//"?" feature=[dw_feature::HyFeature|QualifiedName] versionRestriction=EvoMappingVersionRestriction?
		public Group getGroup() { return cGroup; }
		
		//"?"
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }
		
		//feature=[dw_feature::HyFeature|QualifiedName]
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }
		
		//[dw_feature::HyFeature|QualifiedName]
		public CrossReference getFeatureHyFeatureCrossReference_1_0() { return cFeatureHyFeatureCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getFeatureHyFeatureQualifiedNameParserRuleCall_1_0_1() { return cFeatureHyFeatureQualifiedNameParserRuleCall_1_0_1; }
		
		//versionRestriction=EvoMappingVersionRestriction?
		public Assignment getVersionRestrictionAssignment_2() { return cVersionRestrictionAssignment_2; }
		
		//EvoMappingVersionRestriction
		public RuleCall getVersionRestrictionEvoMappingVersionRestrictionParserRuleCall_2_0() { return cVersionRestrictionEvoMappingVersionRestrictionParserRuleCall_2_0; }
	}
	public class EvoMappingVersionRestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingVersionRestriction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEvoMappingRelativeVersionRestrictionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEvoMappingVersionRangeRestrictionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EvoMappingVersionRestriction dw_expression::HyVersionRestriction:
		//	EvoMappingRelativeVersionRestriction | EvoMappingVersionRangeRestriction;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoMappingRelativeVersionRestriction | EvoMappingVersionRangeRestriction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EvoMappingRelativeVersionRestriction
		public RuleCall getEvoMappingRelativeVersionRestrictionParserRuleCall_0() { return cEvoMappingRelativeVersionRestrictionParserRuleCall_0; }
		
		//EvoMappingVersionRangeRestriction
		public RuleCall getEvoMappingVersionRangeRestrictionParserRuleCall_1() { return cEvoMappingVersionRangeRestrictionParserRuleCall_1; }
	}
	public class EvoMappingRelativeVersionRestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingRelativeVersionRestriction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorEvoMappingRelativeVersionRestrictionOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cVersionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVersionHyVersionCrossReference_2_0 = (CrossReference)cVersionAssignment_2.eContents().get(0);
		private final RuleCall cVersionHyVersionIDTerminalRuleCall_2_0_1 = (RuleCall)cVersionHyVersionCrossReference_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EvoMappingRelativeVersionRestriction dw_expression::HyRelativeVersionRestriction:
		//	"[" operator=EvoMappingRelativeVersionRestrictionOperator version=[dw_feature::HyVersion] "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" operator=EvoMappingRelativeVersionRestrictionOperator version=[dw_feature::HyVersion] "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//operator=EvoMappingRelativeVersionRestrictionOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//EvoMappingRelativeVersionRestrictionOperator
		public RuleCall getOperatorEvoMappingRelativeVersionRestrictionOperatorEnumRuleCall_1_0() { return cOperatorEvoMappingRelativeVersionRestrictionOperatorEnumRuleCall_1_0; }
		
		//version=[dw_feature::HyVersion]
		public Assignment getVersionAssignment_2() { return cVersionAssignment_2; }
		
		//[dw_feature::HyVersion]
		public CrossReference getVersionHyVersionCrossReference_2_0() { return cVersionHyVersionCrossReference_2_0; }
		
		//ID
		public RuleCall getVersionHyVersionIDTerminalRuleCall_2_0_1() { return cVersionHyVersionIDTerminalRuleCall_2_0_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class EvoMappingVersionRangeRestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingVersionRangeRestriction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cLowerIncludedAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cLowerIncludedTrueKeyword_0_1_0 = (Keyword)cLowerIncludedAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFalseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLowerVersionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cLowerVersionHyVersionCrossReference_1_1_0 = (CrossReference)cLowerVersionAssignment_1_1.eContents().get(0);
		private final RuleCall cLowerVersionHyVersionQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cLowerVersionHyVersionCrossReference_1_1_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cUpperIncludedAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Keyword cUpperIncludedTrueKeyword_1_3_0 = (Keyword)cUpperIncludedAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cFalseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUpperVersionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cUpperVersionHyVersionCrossReference_2_1_0 = (CrossReference)cUpperVersionAssignment_2_1.eContents().get(0);
		private final RuleCall cUpperVersionHyVersionQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cUpperVersionHyVersionCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//EvoMappingVersionRangeRestriction dw_expression::HyVersionRangeRestriction:
		//	"[" lowerIncluded?='true' | 'false' lowerVersion=[dw_feature::HyVersion|QualifiedName] "-" upperIncluded?='true' |
		//	'false' upperVersion=[dw_feature::HyVersion|QualifiedName] "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" lowerIncluded?='true' | 'false' lowerVersion=[dw_feature::HyVersion|QualifiedName] "-" upperIncluded?='true' |
		//'false' upperVersion=[dw_feature::HyVersion|QualifiedName] "]"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"[" lowerIncluded?='true'
		public Group getGroup_0() { return cGroup_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//lowerIncluded?='true'
		public Assignment getLowerIncludedAssignment_0_1() { return cLowerIncludedAssignment_0_1; }
		
		//'true'
		public Keyword getLowerIncludedTrueKeyword_0_1_0() { return cLowerIncludedTrueKeyword_0_1_0; }
		
		//'false' lowerVersion=[dw_feature::HyVersion|QualifiedName] "-" upperIncluded?='true'
		public Group getGroup_1() { return cGroup_1; }
		
		//'false'
		public Keyword getFalseKeyword_1_0() { return cFalseKeyword_1_0; }
		
		//lowerVersion=[dw_feature::HyVersion|QualifiedName]
		public Assignment getLowerVersionAssignment_1_1() { return cLowerVersionAssignment_1_1; }
		
		//[dw_feature::HyVersion|QualifiedName]
		public CrossReference getLowerVersionHyVersionCrossReference_1_1_0() { return cLowerVersionHyVersionCrossReference_1_1_0; }
		
		//QualifiedName
		public RuleCall getLowerVersionHyVersionQualifiedNameParserRuleCall_1_1_0_1() { return cLowerVersionHyVersionQualifiedNameParserRuleCall_1_1_0_1; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1_2() { return cHyphenMinusKeyword_1_2; }
		
		//upperIncluded?='true'
		public Assignment getUpperIncludedAssignment_1_3() { return cUpperIncludedAssignment_1_3; }
		
		//'true'
		public Keyword getUpperIncludedTrueKeyword_1_3_0() { return cUpperIncludedTrueKeyword_1_3_0; }
		
		//'false' upperVersion=[dw_feature::HyVersion|QualifiedName] "]"
		public Group getGroup_2() { return cGroup_2; }
		
		//'false'
		public Keyword getFalseKeyword_2_0() { return cFalseKeyword_2_0; }
		
		//upperVersion=[dw_feature::HyVersion|QualifiedName]
		public Assignment getUpperVersionAssignment_2_1() { return cUpperVersionAssignment_2_1; }
		
		//[dw_feature::HyVersion|QualifiedName]
		public CrossReference getUpperVersionHyVersionCrossReference_2_1_0() { return cUpperVersionHyVersionCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getUpperVersionHyVersionQualifiedNameParserRuleCall_2_1_0_1() { return cUpperVersionHyVersionQualifiedNameParserRuleCall_2_1_0_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
	}
	public class EvoMappingContextInformationReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingContextInformationReferenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContextInformationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContextInformationHyContextualInformationCrossReference_1_0 = (CrossReference)cContextInformationAssignment_1.eContents().get(0);
		private final RuleCall cContextInformationHyContextualInformationQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cContextInformationHyContextualInformationCrossReference_1_0.eContents().get(1);
		
		//EvoMappingContextInformationReferenceExpression dw_expression::HyContextInformationReferenceExpression:
		//	"context:" contextInformation=[dw_context::HyContextualInformation|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//"context:" contextInformation=[dw_context::HyContextualInformation|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//"context:"
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//contextInformation=[dw_context::HyContextualInformation|QualifiedName]
		public Assignment getContextInformationAssignment_1() { return cContextInformationAssignment_1; }
		
		//[dw_context::HyContextualInformation|QualifiedName]
		public CrossReference getContextInformationHyContextualInformationCrossReference_1_0() { return cContextInformationHyContextualInformationCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getContextInformationHyContextualInformationQualifiedNameParserRuleCall_1_0_1() { return cContextInformationHyContextualInformationQualifiedNameParserRuleCall_1_0_1; }
	}
	public class EvoMappingAttributeReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingAttributeReferenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFeatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFeatureHyFeatureCrossReference_0_0 = (CrossReference)cFeatureAssignment_0.eContents().get(0);
		private final RuleCall cFeatureHyFeatureSTRINGTerminalRuleCall_0_0_1 = (RuleCall)cFeatureHyFeatureCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttributeHyFeatureAttributeCrossReference_2_0 = (CrossReference)cAttributeAssignment_2.eContents().get(0);
		private final RuleCall cAttributeHyFeatureAttributeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cAttributeHyFeatureAttributeCrossReference_2_0.eContents().get(1);
		
		//EvoMappingAttributeReferenceExpression dw_expression::HyAttributeReferenceExpression:
		//	feature=[dw_feature::HyFeature|STRING] '.' attribute=[dw_feature::HyFeatureAttribute|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//feature=[dw_feature::HyFeature|STRING] '.' attribute=[dw_feature::HyFeatureAttribute|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//feature=[dw_feature::HyFeature|STRING]
		public Assignment getFeatureAssignment_0() { return cFeatureAssignment_0; }
		
		//[dw_feature::HyFeature|STRING]
		public CrossReference getFeatureHyFeatureCrossReference_0_0() { return cFeatureHyFeatureCrossReference_0_0; }
		
		//STRING
		public RuleCall getFeatureHyFeatureSTRINGTerminalRuleCall_0_0_1() { return cFeatureHyFeatureSTRINGTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//attribute=[dw_feature::HyFeatureAttribute|QualifiedName]
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }
		
		//[dw_feature::HyFeatureAttribute|QualifiedName]
		public CrossReference getAttributeHyFeatureAttributeCrossReference_2_0() { return cAttributeHyFeatureAttributeCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getAttributeHyFeatureAttributeQualifiedNameParserRuleCall_2_0_1() { return cAttributeHyFeatureAttributeQualifiedNameParserRuleCall_2_0_1; }
	}
	public class EvoMappingValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingValueExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEvoMappingNumberValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//EvoMappingValueExpression dw_expression::HyValueExpression:
		//	value=EvoMappingNumberValue;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EvoMappingNumberValue
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EvoMappingNumberValue
		public RuleCall getValueEvoMappingNumberValueParserRuleCall_0() { return cValueEvoMappingNumberValueParserRuleCall_0; }
	}
	public class EvoMappingBooleanValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingBooleanValueExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHyBooleanValueExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_0_0 = (Keyword)cValueAssignment_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//EvoMappingBooleanValueExpression dw_expression::HyBooleanValueExpression:
		//	{dw_expression::HyBooleanValueExpression} (value?='true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//{dw_expression::HyBooleanValueExpression} (value?='true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//{dw_expression::HyBooleanValueExpression}
		public Action getHyBooleanValueExpressionAction_0() { return cHyBooleanValueExpressionAction_0; }
		
		//value?='true' | 'false'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value?='true'
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_1_0_0() { return cValueTrueKeyword_1_0_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}
	public class EvoMappingNumberValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingNumberValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//EvoMappingNumberValue dw_data::HyNumberValue:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class EvoMappingBooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingBooleanValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHyBooleanValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_0_0 = (Keyword)cValueAssignment_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//EvoMappingBooleanValue dw_data::HyBooleanValue:
		//	{dw_data::HyBooleanValue} (value?='true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//{dw_data::HyBooleanValue} (value?='true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//{dw_data::HyBooleanValue}
		public Action getHyBooleanValueAction_0() { return cHyBooleanValueAction_0; }
		
		//value?='true' | 'false'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value?='true'
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_1_0_0() { return cValueTrueKeyword_1_0_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}
	public class EvoMappingEnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingEnumValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEnumAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEnumHyEnumCrossReference_1_0 = (CrossReference)cEnumAssignment_1.eContents().get(0);
		private final RuleCall cEnumHyEnumQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cEnumHyEnumCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEnumLiteralAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cEnumLiteralHyEnumLiteralCrossReference_3_0 = (CrossReference)cEnumLiteralAssignment_3.eContents().get(0);
		private final RuleCall cEnumLiteralHyEnumLiteralQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cEnumLiteralHyEnumLiteralCrossReference_3_0.eContents().get(1);
		
		//EvoMappingEnumValue dw_data::HyEnumValue:
		//	"enum:" ^enum=[dw_data::HyEnum|QualifiedName] "." enumLiteral=[dw_data::HyEnumLiteral|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//"enum:" ^enum=[dw_data::HyEnum|QualifiedName] "." enumLiteral=[dw_data::HyEnumLiteral|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//"enum:"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//^enum=[dw_data::HyEnum|QualifiedName]
		public Assignment getEnumAssignment_1() { return cEnumAssignment_1; }
		
		//[dw_data::HyEnum|QualifiedName]
		public CrossReference getEnumHyEnumCrossReference_1_0() { return cEnumHyEnumCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getEnumHyEnumQualifiedNameParserRuleCall_1_0_1() { return cEnumHyEnumQualifiedNameParserRuleCall_1_0_1; }
		
		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//enumLiteral=[dw_data::HyEnumLiteral|QualifiedName]
		public Assignment getEnumLiteralAssignment_3() { return cEnumLiteralAssignment_3; }
		
		//[dw_data::HyEnumLiteral|QualifiedName]
		public CrossReference getEnumLiteralHyEnumLiteralCrossReference_3_0() { return cEnumLiteralHyEnumLiteralCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getEnumLiteralHyEnumLiteralQualifiedNameParserRuleCall_3_0_1() { return cEnumLiteralHyEnumLiteralQualifiedNameParserRuleCall_3_0_1; }
	}
	public class EvoMappingEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cLiteralsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cLiteralsEvoMappingEnumLiteralParserRuleCall_3_0_0 = (RuleCall)cLiteralsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cLiteralsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cLiteralsEvoMappingEnumLiteralParserRuleCall_3_1_1_0 = (RuleCall)cLiteralsAssignment_3_1_1.eContents().get(0);
		
		//EvoMappingEnum dw_data::HyEnum:
		//	"Enum(" name=ID "," (literals+=EvoMappingEnumLiteral (',' literals+=EvoMappingEnumLiteral)*);
		@Override public ParserRule getRule() { return rule; }
		
		//"Enum(" name=ID "," (literals+=EvoMappingEnumLiteral (',' literals+=EvoMappingEnumLiteral)*)
		public Group getGroup() { return cGroup; }
		
		//"Enum("
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//literals+=EvoMappingEnumLiteral (',' literals+=EvoMappingEnumLiteral)*
		public Group getGroup_3() { return cGroup_3; }
		
		//literals+=EvoMappingEnumLiteral
		public Assignment getLiteralsAssignment_3_0() { return cLiteralsAssignment_3_0; }
		
		//EvoMappingEnumLiteral
		public RuleCall getLiteralsEvoMappingEnumLiteralParserRuleCall_3_0_0() { return cLiteralsEvoMappingEnumLiteralParserRuleCall_3_0_0; }
		
		//(',' literals+=EvoMappingEnumLiteral)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//literals+=EvoMappingEnumLiteral
		public Assignment getLiteralsAssignment_3_1_1() { return cLiteralsAssignment_3_1_1; }
		
		//EvoMappingEnumLiteral
		public RuleCall getLiteralsEvoMappingEnumLiteralParserRuleCall_3_1_1_0() { return cLiteralsEvoMappingEnumLiteralParserRuleCall_3_1_1_0; }
	}
	public class EvoMappingEnumLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingEnumLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumLiteralKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueINTTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Group cGroup_5_1_0 = (Group)cAlternatives_5_1.eContents().get(0);
		private final Assignment cValidSinceAssignment_5_1_0_0 = (Assignment)cGroup_5_1_0.eContents().get(0);
		private final RuleCall cValidSinceDATETerminalRuleCall_5_1_0_0_0 = (RuleCall)cValidSinceAssignment_5_1_0_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_5_1_0_1 = (Keyword)cGroup_5_1_0.eContents().get(1);
		private final Assignment cValidUntilAssignment_5_1_0_2 = (Assignment)cGroup_5_1_0.eContents().get(2);
		private final RuleCall cValidUntilDATETerminalRuleCall_5_1_0_2_0 = (RuleCall)cValidUntilAssignment_5_1_0_2.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cAlternatives_5_1.eContents().get(1);
		private final Assignment cValidSinceAssignment_5_1_1_0 = (Assignment)cGroup_5_1_1.eContents().get(0);
		private final RuleCall cValidSinceDATETerminalRuleCall_5_1_1_0_0 = (RuleCall)cValidSinceAssignment_5_1_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_5_1_1_1 = (Keyword)cGroup_5_1_1.eContents().get(1);
		private final Group cGroup_5_1_2 = (Group)cAlternatives_5_1.eContents().get(2);
		private final Keyword cEternityKeyword_5_1_2_0 = (Keyword)cGroup_5_1_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_5_1_2_1 = (Keyword)cGroup_5_1_2.eContents().get(1);
		private final Assignment cValidUntilAssignment_5_1_2_2 = (Assignment)cGroup_5_1_2.eContents().get(2);
		private final RuleCall cValidUntilDATETerminalRuleCall_5_1_2_2_0 = (RuleCall)cValidUntilAssignment_5_1_2_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//EvoMappingEnumLiteral dw_data::HyEnumLiteral:
		//	"EnumLiteral(" name=ID "," value=INT ")" ("[" (validSince=DATE "-" validUntil=DATE | validSince=DATE "-" | "eternity"
		//	"-" validUntil=DATE) "]")?;
		@Override public ParserRule getRule() { return rule; }
		
		//"EnumLiteral(" name=ID "," value=INT ")" ("[" (validSince=DATE "-" validUntil=DATE | validSince=DATE "-" | "eternity"
		//"-" validUntil=DATE) "]")?
		public Group getGroup() { return cGroup; }
		
		//"EnumLiteral("
		public Keyword getEnumLiteralKeyword_0() { return cEnumLiteralKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//value=INT
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_3_0() { return cValueINTTerminalRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//("[" (validSince=DATE "-" validUntil=DATE | validSince=DATE "-" | "eternity" "-" validUntil=DATE) "]")?
		public Group getGroup_5() { return cGroup_5; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_5_0() { return cLeftSquareBracketKeyword_5_0; }
		
		//validSince=DATE "-" validUntil=DATE | validSince=DATE "-" | "eternity" "-" validUntil=DATE
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }
		
		//validSince=DATE "-" validUntil=DATE
		public Group getGroup_5_1_0() { return cGroup_5_1_0; }
		
		//validSince=DATE
		public Assignment getValidSinceAssignment_5_1_0_0() { return cValidSinceAssignment_5_1_0_0; }
		
		//DATE
		public RuleCall getValidSinceDATETerminalRuleCall_5_1_0_0_0() { return cValidSinceDATETerminalRuleCall_5_1_0_0_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_5_1_0_1() { return cHyphenMinusKeyword_5_1_0_1; }
		
		//validUntil=DATE
		public Assignment getValidUntilAssignment_5_1_0_2() { return cValidUntilAssignment_5_1_0_2; }
		
		//DATE
		public RuleCall getValidUntilDATETerminalRuleCall_5_1_0_2_0() { return cValidUntilDATETerminalRuleCall_5_1_0_2_0; }
		
		//validSince=DATE "-"
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }
		
		//validSince=DATE
		public Assignment getValidSinceAssignment_5_1_1_0() { return cValidSinceAssignment_5_1_1_0; }
		
		//DATE
		public RuleCall getValidSinceDATETerminalRuleCall_5_1_1_0_0() { return cValidSinceDATETerminalRuleCall_5_1_1_0_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_5_1_1_1() { return cHyphenMinusKeyword_5_1_1_1; }
		
		//"eternity" "-" validUntil=DATE
		public Group getGroup_5_1_2() { return cGroup_5_1_2; }
		
		//"eternity"
		public Keyword getEternityKeyword_5_1_2_0() { return cEternityKeyword_5_1_2_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_5_1_2_1() { return cHyphenMinusKeyword_5_1_2_1; }
		
		//validUntil=DATE
		public Assignment getValidUntilAssignment_5_1_2_2() { return cValidUntilAssignment_5_1_2_2; }
		
		//DATE
		public RuleCall getValidUntilDATETerminalRuleCall_5_1_2_2_0() { return cValidUntilDATETerminalRuleCall_5_1_2_2_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_5_2() { return cRightSquareBracketKeyword_5_2; }
	}
	public class EvoBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EvoBoolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EvoMappingMimumumExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingMimumumExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandEvoMappingExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//EvoMappingMimumumExpression dw_expression::HyMinimumExpression:
		//	"min(" operand=EvoMappingExpression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"min(" operand=EvoMappingExpression ")"
		public Group getGroup() { return cGroup; }
		
		//"min("
		public Keyword getMinKeyword_0() { return cMinKeyword_0; }
		
		//operand=EvoMappingExpression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }
		
		//EvoMappingExpression
		public RuleCall getOperandEvoMappingExpressionParserRuleCall_1_0() { return cOperandEvoMappingExpressionParserRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class EvoMappingMaximumExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingMaximumExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandEvoMappingExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//EvoMappingMaximumExpression dw_expression::HyMaximumExpression:
		//	"max(" operand=EvoMappingExpression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"max(" operand=EvoMappingExpression ")"
		public Group getGroup() { return cGroup; }
		
		//"max("
		public Keyword getMaxKeyword_0() { return cMaxKeyword_0; }
		
		//operand=EvoMappingExpression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }
		
		//EvoMappingExpression
		public RuleCall getOperandEvoMappingExpressionParserRuleCall_1_0() { return cOperandEvoMappingExpressionParserRuleCall_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	
	public class EvoMappingRelativeVersionRestrictionOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.EvoMappingRelativeVersionRestrictionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLessThanEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLessThanLessThanSignKeyword_0_0 = (Keyword)cLessThanEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLessThanOrEqualEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLessThanOrEqualLessThanSignEqualsSignKeyword_1_0 = (Keyword)cLessThanOrEqualEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEqualEqualsSignKeyword_2_0 = (Keyword)cEqualEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThanOrEqualEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanOrEqualGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGreaterThanOrEqualEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThanEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanGreaterThanSignKeyword_4_0 = (Keyword)cGreaterThanEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum EvoMappingRelativeVersionRestrictionOperator returns dw_expression::HyRelativeVersionRestrictionOperator:
		//	lessThan="<" | lessThanOrEqual="<=" | equal="=" | greaterThanOrEqual=">=" | greaterThan=">";
		public EnumRule getRule() { return rule; }
		
		//lessThan="<" | lessThanOrEqual="<=" | equal="=" | greaterThanOrEqual=">=" | greaterThan=">"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//lessThan="<"
		public EnumLiteralDeclaration getLessThanEnumLiteralDeclaration_0() { return cLessThanEnumLiteralDeclaration_0; }
		
		//"<"
		public Keyword getLessThanLessThanSignKeyword_0_0() { return cLessThanLessThanSignKeyword_0_0; }
		
		//lessThanOrEqual="<="
		public EnumLiteralDeclaration getLessThanOrEqualEnumLiteralDeclaration_1() { return cLessThanOrEqualEnumLiteralDeclaration_1; }
		
		//"<="
		public Keyword getLessThanOrEqualLessThanSignEqualsSignKeyword_1_0() { return cLessThanOrEqualLessThanSignEqualsSignKeyword_1_0; }
		
		//equal="="
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_2() { return cEqualEnumLiteralDeclaration_2; }
		
		//"="
		public Keyword getEqualEqualsSignKeyword_2_0() { return cEqualEqualsSignKeyword_2_0; }
		
		//greaterThanOrEqual=">="
		public EnumLiteralDeclaration getGreaterThanOrEqualEnumLiteralDeclaration_3() { return cGreaterThanOrEqualEnumLiteralDeclaration_3; }
		
		//">="
		public Keyword getGreaterThanOrEqualGreaterThanSignEqualsSignKeyword_3_0() { return cGreaterThanOrEqualGreaterThanSignEqualsSignKeyword_3_0; }
		
		//greaterThan=">"
		public EnumLiteralDeclaration getGreaterThanEnumLiteralDeclaration_4() { return cGreaterThanEnumLiteralDeclaration_4; }
		
		//">"
		public Keyword getGreaterThanGreaterThanSignKeyword_4_0() { return cGreaterThanGreaterThanSignKeyword_4_0; }
	}
	
	private final GrammarEntryElements pGrammarEntry;
	private final EvoMappingExpressionElements pEvoMappingExpression;
	private final EvoMappingOrElements pEvoMappingOr;
	private final EvoMappingAndElements pEvoMappingAnd;
	private final EvoMappingEqualElements pEvoMappingEqual;
	private final EvoMappingUnequalElements pEvoMappingUnequal;
	private final EvoMappingImplicationElements pEvoMappingImplication;
	private final EvoMappingEquivalenceElements pEvoMappingEquivalence;
	private final EvoMappingLessExpressionElements pEvoMappingLessExpression;
	private final EvoMappingIfPossibleExpressionElements pEvoMappingIfPossibleExpression;
	private final EvoMappingLessOrEqualExpressionElements pEvoMappingLessOrEqualExpression;
	private final EvoMappingGreaterExpressionElements pEvoMappingGreaterExpression;
	private final EvoMappingGreaterOrEqualExpressionElements pEvoMappingGreaterOrEqualExpression;
	private final EvoMappingSubtractionExpressionElements pEvoMappingSubtractionExpression;
	private final EvoMappingAdditionExpressionElements pEvoMappingAdditionExpression;
	private final EvoMappingModuloExpressionElements pEvoMappingModuloExpression;
	private final EvoMappingMultiplicationExpressionElements pEvoMappingMultiplicationExpression;
	private final EvoMappingDivisionExpressionElements pEvoMappingDivisionExpression;
	private final EvoMappingNegationElements pEvoMappingNegation;
	private final EvoMappingTerminalElements pEvoMappingTerminal;
	private final EvoMappingNestedExpressionElements pEvoMappingNestedExpression;
	private final EvoMappingNotElements pEvoMappingNot;
	private final EvoMappingFeatureReferenceExpressionElements pEvoMappingFeatureReferenceExpression;
	private final EvoMappingConditionalFeatureReferenceExpressionElements pEvoMappingConditionalFeatureReferenceExpression;
	private final EvoMappingVersionRestrictionElements pEvoMappingVersionRestriction;
	private final EvoMappingRelativeVersionRestrictionElements pEvoMappingRelativeVersionRestriction;
	private final EvoMappingRelativeVersionRestrictionOperatorElements eEvoMappingRelativeVersionRestrictionOperator;
	private final EvoMappingVersionRangeRestrictionElements pEvoMappingVersionRangeRestriction;
	private final EvoMappingContextInformationReferenceExpressionElements pEvoMappingContextInformationReferenceExpression;
	private final EvoMappingAttributeReferenceExpressionElements pEvoMappingAttributeReferenceExpression;
	private final EvoMappingValueExpressionElements pEvoMappingValueExpression;
	private final EvoMappingBooleanValueExpressionElements pEvoMappingBooleanValueExpression;
	private final EvoMappingNumberValueElements pEvoMappingNumberValue;
	private final EvoMappingBooleanValueElements pEvoMappingBooleanValue;
	private final EvoMappingEnumValueElements pEvoMappingEnumValue;
	private final EvoMappingEnumElements pEvoMappingEnum;
	private final EvoMappingEnumLiteralElements pEvoMappingEnumLiteral;
	private final EvoBooleanElements pEvoBoolean;
	private final EvoMappingMimumumExpressionElements pEvoMappingMimumumExpression;
	private final EvoMappingMaximumExpressionElements pEvoMappingMaximumExpression;
	private final TerminalRule tDATE;
	
	private final Grammar grammar;
	
	private final EvoLogicDslGrammarAccess gaEvoLogicDsl;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EvoExpressionDslGrammarAccess(GrammarProvider grammarProvider,
			EvoLogicDslGrammarAccess gaEvoLogicDsl,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaEvoLogicDsl = gaEvoLogicDsl;
		this.gaTerminals = gaTerminals;
		this.pGrammarEntry = new GrammarEntryElements();
		this.pEvoMappingExpression = new EvoMappingExpressionElements();
		this.pEvoMappingOr = new EvoMappingOrElements();
		this.pEvoMappingAnd = new EvoMappingAndElements();
		this.pEvoMappingEqual = new EvoMappingEqualElements();
		this.pEvoMappingUnequal = new EvoMappingUnequalElements();
		this.pEvoMappingImplication = new EvoMappingImplicationElements();
		this.pEvoMappingEquivalence = new EvoMappingEquivalenceElements();
		this.pEvoMappingLessExpression = new EvoMappingLessExpressionElements();
		this.pEvoMappingIfPossibleExpression = new EvoMappingIfPossibleExpressionElements();
		this.pEvoMappingLessOrEqualExpression = new EvoMappingLessOrEqualExpressionElements();
		this.pEvoMappingGreaterExpression = new EvoMappingGreaterExpressionElements();
		this.pEvoMappingGreaterOrEqualExpression = new EvoMappingGreaterOrEqualExpressionElements();
		this.pEvoMappingSubtractionExpression = new EvoMappingSubtractionExpressionElements();
		this.pEvoMappingAdditionExpression = new EvoMappingAdditionExpressionElements();
		this.pEvoMappingModuloExpression = new EvoMappingModuloExpressionElements();
		this.pEvoMappingMultiplicationExpression = new EvoMappingMultiplicationExpressionElements();
		this.pEvoMappingDivisionExpression = new EvoMappingDivisionExpressionElements();
		this.pEvoMappingNegation = new EvoMappingNegationElements();
		this.pEvoMappingTerminal = new EvoMappingTerminalElements();
		this.pEvoMappingNestedExpression = new EvoMappingNestedExpressionElements();
		this.pEvoMappingNot = new EvoMappingNotElements();
		this.pEvoMappingFeatureReferenceExpression = new EvoMappingFeatureReferenceExpressionElements();
		this.pEvoMappingConditionalFeatureReferenceExpression = new EvoMappingConditionalFeatureReferenceExpressionElements();
		this.pEvoMappingVersionRestriction = new EvoMappingVersionRestrictionElements();
		this.pEvoMappingRelativeVersionRestriction = new EvoMappingRelativeVersionRestrictionElements();
		this.eEvoMappingRelativeVersionRestrictionOperator = new EvoMappingRelativeVersionRestrictionOperatorElements();
		this.pEvoMappingVersionRangeRestriction = new EvoMappingVersionRangeRestrictionElements();
		this.pEvoMappingContextInformationReferenceExpression = new EvoMappingContextInformationReferenceExpressionElements();
		this.pEvoMappingAttributeReferenceExpression = new EvoMappingAttributeReferenceExpressionElements();
		this.pEvoMappingValueExpression = new EvoMappingValueExpressionElements();
		this.pEvoMappingBooleanValueExpression = new EvoMappingBooleanValueExpressionElements();
		this.pEvoMappingNumberValue = new EvoMappingNumberValueElements();
		this.pEvoMappingBooleanValue = new EvoMappingBooleanValueElements();
		this.pEvoMappingEnumValue = new EvoMappingEnumValueElements();
		this.pEvoMappingEnum = new EvoMappingEnumElements();
		this.pEvoMappingEnumLiteral = new EvoMappingEnumLiteralElements();
		this.pEvoBoolean = new EvoBooleanElements();
		this.pEvoMappingMimumumExpression = new EvoMappingMimumumExpressionElements();
		this.pEvoMappingMaximumExpression = new EvoMappingMaximumExpressionElements();
		this.tDATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.expression.EvoExpressionDsl.DATE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.evorepair.feature.expression.EvoExpressionDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public EvoLogicDslGrammarAccess getEvoLogicDslGrammarAccess() {
		return gaEvoLogicDsl;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//@ Override GrammarEntry:
	//	expression=EvoMappingExpression;
	public GrammarEntryElements getGrammarEntryAccess() {
		return pGrammarEntry;
	}
	
	public ParserRule getGrammarEntryRule() {
		return getGrammarEntryAccess().getRule();
	}
	
	//EvoMappingExpression dw_expression::HyExpression:
	//	EvoMappingOr;
	public EvoMappingExpressionElements getEvoMappingExpressionAccess() {
		return pEvoMappingExpression;
	}
	
	public ParserRule getEvoMappingExpressionRule() {
		return getEvoMappingExpressionAccess().getRule();
	}
	
	//EvoMappingOr dw_expression::HyExpression:
	//	EvoMappingAnd ({dw_expression::HyOrExpression.operand1=current} '||' operand2=EvoMappingAnd)*;
	public EvoMappingOrElements getEvoMappingOrAccess() {
		return pEvoMappingOr;
	}
	
	public ParserRule getEvoMappingOrRule() {
		return getEvoMappingOrAccess().getRule();
	}
	
	//EvoMappingAnd dw_expression::HyExpression:
	//	EvoMappingEqual ({dw_expression::HyAndExpression.operand1=current} '&&' operand2=EvoMappingEqual)*;
	public EvoMappingAndElements getEvoMappingAndAccess() {
		return pEvoMappingAnd;
	}
	
	public ParserRule getEvoMappingAndRule() {
		return getEvoMappingAndAccess().getRule();
	}
	
	//EvoMappingEqual dw_expression::HyExpression:
	//	EvoMappingUnequal ({dw_expression::HyEqualExpression.operand1=current} '==' operand2=EvoMappingUnequal)*;
	public EvoMappingEqualElements getEvoMappingEqualAccess() {
		return pEvoMappingEqual;
	}
	
	public ParserRule getEvoMappingEqualRule() {
		return getEvoMappingEqualAccess().getRule();
	}
	
	//EvoMappingUnequal dw_expression::HyExpression:
	//	EvoMappingImplication ({dw_expression::HyNotEqualExpression.operand1=current} '!=' operand2=EvoMappingImplication)*;
	public EvoMappingUnequalElements getEvoMappingUnequalAccess() {
		return pEvoMappingUnequal;
	}
	
	public ParserRule getEvoMappingUnequalRule() {
		return getEvoMappingUnequalAccess().getRule();
	}
	
	//EvoMappingImplication dw_expression::HyExpression:
	//	EvoMappingEquivalence ({dw_expression::HyImpliesExpression.operand1=current} '->' operand2=EvoMappingEquivalence)*;
	public EvoMappingImplicationElements getEvoMappingImplicationAccess() {
		return pEvoMappingImplication;
	}
	
	public ParserRule getEvoMappingImplicationRule() {
		return getEvoMappingImplicationAccess().getRule();
	}
	
	//EvoMappingEquivalence dw_expression::HyExpression:
	//	EvoMappingLessExpression ({dw_expression::HyEquivalenceExpression.operand1=current} '<->'
	//	operand2=EvoMappingLessExpression)*;
	public EvoMappingEquivalenceElements getEvoMappingEquivalenceAccess() {
		return pEvoMappingEquivalence;
	}
	
	public ParserRule getEvoMappingEquivalenceRule() {
		return getEvoMappingEquivalenceAccess().getRule();
	}
	
	//EvoMappingLessExpression dw_expression::HyExpression:
	//	EvoMappingIfPossibleExpression ({dw_expression::HyLessExpression.operand1=current} '<'
	//	operand2=EvoMappingIfPossibleExpression)*;
	public EvoMappingLessExpressionElements getEvoMappingLessExpressionAccess() {
		return pEvoMappingLessExpression;
	}
	
	public ParserRule getEvoMappingLessExpressionRule() {
		return getEvoMappingLessExpressionAccess().getRule();
	}
	
	//EvoMappingIfPossibleExpression dw_expression::HyExpression:
	//	EvoMappingLessOrEqualExpression ("ifPossible(" {dw_expression::HyIfPossibleExpression.operands+=current} (','
	//	operands+=EvoMappingLessOrEqualExpression)* ")")*;
	public EvoMappingIfPossibleExpressionElements getEvoMappingIfPossibleExpressionAccess() {
		return pEvoMappingIfPossibleExpression;
	}
	
	public ParserRule getEvoMappingIfPossibleExpressionRule() {
		return getEvoMappingIfPossibleExpressionAccess().getRule();
	}
	
	//EvoMappingLessOrEqualExpression dw_expression::HyExpression:
	//	EvoMappingGreaterExpression ({dw_expression::HyLessOrEqualExpression.operand1=current} '<='
	//	operand2=EvoMappingGreaterExpression)*;
	public EvoMappingLessOrEqualExpressionElements getEvoMappingLessOrEqualExpressionAccess() {
		return pEvoMappingLessOrEqualExpression;
	}
	
	public ParserRule getEvoMappingLessOrEqualExpressionRule() {
		return getEvoMappingLessOrEqualExpressionAccess().getRule();
	}
	
	//EvoMappingGreaterExpression dw_expression::HyExpression:
	//	EvoMappingGreaterOrEqualExpression ({dw_expression::HyGreaterExpression.operand1=current} '>'
	//	operand2=EvoMappingGreaterOrEqualExpression)*;
	public EvoMappingGreaterExpressionElements getEvoMappingGreaterExpressionAccess() {
		return pEvoMappingGreaterExpression;
	}
	
	public ParserRule getEvoMappingGreaterExpressionRule() {
		return getEvoMappingGreaterExpressionAccess().getRule();
	}
	
	//EvoMappingGreaterOrEqualExpression dw_expression::HyExpression:
	//	EvoMappingSubtractionExpression ({dw_expression::HyGreaterOrEqualExpression.operand1=current} '>='
	//	operand2=EvoMappingSubtractionExpression)*;
	public EvoMappingGreaterOrEqualExpressionElements getEvoMappingGreaterOrEqualExpressionAccess() {
		return pEvoMappingGreaterOrEqualExpression;
	}
	
	public ParserRule getEvoMappingGreaterOrEqualExpressionRule() {
		return getEvoMappingGreaterOrEqualExpressionAccess().getRule();
	}
	
	//EvoMappingSubtractionExpression dw_expression::HyExpression:
	//	EvoMappingAdditionExpression ({dw_expression::HySubtractionExpression.operand1=current} '-'
	//	operand2=EvoMappingAdditionExpression)*;
	public EvoMappingSubtractionExpressionElements getEvoMappingSubtractionExpressionAccess() {
		return pEvoMappingSubtractionExpression;
	}
	
	public ParserRule getEvoMappingSubtractionExpressionRule() {
		return getEvoMappingSubtractionExpressionAccess().getRule();
	}
	
	//EvoMappingAdditionExpression dw_expression::HyExpression:
	//	EvoMappingModuloExpression ({dw_expression::HyAdditionExpression.operand1=current} '+'
	//	operand2=EvoMappingModuloExpression)*;
	public EvoMappingAdditionExpressionElements getEvoMappingAdditionExpressionAccess() {
		return pEvoMappingAdditionExpression;
	}
	
	public ParserRule getEvoMappingAdditionExpressionRule() {
		return getEvoMappingAdditionExpressionAccess().getRule();
	}
	
	//EvoMappingModuloExpression dw_expression::HyExpression:
	//	EvoMappingMultiplicationExpression ({dw_expression::HyModuloExpression.operand1=current} '%'
	//	operand2=EvoMappingMultiplicationExpression)*;
	public EvoMappingModuloExpressionElements getEvoMappingModuloExpressionAccess() {
		return pEvoMappingModuloExpression;
	}
	
	public ParserRule getEvoMappingModuloExpressionRule() {
		return getEvoMappingModuloExpressionAccess().getRule();
	}
	
	//EvoMappingMultiplicationExpression dw_expression::HyExpression:
	//	EvoMappingDivisionExpression ({dw_expression::HyMultiplicationExpression.operand1=current} '*'
	//	operand2=EvoMappingDivisionExpression)*;
	public EvoMappingMultiplicationExpressionElements getEvoMappingMultiplicationExpressionAccess() {
		return pEvoMappingMultiplicationExpression;
	}
	
	public ParserRule getEvoMappingMultiplicationExpressionRule() {
		return getEvoMappingMultiplicationExpressionAccess().getRule();
	}
	
	//EvoMappingDivisionExpression dw_expression::HyExpression:
	//	EvoMappingTerminal ({dw_expression::HyDivisionExpression.operand1=current} '/' operand2=EvoMappingTerminal)*;
	public EvoMappingDivisionExpressionElements getEvoMappingDivisionExpressionAccess() {
		return pEvoMappingDivisionExpression;
	}
	
	public ParserRule getEvoMappingDivisionExpressionRule() {
		return getEvoMappingDivisionExpressionAccess().getRule();
	}
	
	//EvoMappingNegation dw_expression::HyNegationExpression:
	//	'-' operand=EvoMappingTerminal;
	public EvoMappingNegationElements getEvoMappingNegationAccess() {
		return pEvoMappingNegation;
	}
	
	public ParserRule getEvoMappingNegationRule() {
		return getEvoMappingNegationAccess().getRule();
	}
	
	//EvoMappingTerminal dw_expression::HyExpression:
	//	EvoMappingFeatureReferenceExpression | EvoMappingNestedExpression | EvoMappingNegation |
	//	EvoMappingConditionalFeatureReferenceExpression | EvoMappingContextInformationReferenceExpression |
	//	EvoMappingAttributeReferenceExpression | EvoMappingValueExpression | EvoMappingBooleanValueExpression |
	//	EvoMappingMimumumExpression | EvoMappingMaximumExpression | EvoMappingNot;
	public EvoMappingTerminalElements getEvoMappingTerminalAccess() {
		return pEvoMappingTerminal;
	}
	
	public ParserRule getEvoMappingTerminalRule() {
		return getEvoMappingTerminalAccess().getRule();
	}
	
	//EvoMappingNestedExpression dw_expression::HyNestedExpression:
	//	'(' operand=EvoMappingExpression ')';
	public EvoMappingNestedExpressionElements getEvoMappingNestedExpressionAccess() {
		return pEvoMappingNestedExpression;
	}
	
	public ParserRule getEvoMappingNestedExpressionRule() {
		return getEvoMappingNestedExpressionAccess().getRule();
	}
	
	//EvoMappingNot dw_expression::HyNotExpression:
	//	'!' operand=EvoMappingTerminal;
	public EvoMappingNotElements getEvoMappingNotAccess() {
		return pEvoMappingNot;
	}
	
	public ParserRule getEvoMappingNotRule() {
		return getEvoMappingNotAccess().getRule();
	}
	
	//EvoMappingFeatureReferenceExpression dw_expression::HyFeatureReferenceExpression:
	//	feature=[dw_feature::HyFeature|STRING];
	public EvoMappingFeatureReferenceExpressionElements getEvoMappingFeatureReferenceExpressionAccess() {
		return pEvoMappingFeatureReferenceExpression;
	}
	
	public ParserRule getEvoMappingFeatureReferenceExpressionRule() {
		return getEvoMappingFeatureReferenceExpressionAccess().getRule();
	}
	
	//// (versionRestriction=EvoMappingVersionRestriction)?;
	//EvoMappingConditionalFeatureReferenceExpression dw_expression::HyConditionalFeatureReferenceExpression:
	//	"?" feature=[dw_feature::HyFeature|QualifiedName] versionRestriction=EvoMappingVersionRestriction?;
	public EvoMappingConditionalFeatureReferenceExpressionElements getEvoMappingConditionalFeatureReferenceExpressionAccess() {
		return pEvoMappingConditionalFeatureReferenceExpression;
	}
	
	public ParserRule getEvoMappingConditionalFeatureReferenceExpressionRule() {
		return getEvoMappingConditionalFeatureReferenceExpressionAccess().getRule();
	}
	
	//EvoMappingVersionRestriction dw_expression::HyVersionRestriction:
	//	EvoMappingRelativeVersionRestriction | EvoMappingVersionRangeRestriction;
	public EvoMappingVersionRestrictionElements getEvoMappingVersionRestrictionAccess() {
		return pEvoMappingVersionRestriction;
	}
	
	public ParserRule getEvoMappingVersionRestrictionRule() {
		return getEvoMappingVersionRestrictionAccess().getRule();
	}
	
	//EvoMappingRelativeVersionRestriction dw_expression::HyRelativeVersionRestriction:
	//	"[" operator=EvoMappingRelativeVersionRestrictionOperator version=[dw_feature::HyVersion] "]";
	public EvoMappingRelativeVersionRestrictionElements getEvoMappingRelativeVersionRestrictionAccess() {
		return pEvoMappingRelativeVersionRestriction;
	}
	
	public ParserRule getEvoMappingRelativeVersionRestrictionRule() {
		return getEvoMappingRelativeVersionRestrictionAccess().getRule();
	}
	
	//enum EvoMappingRelativeVersionRestrictionOperator returns dw_expression::HyRelativeVersionRestrictionOperator:
	//	lessThan="<" | lessThanOrEqual="<=" | equal="=" | greaterThanOrEqual=">=" | greaterThan=">";
	public EvoMappingRelativeVersionRestrictionOperatorElements getEvoMappingRelativeVersionRestrictionOperatorAccess() {
		return eEvoMappingRelativeVersionRestrictionOperator;
	}
	
	public EnumRule getEvoMappingRelativeVersionRestrictionOperatorRule() {
		return getEvoMappingRelativeVersionRestrictionOperatorAccess().getRule();
	}
	
	//EvoMappingVersionRangeRestriction dw_expression::HyVersionRangeRestriction:
	//	"[" lowerIncluded?='true' | 'false' lowerVersion=[dw_feature::HyVersion|QualifiedName] "-" upperIncluded?='true' |
	//	'false' upperVersion=[dw_feature::HyVersion|QualifiedName] "]";
	public EvoMappingVersionRangeRestrictionElements getEvoMappingVersionRangeRestrictionAccess() {
		return pEvoMappingVersionRangeRestriction;
	}
	
	public ParserRule getEvoMappingVersionRangeRestrictionRule() {
		return getEvoMappingVersionRangeRestrictionAccess().getRule();
	}
	
	//EvoMappingContextInformationReferenceExpression dw_expression::HyContextInformationReferenceExpression:
	//	"context:" contextInformation=[dw_context::HyContextualInformation|QualifiedName];
	public EvoMappingContextInformationReferenceExpressionElements getEvoMappingContextInformationReferenceExpressionAccess() {
		return pEvoMappingContextInformationReferenceExpression;
	}
	
	public ParserRule getEvoMappingContextInformationReferenceExpressionRule() {
		return getEvoMappingContextInformationReferenceExpressionAccess().getRule();
	}
	
	//EvoMappingAttributeReferenceExpression dw_expression::HyAttributeReferenceExpression:
	//	feature=[dw_feature::HyFeature|STRING] '.' attribute=[dw_feature::HyFeatureAttribute|QualifiedName];
	public EvoMappingAttributeReferenceExpressionElements getEvoMappingAttributeReferenceExpressionAccess() {
		return pEvoMappingAttributeReferenceExpression;
	}
	
	public ParserRule getEvoMappingAttributeReferenceExpressionRule() {
		return getEvoMappingAttributeReferenceExpressionAccess().getRule();
	}
	
	//EvoMappingValueExpression dw_expression::HyValueExpression:
	//	value=EvoMappingNumberValue;
	public EvoMappingValueExpressionElements getEvoMappingValueExpressionAccess() {
		return pEvoMappingValueExpression;
	}
	
	public ParserRule getEvoMappingValueExpressionRule() {
		return getEvoMappingValueExpressionAccess().getRule();
	}
	
	//EvoMappingBooleanValueExpression dw_expression::HyBooleanValueExpression:
	//	{dw_expression::HyBooleanValueExpression} (value?='true' | 'false');
	public EvoMappingBooleanValueExpressionElements getEvoMappingBooleanValueExpressionAccess() {
		return pEvoMappingBooleanValueExpression;
	}
	
	public ParserRule getEvoMappingBooleanValueExpressionRule() {
		return getEvoMappingBooleanValueExpressionAccess().getRule();
	}
	
	//EvoMappingNumberValue dw_data::HyNumberValue:
	//	value=INT;
	public EvoMappingNumberValueElements getEvoMappingNumberValueAccess() {
		return pEvoMappingNumberValue;
	}
	
	public ParserRule getEvoMappingNumberValueRule() {
		return getEvoMappingNumberValueAccess().getRule();
	}
	
	//EvoMappingBooleanValue dw_data::HyBooleanValue:
	//	{dw_data::HyBooleanValue} (value?='true' | 'false');
	public EvoMappingBooleanValueElements getEvoMappingBooleanValueAccess() {
		return pEvoMappingBooleanValue;
	}
	
	public ParserRule getEvoMappingBooleanValueRule() {
		return getEvoMappingBooleanValueAccess().getRule();
	}
	
	//EvoMappingEnumValue dw_data::HyEnumValue:
	//	"enum:" ^enum=[dw_data::HyEnum|QualifiedName] "." enumLiteral=[dw_data::HyEnumLiteral|QualifiedName];
	public EvoMappingEnumValueElements getEvoMappingEnumValueAccess() {
		return pEvoMappingEnumValue;
	}
	
	public ParserRule getEvoMappingEnumValueRule() {
		return getEvoMappingEnumValueAccess().getRule();
	}
	
	//EvoMappingEnum dw_data::HyEnum:
	//	"Enum(" name=ID "," (literals+=EvoMappingEnumLiteral (',' literals+=EvoMappingEnumLiteral)*);
	public EvoMappingEnumElements getEvoMappingEnumAccess() {
		return pEvoMappingEnum;
	}
	
	public ParserRule getEvoMappingEnumRule() {
		return getEvoMappingEnumAccess().getRule();
	}
	
	//EvoMappingEnumLiteral dw_data::HyEnumLiteral:
	//	"EnumLiteral(" name=ID "," value=INT ")" ("[" (validSince=DATE "-" validUntil=DATE | validSince=DATE "-" | "eternity"
	//	"-" validUntil=DATE) "]")?;
	public EvoMappingEnumLiteralElements getEvoMappingEnumLiteralAccess() {
		return pEvoMappingEnumLiteral;
	}
	
	public ParserRule getEvoMappingEnumLiteralRule() {
		return getEvoMappingEnumLiteralAccess().getRule();
	}
	
	//EvoBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EvoBooleanElements getEvoBooleanAccess() {
		return pEvoBoolean;
	}
	
	public ParserRule getEvoBooleanRule() {
		return getEvoBooleanAccess().getRule();
	}
	
	//EvoMappingMimumumExpression dw_expression::HyMinimumExpression:
	//	"min(" operand=EvoMappingExpression ")";
	public EvoMappingMimumumExpressionElements getEvoMappingMimumumExpressionAccess() {
		return pEvoMappingMimumumExpression;
	}
	
	public ParserRule getEvoMappingMimumumExpressionRule() {
		return getEvoMappingMimumumExpressionAccess().getRule();
	}
	
	//EvoMappingMaximumExpression dw_expression::HyMaximumExpression:
	//	"max(" operand=EvoMappingExpression ")";
	public EvoMappingMaximumExpressionElements getEvoMappingMaximumExpressionAccess() {
		return pEvoMappingMaximumExpression;
	}
	
	public ParserRule getEvoMappingMaximumExpressionRule() {
		return getEvoMappingMaximumExpressionAccess().getRule();
	}
	
	//terminal DATE returns ecore::EDate:
	//	'0'..'9' '/' ('0' | '1') '0'..'9' '/' '0'..'9'*;
	public TerminalRule getDATERule() {
		return tDATE;
	}
	
	//EvoFormula evo_logic::EvoFormula:
	//	'formula'
	//	'{'
	//	'term' ':' term=EvoExpression ';'
	//	'}';
	public EvoLogicDslGrammarAccess.EvoFormulaElements getEvoFormulaAccess() {
		return gaEvoLogicDsl.getEvoFormulaAccess();
	}
	
	public ParserRule getEvoFormulaRule() {
		return getEvoFormulaAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ("." ID)*;
	public EvoLogicDslGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaEvoLogicDsl.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//EvoExpression dw_expression::HyExpression:
	//	EvoXOr;
	public EvoLogicDslGrammarAccess.EvoExpressionElements getEvoExpressionAccess() {
		return gaEvoLogicDsl.getEvoExpressionAccess();
	}
	
	public ParserRule getEvoExpressionRule() {
		return getEvoExpressionAccess().getRule();
	}
	
	//EvoXOr dw_expression::HyExpression:
	//	EvoOr ({EvoXOr.operand1=current} 'xor' operand2=EvoOr)*;
	public EvoLogicDslGrammarAccess.EvoXOrElements getEvoXOrAccess() {
		return gaEvoLogicDsl.getEvoXOrAccess();
	}
	
	public ParserRule getEvoXOrRule() {
		return getEvoXOrAccess().getRule();
	}
	
	//EvoOr dw_expression::HyExpression:
	//	EvoAnd ({dw_expression::HyOrExpression.operand1=current} '||' operand2=EvoAnd)*;
	public EvoLogicDslGrammarAccess.EvoOrElements getEvoOrAccess() {
		return gaEvoLogicDsl.getEvoOrAccess();
	}
	
	public ParserRule getEvoOrRule() {
		return getEvoOrAccess().getRule();
	}
	
	//EvoAnd dw_expression::HyExpression:
	//	EvoEqual ({dw_expression::HyAndExpression.operand1=current} '&&' operand2=EvoEqual)*;
	public EvoLogicDslGrammarAccess.EvoAndElements getEvoAndAccess() {
		return gaEvoLogicDsl.getEvoAndAccess();
	}
	
	public ParserRule getEvoAndRule() {
		return getEvoAndAccess().getRule();
	}
	
	//EvoEqual dw_expression::HyExpression:
	//	EvoUnequal ({dw_expression::HyEqualExpression.operand1=current} '==' operand2=EvoUnequalSize)*;
	public EvoLogicDslGrammarAccess.EvoEqualElements getEvoEqualAccess() {
		return gaEvoLogicDsl.getEvoEqualAccess();
	}
	
	public ParserRule getEvoEqualRule() {
		return getEvoEqualAccess().getRule();
	}
	
	//EvoUnequalSize dw_expression::HyExpression:
	//	EvoUnequal | EvoSize;
	public EvoLogicDslGrammarAccess.EvoUnequalSizeElements getEvoUnequalSizeAccess() {
		return gaEvoLogicDsl.getEvoUnequalSizeAccess();
	}
	
	public ParserRule getEvoUnequalSizeRule() {
		return getEvoUnequalSizeAccess().getRule();
	}
	
	//EvoUnequal dw_expression::HyExpression:
	//	EvoImplication ({dw_expression::HyNotEqualExpression.operand1=current} '!=' operand2=EvoImplicationSize)*;
	public EvoLogicDslGrammarAccess.EvoUnequalElements getEvoUnequalAccess() {
		return gaEvoLogicDsl.getEvoUnequalAccess();
	}
	
	public ParserRule getEvoUnequalRule() {
		return getEvoUnequalAccess().getRule();
	}
	
	//EvoImplicationSize dw_expression::HyExpression:
	//	EvoImplication | EvoSize;
	public EvoLogicDslGrammarAccess.EvoImplicationSizeElements getEvoImplicationSizeAccess() {
		return gaEvoLogicDsl.getEvoImplicationSizeAccess();
	}
	
	public ParserRule getEvoImplicationSizeRule() {
		return getEvoImplicationSizeAccess().getRule();
	}
	
	//EvoImplication dw_expression::HyExpression:
	//	EvoBiconditional ({dw_expression::HyImpliesExpression.operand1=current} '=>' operand2=EvoBiconditionalSize)*;
	public EvoLogicDslGrammarAccess.EvoImplicationElements getEvoImplicationAccess() {
		return gaEvoLogicDsl.getEvoImplicationAccess();
	}
	
	public ParserRule getEvoImplicationRule() {
		return getEvoImplicationAccess().getRule();
	}
	
	//EvoBiconditionalSize dw_expression::HyExpression:
	//	EvoBiconditional | EvoSize;
	public EvoLogicDslGrammarAccess.EvoBiconditionalSizeElements getEvoBiconditionalSizeAccess() {
		return gaEvoLogicDsl.getEvoBiconditionalSizeAccess();
	}
	
	public ParserRule getEvoBiconditionalSizeRule() {
		return getEvoBiconditionalSizeAccess().getRule();
	}
	
	//EvoBiconditional dw_expression::HyExpression:
	//	EvoSetInclusion ({evo_logic::EvoBinaryExpression.operand1=current} '<=>' operand2=EvoSetInclusionSize)*;
	public EvoLogicDslGrammarAccess.EvoBiconditionalElements getEvoBiconditionalAccess() {
		return gaEvoLogicDsl.getEvoBiconditionalAccess();
	}
	
	public ParserRule getEvoBiconditionalRule() {
		return getEvoBiconditionalAccess().getRule();
	}
	
	//EvoSetInclusionSize dw_expression::HyExpression:
	//	EvoSetInclusion | EvoSize;
	public EvoLogicDslGrammarAccess.EvoSetInclusionSizeElements getEvoSetInclusionSizeAccess() {
		return gaEvoLogicDsl.getEvoSetInclusionSizeAccess();
	}
	
	public ParserRule getEvoSetInclusionSizeRule() {
		return getEvoSetInclusionSizeAccess().getRule();
	}
	
	//EvoSetInclusion dw_expression::HyExpression:
	//	EvoSetIntersection ({EvoSetInclusion.operand1=current} 'inclusion' operand2=EvoSetIntersection)*;
	public EvoLogicDslGrammarAccess.EvoSetInclusionElements getEvoSetInclusionAccess() {
		return gaEvoLogicDsl.getEvoSetInclusionAccess();
	}
	
	public ParserRule getEvoSetInclusionRule() {
		return getEvoSetInclusionAccess().getRule();
	}
	
	//EvoSetIntersection dw_expression::HyExpression:
	//	EvoSetUnion ({evo_logic::EvoSetIntersection.operand1=current} 'intersection' operand2=EvoSetUnion)*;
	public EvoLogicDslGrammarAccess.EvoSetIntersectionElements getEvoSetIntersectionAccess() {
		return gaEvoLogicDsl.getEvoSetIntersectionAccess();
	}
	
	public ParserRule getEvoSetIntersectionRule() {
		return getEvoSetIntersectionAccess().getRule();
	}
	
	//EvoSetUnion dw_expression::HyExpression:
	//	EvoSetDifference ({evo_logic::EvoSetUnion.operand1=current} 'union' operand2=EvoSetDifference)*;
	public EvoLogicDslGrammarAccess.EvoSetUnionElements getEvoSetUnionAccess() {
		return gaEvoLogicDsl.getEvoSetUnionAccess();
	}
	
	public ParserRule getEvoSetUnionRule() {
		return getEvoSetUnionAccess().getRule();
	}
	
	//EvoSetDifference dw_expression::HyExpression:
	//	EvoSetSymmetricDifference ({evo_logic::EvoSetDifference.operand1=current} 'difference'
	//	operand2=EvoSetSymmetricDifference)*;
	public EvoLogicDslGrammarAccess.EvoSetDifferenceElements getEvoSetDifferenceAccess() {
		return gaEvoLogicDsl.getEvoSetDifferenceAccess();
	}
	
	public ParserRule getEvoSetDifferenceRule() {
		return getEvoSetDifferenceAccess().getRule();
	}
	
	//EvoSetSymmetricDifference dw_expression::HyExpression:
	//	EvoSetCartesianProduct ({evo_logic::EvoSetSymmetricDifference.operand1=current} 'symmetric_difference'
	//	operand2=EvoSetCartesianProduct)*;
	public EvoLogicDslGrammarAccess.EvoSetSymmetricDifferenceElements getEvoSetSymmetricDifferenceAccess() {
		return gaEvoLogicDsl.getEvoSetSymmetricDifferenceAccess();
	}
	
	public ParserRule getEvoSetSymmetricDifferenceRule() {
		return getEvoSetSymmetricDifferenceAccess().getRule();
	}
	
	//EvoSetCartesianProduct dw_expression::HyExpression:
	//	EvoElementOf ({evo_logic::EvoSetCartesianProduct.operand1=current} 'x' operand2=EvoElementOf)*;
	public EvoLogicDslGrammarAccess.EvoSetCartesianProductElements getEvoSetCartesianProductAccess() {
		return gaEvoLogicDsl.getEvoSetCartesianProductAccess();
	}
	
	public ParserRule getEvoSetCartesianProductRule() {
		return getEvoSetCartesianProductAccess().getRule();
	}
	
	//EvoSetCardinality dw_expression::HyExpression:
	//	{evo_logic::EvoSetCardinality} ('|' operand=EvoExpression '|' | 'size' '(' operand=EvoExpression ')');
	public EvoLogicDslGrammarAccess.EvoSetCardinalityElements getEvoSetCardinalityAccess() {
		return gaEvoLogicDsl.getEvoSetCardinalityAccess();
	}
	
	public ParserRule getEvoSetCardinalityRule() {
		return getEvoSetCardinalityAccess().getRule();
	}
	
	//EvoElementOf dw_expression::HyExpression:
	//	EvoTerminal ({evo_logic::EvoElementOf.operand1=current} 'elementOf' operand2=(EvoTerminal | EvoAllMappingTerminal |
	//	EvoAllConfigurationTerminal))*;
	public EvoLogicDslGrammarAccess.EvoElementOfElements getEvoElementOfAccess() {
		return gaEvoLogicDsl.getEvoElementOfAccess();
	}
	
	public ParserRule getEvoElementOfRule() {
		return getEvoElementOfAccess().getRule();
	}
	
	//EvoForAll evo_logic::EvoForAll:
	//	'forAll' '('
	//	boundedVariables+=EvoVariableTerm (',' boundedVariables+=EvoVariableTerm)* ':'
	//	operand=EvoExpression
	//	')';
	public EvoLogicDslGrammarAccess.EvoForAllElements getEvoForAllAccess() {
		return gaEvoLogicDsl.getEvoForAllAccess();
	}
	
	public ParserRule getEvoForAllRule() {
		return getEvoForAllAccess().getRule();
	}
	
	//EvoExists evo_logic::EvoExist:
	//	'exists' '('
	//	boundedVariables+=EvoVariableTerm ':'
	//	operand=EvoExpression
	//	')';
	public EvoLogicDslGrammarAccess.EvoExistsElements getEvoExistsAccess() {
		return gaEvoLogicDsl.getEvoExistsAccess();
	}
	
	public ParserRule getEvoExistsRule() {
		return getEvoExistsAccess().getRule();
	}
	
	//EvoNot dw_expression::HyNotExpression:
	//	'not' '(' operand=EvoExpression ')' | '!' operand=EvoVariableTerm;
	public EvoLogicDslGrammarAccess.EvoNotElements getEvoNotAccess() {
		return gaEvoLogicDsl.getEvoNotAccess();
	}
	
	public ParserRule getEvoNotRule() {
		return getEvoNotAccess().getRule();
	}
	
	//EvoSatisfiable dw_expression::HyExpression:
	//	{EvoSatisfiable} 'satisfiable' '(' variables+=(EvoSetVariable | EvoApplicationConstraintTerm) (','
	//	variables+=(EvoSetVariable | EvoApplicationConstraintTerm))* ')';
	public EvoLogicDslGrammarAccess.EvoSatisfiableElements getEvoSatisfiableAccess() {
		return gaEvoLogicDsl.getEvoSatisfiableAccess();
	}
	
	public ParserRule getEvoSatisfiableRule() {
		return getEvoSatisfiableAccess().getRule();
	}
	
	//EvoTerminal dw_expression::HyExpression:
	//	EvoVariableTerm | EvoSetTerm | EvoApplicationConstraintTerm | EvoForAll | EvoExists | EvoNot | EvoFeatureType |
	//	EvoGroupType | EvoSetCardinality | EvoChildrenOf | EvoParentOf | EvoSiblingsOf | EvoSatisfiable |
	//	'(' EvoXOr ')';
	public EvoLogicDslGrammarAccess.EvoTerminalElements getEvoTerminalAccess() {
		return gaEvoLogicDsl.getEvoTerminalAccess();
	}
	
	public ParserRule getEvoTerminalRule() {
		return getEvoTerminalAccess().getRule();
	}
	
	//EvoAllMappingTerminal dw_expression::HyExpression:
	//	{evo_logic::EvoAllMappings} 'All_Mappings';
	public EvoLogicDslGrammarAccess.EvoAllMappingTerminalElements getEvoAllMappingTerminalAccess() {
		return gaEvoLogicDsl.getEvoAllMappingTerminalAccess();
	}
	
	public ParserRule getEvoAllMappingTerminalRule() {
		return getEvoAllMappingTerminalAccess().getRule();
	}
	
	//EvoAllConfigurationTerminal dw_expression::HyExpression:
	//	{evo_logic::EvoAllConfigurations} 'All_Configurations';
	public EvoLogicDslGrammarAccess.EvoAllConfigurationTerminalElements getEvoAllConfigurationTerminalAccess() {
		return gaEvoLogicDsl.getEvoAllConfigurationTerminalAccess();
	}
	
	public ParserRule getEvoAllConfigurationTerminalRule() {
		return getEvoAllConfigurationTerminalAccess().getRule();
	}
	
	//EvoSize dw_expression::HyExpression:
	//	{EvoSize} size=INT;
	public EvoLogicDslGrammarAccess.EvoSizeElements getEvoSizeAccess() {
		return gaEvoLogicDsl.getEvoSizeAccess();
	}
	
	public ParserRule getEvoSizeRule() {
		return getEvoSizeAccess().getRule();
	}
	
	//enum EvoVariableType returns evo_variable::EvoVariableType:
	//	EvoIdentifier='@ident' |
	//	EvoSource='@pre' |
	//	EvoTarget='@post';
	public EvoLogicDslGrammarAccess.EvoVariableTypeElements getEvoVariableTypeAccess() {
		return gaEvoLogicDsl.getEvoVariableTypeAccess();
	}
	
	public EnumRule getEvoVariableTypeRule() {
		return getEvoVariableTypeAccess().getRule();
	}
	
	//EvoVariableTerm evo_logic::EvoVariableTerm:
	//	variable=[evo_variable::EvoVariable|QualifiedName] type=EvoVariableType?;
	public EvoLogicDslGrammarAccess.EvoVariableTermElements getEvoVariableTermAccess() {
		return gaEvoLogicDsl.getEvoVariableTermAccess();
	}
	
	public ParserRule getEvoVariableTermRule() {
		return getEvoVariableTermAccess().getRule();
	}
	
	//EvoApplicationConstraintTerm evo_logic::EvoVariableTerm:
	//	'AC' '(' variable=[evo_variable::EvoMappingVariable|QualifiedName] ')';
	public EvoLogicDslGrammarAccess.EvoApplicationConstraintTermElements getEvoApplicationConstraintTermAccess() {
		return gaEvoLogicDsl.getEvoApplicationConstraintTermAccess();
	}
	
	public ParserRule getEvoApplicationConstraintTermRule() {
		return getEvoApplicationConstraintTermAccess().getRule();
	}
	
	//EvoFeatureType dw_expression::HyExpression:
	//	{evo_logic::EvoFeatureType} 'featureType' ('(' variables+=EvoVariableTerm (',' variables+=EvoVariableTerm)* ')') '=='
	//	type=HyFeatureTypeEnum;
	public EvoLogicDslGrammarAccess.EvoFeatureTypeElements getEvoFeatureTypeAccess() {
		return gaEvoLogicDsl.getEvoFeatureTypeAccess();
	}
	
	public ParserRule getEvoFeatureTypeRule() {
		return getEvoFeatureTypeAccess().getRule();
	}
	
	//enum HyFeatureTypeEnum returns dw_feature::HyFeatureTypeEnum:
	//	OPTIONAL='optional' | MANDATORY='mandatory';
	public EvoLogicDslGrammarAccess.HyFeatureTypeEnumElements getHyFeatureTypeEnumAccess() {
		return gaEvoLogicDsl.getHyFeatureTypeEnumAccess();
	}
	
	public EnumRule getHyFeatureTypeEnumRule() {
		return getHyFeatureTypeEnumAccess().getRule();
	}
	
	//EvoGroupType dw_expression::HyExpression:
	//	{EvoGroupType} 'groupType' ('(' variables+=EvoGroupTerm (',' variables+=EvoGroupTerm)* ')') '=='
	//	type=HyGroupTypeEnum;
	public EvoLogicDslGrammarAccess.EvoGroupTypeElements getEvoGroupTypeAccess() {
		return gaEvoLogicDsl.getEvoGroupTypeAccess();
	}
	
	public ParserRule getEvoGroupTypeRule() {
		return getEvoGroupTypeAccess().getRule();
	}
	
	//EvoGroupTerm evo_logic::EvoVariableTerm:
	//	variable=[evo_variable::EvoGroupVariable|QualifiedName] type=EvoVariableType?;
	public EvoLogicDslGrammarAccess.EvoGroupTermElements getEvoGroupTermAccess() {
		return gaEvoLogicDsl.getEvoGroupTermAccess();
	}
	
	public ParserRule getEvoGroupTermRule() {
		return getEvoGroupTermAccess().getRule();
	}
	
	//enum HyGroupTypeEnum returns dw_feature::HyGroupTypeEnum:
	//	AND='and' | OR='or' | ALTERNATIVE='alternative';
	public EvoLogicDslGrammarAccess.HyGroupTypeEnumElements getHyGroupTypeEnumAccess() {
		return gaEvoLogicDsl.getHyGroupTypeEnumAccess();
	}
	
	public EnumRule getHyGroupTypeEnumRule() {
		return getHyGroupTypeEnumAccess().getRule();
	}
	
	//EvoSetTerm:
	//	'{' variables+=EvoSetVariable (',' variables+=EvoSetVariable)* '}';
	public EvoLogicDslGrammarAccess.EvoSetTermElements getEvoSetTermAccess() {
		return gaEvoLogicDsl.getEvoSetTermAccess();
	}
	
	public ParserRule getEvoSetTermRule() {
		return getEvoSetTermAccess().getRule();
	}
	
	//EvoSetVariable dw_expression::HyExpression:
	//	EvoVariableTerm | EvoSetTerm | EvoNot;
	public EvoLogicDslGrammarAccess.EvoSetVariableElements getEvoSetVariableAccess() {
		return gaEvoLogicDsl.getEvoSetVariableAccess();
	}
	
	public ParserRule getEvoSetVariableRule() {
		return getEvoSetVariableAccess().getRule();
	}
	
	//EvoParentOf:
	//	'parentOf' '(' variable=EvoVariableTerm ')';
	public EvoLogicDslGrammarAccess.EvoParentOfElements getEvoParentOfAccess() {
		return gaEvoLogicDsl.getEvoParentOfAccess();
	}
	
	public ParserRule getEvoParentOfRule() {
		return getEvoParentOfAccess().getRule();
	}
	
	//EvoSiblingsOf:
	//	'sibilingsOf' '(' variable=EvoVariableTerm ')';
	public EvoLogicDslGrammarAccess.EvoSiblingsOfElements getEvoSiblingsOfAccess() {
		return gaEvoLogicDsl.getEvoSiblingsOfAccess();
	}
	
	public ParserRule getEvoSiblingsOfRule() {
		return getEvoSiblingsOfAccess().getRule();
	}
	
	//EvoChildrenOf:
	//	'childrenOf' '(' variable=EvoVariableTerm ')';
	public EvoLogicDslGrammarAccess.EvoChildrenOfElements getEvoChildrenOfAccess() {
		return gaEvoLogicDsl.getEvoChildrenOfAccess();
	}
	
	public ParserRule getEvoChildrenOfRule() {
		return getEvoChildrenOfAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
