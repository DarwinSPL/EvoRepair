/*
 * generated by Xtext 2.12.0
 */
package de.evorepair.feature.expression.serializer;

import com.google.inject.Inject;
import de.evorepair.feature.expression.evo_expression_dsl.Evo_expression_dslPackage;
import de.evorepair.feature.expression.evo_expression_dsl.GrammarEntry;
import de.evorepair.feature.expression.services.EvoExpressionDslGrammarAccess;
import de.evorepair.logic.evo_logic_dsl.EvoChildrenOf;
import de.evorepair.logic.evo_logic_dsl.EvoGroupType;
import de.evorepair.logic.evo_logic_dsl.EvoParentOf;
import de.evorepair.logic.evo_logic_dsl.EvoSatisfiable;
import de.evorepair.logic.evo_logic_dsl.EvoSetInclusion;
import de.evorepair.logic.evo_logic_dsl.EvoSetTerm;
import de.evorepair.logic.evo_logic_dsl.EvoSiblingsOf;
import de.evorepair.logic.evo_logic_dsl.EvoSize;
import de.evorepair.logic.evo_logic_dsl.EvoXOr;
import de.evorepair.logic.evo_logic_dsl.Evo_logic_dslPackage;
import de.evorepair.logic.evologic.EvoAllConfigurations;
import de.evorepair.logic.evologic.EvoAllMappings;
import de.evorepair.logic.evologic.EvoBinaryExpression;
import de.evorepair.logic.evologic.EvoElementOf;
import de.evorepair.logic.evologic.EvoExist;
import de.evorepair.logic.evologic.EvoFeatureType;
import de.evorepair.logic.evologic.EvoForAll;
import de.evorepair.logic.evologic.EvoFormula;
import de.evorepair.logic.evologic.EvoLogicPackage;
import de.evorepair.logic.evologic.EvoSetCardinality;
import de.evorepair.logic.evologic.EvoSetCartesianProduct;
import de.evorepair.logic.evologic.EvoSetDifference;
import de.evorepair.logic.evologic.EvoSetIntersection;
import de.evorepair.logic.evologic.EvoSetSymmetricDifference;
import de.evorepair.logic.evologic.EvoSetUnion;
import de.evorepair.logic.evologic.EvoVariableTerm;
import de.evorepair.logic.serializer.EvoLogicDslSemanticSequencer;
import eu.hyvar.dataValues.HyDataValuesPackage;
import eu.hyvar.dataValues.HyNumberValue;
import eu.hyvar.feature.expression.HyAdditionExpression;
import eu.hyvar.feature.expression.HyAndExpression;
import eu.hyvar.feature.expression.HyAttributeReferenceExpression;
import eu.hyvar.feature.expression.HyBooleanValueExpression;
import eu.hyvar.feature.expression.HyConditionalFeatureReferenceExpression;
import eu.hyvar.feature.expression.HyContextInformationReferenceExpression;
import eu.hyvar.feature.expression.HyDivisionExpression;
import eu.hyvar.feature.expression.HyEqualExpression;
import eu.hyvar.feature.expression.HyEquivalenceExpression;
import eu.hyvar.feature.expression.HyExpressionPackage;
import eu.hyvar.feature.expression.HyFeatureReferenceExpression;
import eu.hyvar.feature.expression.HyGreaterExpression;
import eu.hyvar.feature.expression.HyGreaterOrEqualExpression;
import eu.hyvar.feature.expression.HyIfPossibleExpression;
import eu.hyvar.feature.expression.HyImpliesExpression;
import eu.hyvar.feature.expression.HyLessExpression;
import eu.hyvar.feature.expression.HyLessOrEqualExpression;
import eu.hyvar.feature.expression.HyMaximumExpression;
import eu.hyvar.feature.expression.HyMinimumExpression;
import eu.hyvar.feature.expression.HyModuloExpression;
import eu.hyvar.feature.expression.HyMultiplicationExpression;
import eu.hyvar.feature.expression.HyNegationExpression;
import eu.hyvar.feature.expression.HyNestedExpression;
import eu.hyvar.feature.expression.HyNotEqualExpression;
import eu.hyvar.feature.expression.HyNotExpression;
import eu.hyvar.feature.expression.HyOrExpression;
import eu.hyvar.feature.expression.HyRelativeVersionRestriction;
import eu.hyvar.feature.expression.HySubtractionExpression;
import eu.hyvar.feature.expression.HyValueExpression;
import eu.hyvar.feature.expression.HyVersionRangeRestriction;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class EvoExpressionDslSemanticSequencer extends EvoLogicDslSemanticSequencer {

	@Inject
	private EvoExpressionDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == HyDataValuesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HyDataValuesPackage.HY_NUMBER_VALUE:
				sequence_EvoMappingNumberValue(context, (HyNumberValue) semanticObject); 
				return; 
			}
		else if (epackage == Evo_expression_dslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Evo_expression_dslPackage.GRAMMAR_ENTRY:
				sequence_GrammarEntry(context, (GrammarEntry) semanticObject); 
				return; 
			}
		else if (epackage == Evo_logic_dslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Evo_logic_dslPackage.EVO_CHILDREN_OF:
				sequence_EvoChildrenOf(context, (EvoChildrenOf) semanticObject); 
				return; 
			case Evo_logic_dslPackage.EVO_GROUP_TYPE:
				sequence_EvoGroupType(context, (EvoGroupType) semanticObject); 
				return; 
			case Evo_logic_dslPackage.EVO_PARENT_OF:
				sequence_EvoParentOf(context, (EvoParentOf) semanticObject); 
				return; 
			case Evo_logic_dslPackage.EVO_SATISFIABLE:
				sequence_EvoSatisfiable(context, (EvoSatisfiable) semanticObject); 
				return; 
			case Evo_logic_dslPackage.EVO_SET_INCLUSION:
				sequence_EvoSetInclusion(context, (EvoSetInclusion) semanticObject); 
				return; 
			case Evo_logic_dslPackage.EVO_SET_TERM:
				sequence_EvoSetTerm(context, (EvoSetTerm) semanticObject); 
				return; 
			case Evo_logic_dslPackage.EVO_SIBLINGS_OF:
				sequence_EvoSiblingsOf(context, (EvoSiblingsOf) semanticObject); 
				return; 
			case Evo_logic_dslPackage.EVO_SIZE:
				sequence_EvoSize(context, (EvoSize) semanticObject); 
				return; 
			case Evo_logic_dslPackage.EVO_XOR:
				sequence_EvoXOr(context, (EvoXOr) semanticObject); 
				return; 
			}
		else if (epackage == EvoLogicPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EvoLogicPackage.EVO_ALL_CONFIGURATIONS:
				sequence_EvoAllConfigurationTerminal(context, (EvoAllConfigurations) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_ALL_MAPPINGS:
				sequence_EvoAllMappingTerminal(context, (EvoAllMappings) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_BINARY_EXPRESSION:
				sequence_EvoBiconditional(context, (EvoBinaryExpression) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_ELEMENT_OF:
				sequence_EvoElementOf(context, (EvoElementOf) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_EXIST:
				sequence_EvoExists(context, (EvoExist) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_FEATURE_TYPE:
				sequence_EvoFeatureType(context, (EvoFeatureType) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_FOR_ALL:
				sequence_EvoForAll(context, (EvoForAll) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_FORMULA:
				sequence_EvoFormula(context, (EvoFormula) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_SET_CARDINALITY:
				sequence_EvoSetCardinality(context, (EvoSetCardinality) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_SET_CARTESIAN_PRODUCT:
				sequence_EvoSetCartesianProduct(context, (EvoSetCartesianProduct) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_SET_DIFFERENCE:
				sequence_EvoSetDifference(context, (EvoSetDifference) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_SET_INTERSECTION:
				sequence_EvoSetIntersection(context, (EvoSetIntersection) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_SET_SYMMETRIC_DIFFERENCE:
				sequence_EvoSetSymmetricDifference(context, (EvoSetSymmetricDifference) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_SET_UNION:
				sequence_EvoSetUnion(context, (EvoSetUnion) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_VARIABLE_TERM:
				if (rule == grammarAccess.getEvoApplicationConstraintTermRule()) {
					sequence_EvoApplicationConstraintTerm(context, (EvoVariableTerm) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEvoExpressionRule()
						|| rule == grammarAccess.getEvoXOrRule()
						|| action == grammarAccess.getEvoXOrAccess().getEvoXOrOperand1Action_1_0()
						|| rule == grammarAccess.getEvoOrRule()
						|| action == grammarAccess.getEvoOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoAndRule()
						|| action == grammarAccess.getEvoAndAccess().getHyAndExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoEqualRule()
						|| action == grammarAccess.getEvoEqualAccess().getHyEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoUnequalSizeRule()
						|| rule == grammarAccess.getEvoUnequalRule()
						|| action == grammarAccess.getEvoUnequalAccess().getHyNotEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoImplicationSizeRule()
						|| rule == grammarAccess.getEvoImplicationRule()
						|| action == grammarAccess.getEvoImplicationAccess().getHyImpliesExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoBiconditionalSizeRule()
						|| rule == grammarAccess.getEvoBiconditionalRule()
						|| action == grammarAccess.getEvoBiconditionalAccess().getEvoBinaryExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetInclusionSizeRule()
						|| rule == grammarAccess.getEvoSetInclusionRule()
						|| action == grammarAccess.getEvoSetInclusionAccess().getEvoSetInclusionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetIntersectionRule()
						|| action == grammarAccess.getEvoSetIntersectionAccess().getEvoSetIntersectionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetUnionRule()
						|| action == grammarAccess.getEvoSetUnionAccess().getEvoSetUnionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetDifferenceRule()
						|| action == grammarAccess.getEvoSetDifferenceAccess().getEvoSetDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetSymmetricDifferenceRule()
						|| action == grammarAccess.getEvoSetSymmetricDifferenceAccess().getEvoSetSymmetricDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetCartesianProductRule()
						|| action == grammarAccess.getEvoSetCartesianProductAccess().getEvoSetCartesianProductOperand1Action_1_0()
						|| rule == grammarAccess.getEvoElementOfRule()
						|| action == grammarAccess.getEvoElementOfAccess().getEvoElementOfOperand1Action_1_0()
						|| rule == grammarAccess.getEvoTerminalRule()) {
					sequence_EvoApplicationConstraintTerm_EvoVariableTerm(context, (EvoVariableTerm) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEvoGroupTermRule()) {
					sequence_EvoGroupTerm(context, (EvoVariableTerm) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEvoMappingExpressionRule()
						|| rule == grammarAccess.getEvoMappingOrRule()
						|| action == grammarAccess.getEvoMappingOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingAndRule()
						|| action == grammarAccess.getEvoMappingAndAccess().getHyAndExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingEqualRule()
						|| action == grammarAccess.getEvoMappingEqualAccess().getHyEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingUnequalRule()
						|| action == grammarAccess.getEvoMappingUnequalAccess().getHyNotEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingImplicationRule()
						|| action == grammarAccess.getEvoMappingImplicationAccess().getHyImpliesExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingEquivalenceRule()
						|| action == grammarAccess.getEvoMappingEquivalenceAccess().getHyEquivalenceExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingLessExpressionRule()
						|| action == grammarAccess.getEvoMappingLessExpressionAccess().getHyLessExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingIfPossibleExpressionRule()
						|| action == grammarAccess.getEvoMappingIfPossibleExpressionAccess().getHyIfPossibleExpressionOperandsAction_1_1()
						|| rule == grammarAccess.getEvoMappingLessOrEqualExpressionRule()
						|| action == grammarAccess.getEvoMappingLessOrEqualExpressionAccess().getHyLessOrEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingGreaterExpressionRule()
						|| action == grammarAccess.getEvoMappingGreaterExpressionAccess().getHyGreaterExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingGreaterOrEqualExpressionRule()
						|| action == grammarAccess.getEvoMappingGreaterOrEqualExpressionAccess().getHyGreaterOrEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingSubtractionExpressionRule()
						|| action == grammarAccess.getEvoMappingSubtractionExpressionAccess().getHySubtractionExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingAdditionExpressionRule()
						|| action == grammarAccess.getEvoMappingAdditionExpressionAccess().getHyAdditionExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingModuloExpressionRule()
						|| action == grammarAccess.getEvoMappingModuloExpressionAccess().getHyModuloExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingMultiplicationExpressionRule()
						|| action == grammarAccess.getEvoMappingMultiplicationExpressionAccess().getHyMultiplicationExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingDivisionExpressionRule()
						|| action == grammarAccess.getEvoMappingDivisionExpressionAccess().getHyDivisionExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingTerminalRule()
						|| rule == grammarAccess.getEvoVariableTermRule()
						|| rule == grammarAccess.getEvoSetVariableRule()) {
					sequence_EvoVariableTerm(context, (EvoVariableTerm) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == HyExpressionPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HyExpressionPackage.HY_ADDITION_EXPRESSION:
				sequence_EvoMappingAdditionExpression(context, (HyAdditionExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_AND_EXPRESSION:
				if (rule == grammarAccess.getEvoExpressionRule()
						|| rule == grammarAccess.getEvoXOrRule()
						|| action == grammarAccess.getEvoXOrAccess().getEvoXOrOperand1Action_1_0()
						|| rule == grammarAccess.getEvoOrRule()
						|| action == grammarAccess.getEvoOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoAndRule()
						|| action == grammarAccess.getEvoAndAccess().getHyAndExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoEqualRule()
						|| action == grammarAccess.getEvoEqualAccess().getHyEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoUnequalSizeRule()
						|| rule == grammarAccess.getEvoUnequalRule()
						|| action == grammarAccess.getEvoUnequalAccess().getHyNotEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoImplicationSizeRule()
						|| rule == grammarAccess.getEvoImplicationRule()
						|| action == grammarAccess.getEvoImplicationAccess().getHyImpliesExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoBiconditionalSizeRule()
						|| rule == grammarAccess.getEvoBiconditionalRule()
						|| action == grammarAccess.getEvoBiconditionalAccess().getEvoBinaryExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetInclusionSizeRule()
						|| rule == grammarAccess.getEvoSetInclusionRule()
						|| action == grammarAccess.getEvoSetInclusionAccess().getEvoSetInclusionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetIntersectionRule()
						|| action == grammarAccess.getEvoSetIntersectionAccess().getEvoSetIntersectionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetUnionRule()
						|| action == grammarAccess.getEvoSetUnionAccess().getEvoSetUnionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetDifferenceRule()
						|| action == grammarAccess.getEvoSetDifferenceAccess().getEvoSetDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetSymmetricDifferenceRule()
						|| action == grammarAccess.getEvoSetSymmetricDifferenceAccess().getEvoSetSymmetricDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetCartesianProductRule()
						|| action == grammarAccess.getEvoSetCartesianProductAccess().getEvoSetCartesianProductOperand1Action_1_0()
						|| rule == grammarAccess.getEvoElementOfRule()
						|| action == grammarAccess.getEvoElementOfAccess().getEvoElementOfOperand1Action_1_0()
						|| rule == grammarAccess.getEvoTerminalRule()) {
					sequence_EvoAnd(context, (HyAndExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEvoMappingExpressionRule()
						|| rule == grammarAccess.getEvoMappingOrRule()
						|| action == grammarAccess.getEvoMappingOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingAndRule()
						|| action == grammarAccess.getEvoMappingAndAccess().getHyAndExpressionOperand1Action_1_0()) {
					sequence_EvoMappingAnd(context, (HyAndExpression) semanticObject); 
					return; 
				}
				else break;
			case HyExpressionPackage.HY_ATTRIBUTE_REFERENCE_EXPRESSION:
				sequence_EvoMappingAttributeReferenceExpression(context, (HyAttributeReferenceExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_BOOLEAN_VALUE_EXPRESSION:
				sequence_EvoMappingBooleanValueExpression(context, (HyBooleanValueExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_CONDITIONAL_FEATURE_REFERENCE_EXPRESSION:
				sequence_EvoMappingConditionalFeatureReferenceExpression(context, (HyConditionalFeatureReferenceExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_CONTEXT_INFORMATION_REFERENCE_EXPRESSION:
				sequence_EvoMappingContextInformationReferenceExpression(context, (HyContextInformationReferenceExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_DIVISION_EXPRESSION:
				sequence_EvoMappingDivisionExpression(context, (HyDivisionExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_EQUAL_EXPRESSION:
				if (rule == grammarAccess.getEvoExpressionRule()
						|| rule == grammarAccess.getEvoXOrRule()
						|| action == grammarAccess.getEvoXOrAccess().getEvoXOrOperand1Action_1_0()
						|| rule == grammarAccess.getEvoOrRule()
						|| action == grammarAccess.getEvoOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoAndRule()
						|| action == grammarAccess.getEvoAndAccess().getHyAndExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoEqualRule()
						|| action == grammarAccess.getEvoEqualAccess().getHyEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoUnequalSizeRule()
						|| rule == grammarAccess.getEvoUnequalRule()
						|| action == grammarAccess.getEvoUnequalAccess().getHyNotEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoImplicationSizeRule()
						|| rule == grammarAccess.getEvoImplicationRule()
						|| action == grammarAccess.getEvoImplicationAccess().getHyImpliesExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoBiconditionalSizeRule()
						|| rule == grammarAccess.getEvoBiconditionalRule()
						|| action == grammarAccess.getEvoBiconditionalAccess().getEvoBinaryExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetInclusionSizeRule()
						|| rule == grammarAccess.getEvoSetInclusionRule()
						|| action == grammarAccess.getEvoSetInclusionAccess().getEvoSetInclusionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetIntersectionRule()
						|| action == grammarAccess.getEvoSetIntersectionAccess().getEvoSetIntersectionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetUnionRule()
						|| action == grammarAccess.getEvoSetUnionAccess().getEvoSetUnionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetDifferenceRule()
						|| action == grammarAccess.getEvoSetDifferenceAccess().getEvoSetDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetSymmetricDifferenceRule()
						|| action == grammarAccess.getEvoSetSymmetricDifferenceAccess().getEvoSetSymmetricDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetCartesianProductRule()
						|| action == grammarAccess.getEvoSetCartesianProductAccess().getEvoSetCartesianProductOperand1Action_1_0()
						|| rule == grammarAccess.getEvoElementOfRule()
						|| action == grammarAccess.getEvoElementOfAccess().getEvoElementOfOperand1Action_1_0()
						|| rule == grammarAccess.getEvoTerminalRule()) {
					sequence_EvoEqual(context, (HyEqualExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEvoMappingExpressionRule()
						|| rule == grammarAccess.getEvoMappingOrRule()
						|| action == grammarAccess.getEvoMappingOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingAndRule()
						|| action == grammarAccess.getEvoMappingAndAccess().getHyAndExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingEqualRule()
						|| action == grammarAccess.getEvoMappingEqualAccess().getHyEqualExpressionOperand1Action_1_0()) {
					sequence_EvoMappingEqual(context, (HyEqualExpression) semanticObject); 
					return; 
				}
				else break;
			case HyExpressionPackage.HY_EQUIVALENCE_EXPRESSION:
				sequence_EvoMappingEquivalence(context, (HyEquivalenceExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_FEATURE_REFERENCE_EXPRESSION:
				sequence_EvoMappingFeatureReferenceExpression(context, (HyFeatureReferenceExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_GREATER_EXPRESSION:
				sequence_EvoMappingGreaterExpression(context, (HyGreaterExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_GREATER_OR_EQUAL_EXPRESSION:
				sequence_EvoMappingGreaterOrEqualExpression(context, (HyGreaterOrEqualExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_IF_POSSIBLE_EXPRESSION:
				sequence_EvoMappingIfPossibleExpression(context, (HyIfPossibleExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_IMPLIES_EXPRESSION:
				if (rule == grammarAccess.getEvoExpressionRule()
						|| rule == grammarAccess.getEvoXOrRule()
						|| action == grammarAccess.getEvoXOrAccess().getEvoXOrOperand1Action_1_0()
						|| rule == grammarAccess.getEvoOrRule()
						|| action == grammarAccess.getEvoOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoAndRule()
						|| action == grammarAccess.getEvoAndAccess().getHyAndExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoEqualRule()
						|| action == grammarAccess.getEvoEqualAccess().getHyEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoUnequalSizeRule()
						|| rule == grammarAccess.getEvoUnequalRule()
						|| action == grammarAccess.getEvoUnequalAccess().getHyNotEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoImplicationSizeRule()
						|| rule == grammarAccess.getEvoImplicationRule()
						|| action == grammarAccess.getEvoImplicationAccess().getHyImpliesExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoBiconditionalSizeRule()
						|| rule == grammarAccess.getEvoBiconditionalRule()
						|| action == grammarAccess.getEvoBiconditionalAccess().getEvoBinaryExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetInclusionSizeRule()
						|| rule == grammarAccess.getEvoSetInclusionRule()
						|| action == grammarAccess.getEvoSetInclusionAccess().getEvoSetInclusionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetIntersectionRule()
						|| action == grammarAccess.getEvoSetIntersectionAccess().getEvoSetIntersectionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetUnionRule()
						|| action == grammarAccess.getEvoSetUnionAccess().getEvoSetUnionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetDifferenceRule()
						|| action == grammarAccess.getEvoSetDifferenceAccess().getEvoSetDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetSymmetricDifferenceRule()
						|| action == grammarAccess.getEvoSetSymmetricDifferenceAccess().getEvoSetSymmetricDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetCartesianProductRule()
						|| action == grammarAccess.getEvoSetCartesianProductAccess().getEvoSetCartesianProductOperand1Action_1_0()
						|| rule == grammarAccess.getEvoElementOfRule()
						|| action == grammarAccess.getEvoElementOfAccess().getEvoElementOfOperand1Action_1_0()
						|| rule == grammarAccess.getEvoTerminalRule()) {
					sequence_EvoImplication(context, (HyImpliesExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEvoMappingExpressionRule()
						|| rule == grammarAccess.getEvoMappingOrRule()
						|| action == grammarAccess.getEvoMappingOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingAndRule()
						|| action == grammarAccess.getEvoMappingAndAccess().getHyAndExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingEqualRule()
						|| action == grammarAccess.getEvoMappingEqualAccess().getHyEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingUnequalRule()
						|| action == grammarAccess.getEvoMappingUnequalAccess().getHyNotEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingImplicationRule()
						|| action == grammarAccess.getEvoMappingImplicationAccess().getHyImpliesExpressionOperand1Action_1_0()) {
					sequence_EvoMappingImplication(context, (HyImpliesExpression) semanticObject); 
					return; 
				}
				else break;
			case HyExpressionPackage.HY_LESS_EXPRESSION:
				sequence_EvoMappingLessExpression(context, (HyLessExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_LESS_OR_EQUAL_EXPRESSION:
				sequence_EvoMappingLessOrEqualExpression(context, (HyLessOrEqualExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_MAXIMUM_EXPRESSION:
				sequence_EvoMappingMaximumExpression(context, (HyMaximumExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_MINIMUM_EXPRESSION:
				sequence_EvoMappingMimumumExpression(context, (HyMinimumExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_MODULO_EXPRESSION:
				sequence_EvoMappingModuloExpression(context, (HyModuloExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_MULTIPLICATION_EXPRESSION:
				sequence_EvoMappingMultiplicationExpression(context, (HyMultiplicationExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_NEGATION_EXPRESSION:
				sequence_EvoMappingNegation(context, (HyNegationExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_NESTED_EXPRESSION:
				sequence_EvoMappingNestedExpression(context, (HyNestedExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_NOT_EQUAL_EXPRESSION:
				if (rule == grammarAccess.getEvoMappingExpressionRule()
						|| rule == grammarAccess.getEvoMappingOrRule()
						|| action == grammarAccess.getEvoMappingOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingAndRule()
						|| action == grammarAccess.getEvoMappingAndAccess().getHyAndExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingEqualRule()
						|| action == grammarAccess.getEvoMappingEqualAccess().getHyEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingUnequalRule()
						|| action == grammarAccess.getEvoMappingUnequalAccess().getHyNotEqualExpressionOperand1Action_1_0()) {
					sequence_EvoMappingUnequal(context, (HyNotEqualExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEvoExpressionRule()
						|| rule == grammarAccess.getEvoXOrRule()
						|| action == grammarAccess.getEvoXOrAccess().getEvoXOrOperand1Action_1_0()
						|| rule == grammarAccess.getEvoOrRule()
						|| action == grammarAccess.getEvoOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoAndRule()
						|| action == grammarAccess.getEvoAndAccess().getHyAndExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoEqualRule()
						|| action == grammarAccess.getEvoEqualAccess().getHyEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoUnequalSizeRule()
						|| rule == grammarAccess.getEvoUnequalRule()
						|| action == grammarAccess.getEvoUnequalAccess().getHyNotEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoImplicationSizeRule()
						|| rule == grammarAccess.getEvoImplicationRule()
						|| action == grammarAccess.getEvoImplicationAccess().getHyImpliesExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoBiconditionalSizeRule()
						|| rule == grammarAccess.getEvoBiconditionalRule()
						|| action == grammarAccess.getEvoBiconditionalAccess().getEvoBinaryExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetInclusionSizeRule()
						|| rule == grammarAccess.getEvoSetInclusionRule()
						|| action == grammarAccess.getEvoSetInclusionAccess().getEvoSetInclusionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetIntersectionRule()
						|| action == grammarAccess.getEvoSetIntersectionAccess().getEvoSetIntersectionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetUnionRule()
						|| action == grammarAccess.getEvoSetUnionAccess().getEvoSetUnionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetDifferenceRule()
						|| action == grammarAccess.getEvoSetDifferenceAccess().getEvoSetDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetSymmetricDifferenceRule()
						|| action == grammarAccess.getEvoSetSymmetricDifferenceAccess().getEvoSetSymmetricDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetCartesianProductRule()
						|| action == grammarAccess.getEvoSetCartesianProductAccess().getEvoSetCartesianProductOperand1Action_1_0()
						|| rule == grammarAccess.getEvoElementOfRule()
						|| action == grammarAccess.getEvoElementOfAccess().getEvoElementOfOperand1Action_1_0()
						|| rule == grammarAccess.getEvoTerminalRule()) {
					sequence_EvoUnequal(context, (HyNotEqualExpression) semanticObject); 
					return; 
				}
				else break;
			case HyExpressionPackage.HY_NOT_EXPRESSION:
				if (rule == grammarAccess.getEvoMappingExpressionRule()
						|| rule == grammarAccess.getEvoMappingOrRule()
						|| action == grammarAccess.getEvoMappingOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingAndRule()
						|| action == grammarAccess.getEvoMappingAndAccess().getHyAndExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingEqualRule()
						|| action == grammarAccess.getEvoMappingEqualAccess().getHyEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingUnequalRule()
						|| action == grammarAccess.getEvoMappingUnequalAccess().getHyNotEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingImplicationRule()
						|| action == grammarAccess.getEvoMappingImplicationAccess().getHyImpliesExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingEquivalenceRule()
						|| action == grammarAccess.getEvoMappingEquivalenceAccess().getHyEquivalenceExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingLessExpressionRule()
						|| action == grammarAccess.getEvoMappingLessExpressionAccess().getHyLessExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingIfPossibleExpressionRule()
						|| action == grammarAccess.getEvoMappingIfPossibleExpressionAccess().getHyIfPossibleExpressionOperandsAction_1_1()
						|| rule == grammarAccess.getEvoMappingLessOrEqualExpressionRule()
						|| action == grammarAccess.getEvoMappingLessOrEqualExpressionAccess().getHyLessOrEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingGreaterExpressionRule()
						|| action == grammarAccess.getEvoMappingGreaterExpressionAccess().getHyGreaterExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingGreaterOrEqualExpressionRule()
						|| action == grammarAccess.getEvoMappingGreaterOrEqualExpressionAccess().getHyGreaterOrEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingSubtractionExpressionRule()
						|| action == grammarAccess.getEvoMappingSubtractionExpressionAccess().getHySubtractionExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingAdditionExpressionRule()
						|| action == grammarAccess.getEvoMappingAdditionExpressionAccess().getHyAdditionExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingModuloExpressionRule()
						|| action == grammarAccess.getEvoMappingModuloExpressionAccess().getHyModuloExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingMultiplicationExpressionRule()
						|| action == grammarAccess.getEvoMappingMultiplicationExpressionAccess().getHyMultiplicationExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingDivisionExpressionRule()
						|| action == grammarAccess.getEvoMappingDivisionExpressionAccess().getHyDivisionExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingTerminalRule()
						|| rule == grammarAccess.getEvoMappingNotRule()) {
					sequence_EvoMappingNot(context, (HyNotExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEvoExpressionRule()
						|| rule == grammarAccess.getEvoXOrRule()
						|| action == grammarAccess.getEvoXOrAccess().getEvoXOrOperand1Action_1_0()
						|| rule == grammarAccess.getEvoOrRule()
						|| action == grammarAccess.getEvoOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoAndRule()
						|| action == grammarAccess.getEvoAndAccess().getHyAndExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoEqualRule()
						|| action == grammarAccess.getEvoEqualAccess().getHyEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoUnequalSizeRule()
						|| rule == grammarAccess.getEvoUnequalRule()
						|| action == grammarAccess.getEvoUnequalAccess().getHyNotEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoImplicationSizeRule()
						|| rule == grammarAccess.getEvoImplicationRule()
						|| action == grammarAccess.getEvoImplicationAccess().getHyImpliesExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoBiconditionalSizeRule()
						|| rule == grammarAccess.getEvoBiconditionalRule()
						|| action == grammarAccess.getEvoBiconditionalAccess().getEvoBinaryExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetInclusionSizeRule()
						|| rule == grammarAccess.getEvoSetInclusionRule()
						|| action == grammarAccess.getEvoSetInclusionAccess().getEvoSetInclusionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetIntersectionRule()
						|| action == grammarAccess.getEvoSetIntersectionAccess().getEvoSetIntersectionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetUnionRule()
						|| action == grammarAccess.getEvoSetUnionAccess().getEvoSetUnionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetDifferenceRule()
						|| action == grammarAccess.getEvoSetDifferenceAccess().getEvoSetDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetSymmetricDifferenceRule()
						|| action == grammarAccess.getEvoSetSymmetricDifferenceAccess().getEvoSetSymmetricDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetCartesianProductRule()
						|| action == grammarAccess.getEvoSetCartesianProductAccess().getEvoSetCartesianProductOperand1Action_1_0()
						|| rule == grammarAccess.getEvoElementOfRule()
						|| action == grammarAccess.getEvoElementOfAccess().getEvoElementOfOperand1Action_1_0()
						|| rule == grammarAccess.getEvoNotRule()
						|| rule == grammarAccess.getEvoTerminalRule()
						|| rule == grammarAccess.getEvoSetVariableRule()) {
					sequence_EvoNot(context, (HyNotExpression) semanticObject); 
					return; 
				}
				else break;
			case HyExpressionPackage.HY_OR_EXPRESSION:
				if (rule == grammarAccess.getEvoMappingExpressionRule()
						|| rule == grammarAccess.getEvoMappingOrRule()
						|| action == grammarAccess.getEvoMappingOrAccess().getHyOrExpressionOperand1Action_1_0()) {
					sequence_EvoMappingOr(context, (HyOrExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEvoExpressionRule()
						|| rule == grammarAccess.getEvoXOrRule()
						|| action == grammarAccess.getEvoXOrAccess().getEvoXOrOperand1Action_1_0()
						|| rule == grammarAccess.getEvoOrRule()
						|| action == grammarAccess.getEvoOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoAndRule()
						|| action == grammarAccess.getEvoAndAccess().getHyAndExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoEqualRule()
						|| action == grammarAccess.getEvoEqualAccess().getHyEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoUnequalSizeRule()
						|| rule == grammarAccess.getEvoUnequalRule()
						|| action == grammarAccess.getEvoUnequalAccess().getHyNotEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoImplicationSizeRule()
						|| rule == grammarAccess.getEvoImplicationRule()
						|| action == grammarAccess.getEvoImplicationAccess().getHyImpliesExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoBiconditionalSizeRule()
						|| rule == grammarAccess.getEvoBiconditionalRule()
						|| action == grammarAccess.getEvoBiconditionalAccess().getEvoBinaryExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetInclusionSizeRule()
						|| rule == grammarAccess.getEvoSetInclusionRule()
						|| action == grammarAccess.getEvoSetInclusionAccess().getEvoSetInclusionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetIntersectionRule()
						|| action == grammarAccess.getEvoSetIntersectionAccess().getEvoSetIntersectionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetUnionRule()
						|| action == grammarAccess.getEvoSetUnionAccess().getEvoSetUnionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetDifferenceRule()
						|| action == grammarAccess.getEvoSetDifferenceAccess().getEvoSetDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetSymmetricDifferenceRule()
						|| action == grammarAccess.getEvoSetSymmetricDifferenceAccess().getEvoSetSymmetricDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetCartesianProductRule()
						|| action == grammarAccess.getEvoSetCartesianProductAccess().getEvoSetCartesianProductOperand1Action_1_0()
						|| rule == grammarAccess.getEvoElementOfRule()
						|| action == grammarAccess.getEvoElementOfAccess().getEvoElementOfOperand1Action_1_0()
						|| rule == grammarAccess.getEvoTerminalRule()) {
					sequence_EvoOr(context, (HyOrExpression) semanticObject); 
					return; 
				}
				else break;
			case HyExpressionPackage.HY_RELATIVE_VERSION_RESTRICTION:
				sequence_EvoMappingRelativeVersionRestriction(context, (HyRelativeVersionRestriction) semanticObject); 
				return; 
			case HyExpressionPackage.HY_SUBTRACTION_EXPRESSION:
				sequence_EvoMappingSubtractionExpression(context, (HySubtractionExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_VALUE_EXPRESSION:
				sequence_EvoMappingValueExpression(context, (HyValueExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_VERSION_RANGE_RESTRICTION:
				sequence_EvoMappingVersionRangeRestriction(context, (HyVersionRangeRestriction) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyAdditionExpression
	 *     EvoMappingOr returns HyAdditionExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyAdditionExpression
	 *     EvoMappingAnd returns HyAdditionExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyAdditionExpression
	 *     EvoMappingEqual returns HyAdditionExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HyAdditionExpression
	 *     EvoMappingUnequal returns HyAdditionExpression
	 *     EvoMappingUnequal.HyNotEqualExpression_1_0 returns HyAdditionExpression
	 *     EvoMappingImplication returns HyAdditionExpression
	 *     EvoMappingImplication.HyImpliesExpression_1_0 returns HyAdditionExpression
	 *     EvoMappingEquivalence returns HyAdditionExpression
	 *     EvoMappingEquivalence.HyEquivalenceExpression_1_0 returns HyAdditionExpression
	 *     EvoMappingLessExpression returns HyAdditionExpression
	 *     EvoMappingLessExpression.HyLessExpression_1_0 returns HyAdditionExpression
	 *     EvoMappingIfPossibleExpression returns HyAdditionExpression
	 *     EvoMappingIfPossibleExpression.HyIfPossibleExpression_1_1 returns HyAdditionExpression
	 *     EvoMappingLessOrEqualExpression returns HyAdditionExpression
	 *     EvoMappingLessOrEqualExpression.HyLessOrEqualExpression_1_0 returns HyAdditionExpression
	 *     EvoMappingGreaterExpression returns HyAdditionExpression
	 *     EvoMappingGreaterExpression.HyGreaterExpression_1_0 returns HyAdditionExpression
	 *     EvoMappingGreaterOrEqualExpression returns HyAdditionExpression
	 *     EvoMappingGreaterOrEqualExpression.HyGreaterOrEqualExpression_1_0 returns HyAdditionExpression
	 *     EvoMappingSubtractionExpression returns HyAdditionExpression
	 *     EvoMappingSubtractionExpression.HySubtractionExpression_1_0 returns HyAdditionExpression
	 *     EvoMappingAdditionExpression returns HyAdditionExpression
	 *     EvoMappingAdditionExpression.HyAdditionExpression_1_0 returns HyAdditionExpression
	 *
	 * Constraint:
	 *     (operand1=EvoMappingAdditionExpression_HyAdditionExpression_1_0 operand2=EvoMappingModuloExpression)
	 */
	protected void sequence_EvoMappingAdditionExpression(ISerializationContext context, HyAdditionExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingAdditionExpressionAccess().getHyAdditionExpressionOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoMappingAdditionExpressionAccess().getOperand2EvoMappingModuloExpressionParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyAndExpression
	 *     EvoMappingOr returns HyAndExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyAndExpression
	 *     EvoMappingAnd returns HyAndExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyAndExpression
	 *
	 * Constraint:
	 *     (operand1=EvoMappingAnd_HyAndExpression_1_0 operand2=EvoMappingEqual)
	 */
	protected void sequence_EvoMappingAnd(ISerializationContext context, HyAndExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingAndAccess().getHyAndExpressionOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoMappingAndAccess().getOperand2EvoMappingEqualParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyAttributeReferenceExpression
	 *     EvoMappingOr returns HyAttributeReferenceExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyAttributeReferenceExpression
	 *     EvoMappingAnd returns HyAttributeReferenceExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyAttributeReferenceExpression
	 *     EvoMappingEqual returns HyAttributeReferenceExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HyAttributeReferenceExpression
	 *     EvoMappingUnequal returns HyAttributeReferenceExpression
	 *     EvoMappingUnequal.HyNotEqualExpression_1_0 returns HyAttributeReferenceExpression
	 *     EvoMappingImplication returns HyAttributeReferenceExpression
	 *     EvoMappingImplication.HyImpliesExpression_1_0 returns HyAttributeReferenceExpression
	 *     EvoMappingEquivalence returns HyAttributeReferenceExpression
	 *     EvoMappingEquivalence.HyEquivalenceExpression_1_0 returns HyAttributeReferenceExpression
	 *     EvoMappingLessExpression returns HyAttributeReferenceExpression
	 *     EvoMappingLessExpression.HyLessExpression_1_0 returns HyAttributeReferenceExpression
	 *     EvoMappingIfPossibleExpression returns HyAttributeReferenceExpression
	 *     EvoMappingIfPossibleExpression.HyIfPossibleExpression_1_1 returns HyAttributeReferenceExpression
	 *     EvoMappingLessOrEqualExpression returns HyAttributeReferenceExpression
	 *     EvoMappingLessOrEqualExpression.HyLessOrEqualExpression_1_0 returns HyAttributeReferenceExpression
	 *     EvoMappingGreaterExpression returns HyAttributeReferenceExpression
	 *     EvoMappingGreaterExpression.HyGreaterExpression_1_0 returns HyAttributeReferenceExpression
	 *     EvoMappingGreaterOrEqualExpression returns HyAttributeReferenceExpression
	 *     EvoMappingGreaterOrEqualExpression.HyGreaterOrEqualExpression_1_0 returns HyAttributeReferenceExpression
	 *     EvoMappingSubtractionExpression returns HyAttributeReferenceExpression
	 *     EvoMappingSubtractionExpression.HySubtractionExpression_1_0 returns HyAttributeReferenceExpression
	 *     EvoMappingAdditionExpression returns HyAttributeReferenceExpression
	 *     EvoMappingAdditionExpression.HyAdditionExpression_1_0 returns HyAttributeReferenceExpression
	 *     EvoMappingModuloExpression returns HyAttributeReferenceExpression
	 *     EvoMappingModuloExpression.HyModuloExpression_1_0 returns HyAttributeReferenceExpression
	 *     EvoMappingMultiplicationExpression returns HyAttributeReferenceExpression
	 *     EvoMappingMultiplicationExpression.HyMultiplicationExpression_1_0 returns HyAttributeReferenceExpression
	 *     EvoMappingDivisionExpression returns HyAttributeReferenceExpression
	 *     EvoMappingDivisionExpression.HyDivisionExpression_1_0 returns HyAttributeReferenceExpression
	 *     EvoMappingTerminal returns HyAttributeReferenceExpression
	 *     EvoMappingAttributeReferenceExpression returns HyAttributeReferenceExpression
	 *
	 * Constraint:
	 *     (feature=[HyFeature|STRING] attribute=[HyFeatureAttribute|QualifiedName])
	 */
	protected void sequence_EvoMappingAttributeReferenceExpression(ISerializationContext context, HyAttributeReferenceExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_ATTRIBUTE_REFERENCE_EXPRESSION__FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_ATTRIBUTE_REFERENCE_EXPRESSION__FEATURE));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_ATTRIBUTE_REFERENCE_EXPRESSION__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_ATTRIBUTE_REFERENCE_EXPRESSION__ATTRIBUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingAttributeReferenceExpressionAccess().getFeatureHyFeatureSTRINGTerminalRuleCall_0_0_1(), semanticObject.eGet(HyExpressionPackage.Literals.HY_ATTRIBUTE_REFERENCE_EXPRESSION__FEATURE, false));
		feeder.accept(grammarAccess.getEvoMappingAttributeReferenceExpressionAccess().getAttributeHyFeatureAttributeQualifiedNameParserRuleCall_2_0_1(), semanticObject.eGet(HyExpressionPackage.Literals.HY_ATTRIBUTE_REFERENCE_EXPRESSION__ATTRIBUTE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyBooleanValueExpression
	 *     EvoMappingOr returns HyBooleanValueExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyBooleanValueExpression
	 *     EvoMappingAnd returns HyBooleanValueExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyBooleanValueExpression
	 *     EvoMappingEqual returns HyBooleanValueExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HyBooleanValueExpression
	 *     EvoMappingUnequal returns HyBooleanValueExpression
	 *     EvoMappingUnequal.HyNotEqualExpression_1_0 returns HyBooleanValueExpression
	 *     EvoMappingImplication returns HyBooleanValueExpression
	 *     EvoMappingImplication.HyImpliesExpression_1_0 returns HyBooleanValueExpression
	 *     EvoMappingEquivalence returns HyBooleanValueExpression
	 *     EvoMappingEquivalence.HyEquivalenceExpression_1_0 returns HyBooleanValueExpression
	 *     EvoMappingLessExpression returns HyBooleanValueExpression
	 *     EvoMappingLessExpression.HyLessExpression_1_0 returns HyBooleanValueExpression
	 *     EvoMappingIfPossibleExpression returns HyBooleanValueExpression
	 *     EvoMappingIfPossibleExpression.HyIfPossibleExpression_1_1 returns HyBooleanValueExpression
	 *     EvoMappingLessOrEqualExpression returns HyBooleanValueExpression
	 *     EvoMappingLessOrEqualExpression.HyLessOrEqualExpression_1_0 returns HyBooleanValueExpression
	 *     EvoMappingGreaterExpression returns HyBooleanValueExpression
	 *     EvoMappingGreaterExpression.HyGreaterExpression_1_0 returns HyBooleanValueExpression
	 *     EvoMappingGreaterOrEqualExpression returns HyBooleanValueExpression
	 *     EvoMappingGreaterOrEqualExpression.HyGreaterOrEqualExpression_1_0 returns HyBooleanValueExpression
	 *     EvoMappingSubtractionExpression returns HyBooleanValueExpression
	 *     EvoMappingSubtractionExpression.HySubtractionExpression_1_0 returns HyBooleanValueExpression
	 *     EvoMappingAdditionExpression returns HyBooleanValueExpression
	 *     EvoMappingAdditionExpression.HyAdditionExpression_1_0 returns HyBooleanValueExpression
	 *     EvoMappingModuloExpression returns HyBooleanValueExpression
	 *     EvoMappingModuloExpression.HyModuloExpression_1_0 returns HyBooleanValueExpression
	 *     EvoMappingMultiplicationExpression returns HyBooleanValueExpression
	 *     EvoMappingMultiplicationExpression.HyMultiplicationExpression_1_0 returns HyBooleanValueExpression
	 *     EvoMappingDivisionExpression returns HyBooleanValueExpression
	 *     EvoMappingDivisionExpression.HyDivisionExpression_1_0 returns HyBooleanValueExpression
	 *     EvoMappingTerminal returns HyBooleanValueExpression
	 *     EvoMappingBooleanValueExpression returns HyBooleanValueExpression
	 *
	 * Constraint:
	 *     value?='true'?
	 */
	protected void sequence_EvoMappingBooleanValueExpression(ISerializationContext context, HyBooleanValueExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingOr returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingAnd returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingEqual returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingUnequal returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingUnequal.HyNotEqualExpression_1_0 returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingImplication returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingImplication.HyImpliesExpression_1_0 returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingEquivalence returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingEquivalence.HyEquivalenceExpression_1_0 returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingLessExpression returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingLessExpression.HyLessExpression_1_0 returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingIfPossibleExpression returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingIfPossibleExpression.HyIfPossibleExpression_1_1 returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingLessOrEqualExpression returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingLessOrEqualExpression.HyLessOrEqualExpression_1_0 returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingGreaterExpression returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingGreaterExpression.HyGreaterExpression_1_0 returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingGreaterOrEqualExpression returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingGreaterOrEqualExpression.HyGreaterOrEqualExpression_1_0 returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingSubtractionExpression returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingSubtractionExpression.HySubtractionExpression_1_0 returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingAdditionExpression returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingAdditionExpression.HyAdditionExpression_1_0 returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingModuloExpression returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingModuloExpression.HyModuloExpression_1_0 returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingMultiplicationExpression returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingMultiplicationExpression.HyMultiplicationExpression_1_0 returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingDivisionExpression returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingDivisionExpression.HyDivisionExpression_1_0 returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingTerminal returns HyConditionalFeatureReferenceExpression
	 *     EvoMappingConditionalFeatureReferenceExpression returns HyConditionalFeatureReferenceExpression
	 *
	 * Constraint:
	 *     (feature=[HyFeature|QualifiedName] versionRestriction=EvoMappingVersionRestriction?)
	 */
	protected void sequence_EvoMappingConditionalFeatureReferenceExpression(ISerializationContext context, HyConditionalFeatureReferenceExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyContextInformationReferenceExpression
	 *     EvoMappingOr returns HyContextInformationReferenceExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyContextInformationReferenceExpression
	 *     EvoMappingAnd returns HyContextInformationReferenceExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyContextInformationReferenceExpression
	 *     EvoMappingEqual returns HyContextInformationReferenceExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HyContextInformationReferenceExpression
	 *     EvoMappingUnequal returns HyContextInformationReferenceExpression
	 *     EvoMappingUnequal.HyNotEqualExpression_1_0 returns HyContextInformationReferenceExpression
	 *     EvoMappingImplication returns HyContextInformationReferenceExpression
	 *     EvoMappingImplication.HyImpliesExpression_1_0 returns HyContextInformationReferenceExpression
	 *     EvoMappingEquivalence returns HyContextInformationReferenceExpression
	 *     EvoMappingEquivalence.HyEquivalenceExpression_1_0 returns HyContextInformationReferenceExpression
	 *     EvoMappingLessExpression returns HyContextInformationReferenceExpression
	 *     EvoMappingLessExpression.HyLessExpression_1_0 returns HyContextInformationReferenceExpression
	 *     EvoMappingIfPossibleExpression returns HyContextInformationReferenceExpression
	 *     EvoMappingIfPossibleExpression.HyIfPossibleExpression_1_1 returns HyContextInformationReferenceExpression
	 *     EvoMappingLessOrEqualExpression returns HyContextInformationReferenceExpression
	 *     EvoMappingLessOrEqualExpression.HyLessOrEqualExpression_1_0 returns HyContextInformationReferenceExpression
	 *     EvoMappingGreaterExpression returns HyContextInformationReferenceExpression
	 *     EvoMappingGreaterExpression.HyGreaterExpression_1_0 returns HyContextInformationReferenceExpression
	 *     EvoMappingGreaterOrEqualExpression returns HyContextInformationReferenceExpression
	 *     EvoMappingGreaterOrEqualExpression.HyGreaterOrEqualExpression_1_0 returns HyContextInformationReferenceExpression
	 *     EvoMappingSubtractionExpression returns HyContextInformationReferenceExpression
	 *     EvoMappingSubtractionExpression.HySubtractionExpression_1_0 returns HyContextInformationReferenceExpression
	 *     EvoMappingAdditionExpression returns HyContextInformationReferenceExpression
	 *     EvoMappingAdditionExpression.HyAdditionExpression_1_0 returns HyContextInformationReferenceExpression
	 *     EvoMappingModuloExpression returns HyContextInformationReferenceExpression
	 *     EvoMappingModuloExpression.HyModuloExpression_1_0 returns HyContextInformationReferenceExpression
	 *     EvoMappingMultiplicationExpression returns HyContextInformationReferenceExpression
	 *     EvoMappingMultiplicationExpression.HyMultiplicationExpression_1_0 returns HyContextInformationReferenceExpression
	 *     EvoMappingDivisionExpression returns HyContextInformationReferenceExpression
	 *     EvoMappingDivisionExpression.HyDivisionExpression_1_0 returns HyContextInformationReferenceExpression
	 *     EvoMappingTerminal returns HyContextInformationReferenceExpression
	 *     EvoMappingContextInformationReferenceExpression returns HyContextInformationReferenceExpression
	 *
	 * Constraint:
	 *     contextInformation=[HyContextualInformation|QualifiedName]
	 */
	protected void sequence_EvoMappingContextInformationReferenceExpression(ISerializationContext context, HyContextInformationReferenceExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_CONTEXT_INFORMATION_REFERENCE_EXPRESSION__CONTEXT_INFORMATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_CONTEXT_INFORMATION_REFERENCE_EXPRESSION__CONTEXT_INFORMATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingContextInformationReferenceExpressionAccess().getContextInformationHyContextualInformationQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(HyExpressionPackage.Literals.HY_CONTEXT_INFORMATION_REFERENCE_EXPRESSION__CONTEXT_INFORMATION, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyDivisionExpression
	 *     EvoMappingOr returns HyDivisionExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyDivisionExpression
	 *     EvoMappingAnd returns HyDivisionExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyDivisionExpression
	 *     EvoMappingEqual returns HyDivisionExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HyDivisionExpression
	 *     EvoMappingUnequal returns HyDivisionExpression
	 *     EvoMappingUnequal.HyNotEqualExpression_1_0 returns HyDivisionExpression
	 *     EvoMappingImplication returns HyDivisionExpression
	 *     EvoMappingImplication.HyImpliesExpression_1_0 returns HyDivisionExpression
	 *     EvoMappingEquivalence returns HyDivisionExpression
	 *     EvoMappingEquivalence.HyEquivalenceExpression_1_0 returns HyDivisionExpression
	 *     EvoMappingLessExpression returns HyDivisionExpression
	 *     EvoMappingLessExpression.HyLessExpression_1_0 returns HyDivisionExpression
	 *     EvoMappingIfPossibleExpression returns HyDivisionExpression
	 *     EvoMappingIfPossibleExpression.HyIfPossibleExpression_1_1 returns HyDivisionExpression
	 *     EvoMappingLessOrEqualExpression returns HyDivisionExpression
	 *     EvoMappingLessOrEqualExpression.HyLessOrEqualExpression_1_0 returns HyDivisionExpression
	 *     EvoMappingGreaterExpression returns HyDivisionExpression
	 *     EvoMappingGreaterExpression.HyGreaterExpression_1_0 returns HyDivisionExpression
	 *     EvoMappingGreaterOrEqualExpression returns HyDivisionExpression
	 *     EvoMappingGreaterOrEqualExpression.HyGreaterOrEqualExpression_1_0 returns HyDivisionExpression
	 *     EvoMappingSubtractionExpression returns HyDivisionExpression
	 *     EvoMappingSubtractionExpression.HySubtractionExpression_1_0 returns HyDivisionExpression
	 *     EvoMappingAdditionExpression returns HyDivisionExpression
	 *     EvoMappingAdditionExpression.HyAdditionExpression_1_0 returns HyDivisionExpression
	 *     EvoMappingModuloExpression returns HyDivisionExpression
	 *     EvoMappingModuloExpression.HyModuloExpression_1_0 returns HyDivisionExpression
	 *     EvoMappingMultiplicationExpression returns HyDivisionExpression
	 *     EvoMappingMultiplicationExpression.HyMultiplicationExpression_1_0 returns HyDivisionExpression
	 *     EvoMappingDivisionExpression returns HyDivisionExpression
	 *     EvoMappingDivisionExpression.HyDivisionExpression_1_0 returns HyDivisionExpression
	 *
	 * Constraint:
	 *     (operand1=EvoMappingDivisionExpression_HyDivisionExpression_1_0 operand2=EvoMappingTerminal)
	 */
	protected void sequence_EvoMappingDivisionExpression(ISerializationContext context, HyDivisionExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingDivisionExpressionAccess().getHyDivisionExpressionOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoMappingDivisionExpressionAccess().getOperand2EvoMappingTerminalParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyEqualExpression
	 *     EvoMappingOr returns HyEqualExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyEqualExpression
	 *     EvoMappingAnd returns HyEqualExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyEqualExpression
	 *     EvoMappingEqual returns HyEqualExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HyEqualExpression
	 *
	 * Constraint:
	 *     (operand1=EvoMappingEqual_HyEqualExpression_1_0 operand2=EvoMappingUnequal)
	 */
	protected void sequence_EvoMappingEqual(ISerializationContext context, HyEqualExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingEqualAccess().getHyEqualExpressionOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoMappingEqualAccess().getOperand2EvoMappingUnequalParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyEquivalenceExpression
	 *     EvoMappingOr returns HyEquivalenceExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyEquivalenceExpression
	 *     EvoMappingAnd returns HyEquivalenceExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyEquivalenceExpression
	 *     EvoMappingEqual returns HyEquivalenceExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HyEquivalenceExpression
	 *     EvoMappingUnequal returns HyEquivalenceExpression
	 *     EvoMappingUnequal.HyNotEqualExpression_1_0 returns HyEquivalenceExpression
	 *     EvoMappingImplication returns HyEquivalenceExpression
	 *     EvoMappingImplication.HyImpliesExpression_1_0 returns HyEquivalenceExpression
	 *     EvoMappingEquivalence returns HyEquivalenceExpression
	 *     EvoMappingEquivalence.HyEquivalenceExpression_1_0 returns HyEquivalenceExpression
	 *
	 * Constraint:
	 *     (operand1=EvoMappingEquivalence_HyEquivalenceExpression_1_0 operand2=EvoMappingLessExpression)
	 */
	protected void sequence_EvoMappingEquivalence(ISerializationContext context, HyEquivalenceExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingEquivalenceAccess().getHyEquivalenceExpressionOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoMappingEquivalenceAccess().getOperand2EvoMappingLessExpressionParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyFeatureReferenceExpression
	 *     EvoMappingOr returns HyFeatureReferenceExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyFeatureReferenceExpression
	 *     EvoMappingAnd returns HyFeatureReferenceExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyFeatureReferenceExpression
	 *     EvoMappingEqual returns HyFeatureReferenceExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HyFeatureReferenceExpression
	 *     EvoMappingUnequal returns HyFeatureReferenceExpression
	 *     EvoMappingUnequal.HyNotEqualExpression_1_0 returns HyFeatureReferenceExpression
	 *     EvoMappingImplication returns HyFeatureReferenceExpression
	 *     EvoMappingImplication.HyImpliesExpression_1_0 returns HyFeatureReferenceExpression
	 *     EvoMappingEquivalence returns HyFeatureReferenceExpression
	 *     EvoMappingEquivalence.HyEquivalenceExpression_1_0 returns HyFeatureReferenceExpression
	 *     EvoMappingLessExpression returns HyFeatureReferenceExpression
	 *     EvoMappingLessExpression.HyLessExpression_1_0 returns HyFeatureReferenceExpression
	 *     EvoMappingIfPossibleExpression returns HyFeatureReferenceExpression
	 *     EvoMappingIfPossibleExpression.HyIfPossibleExpression_1_1 returns HyFeatureReferenceExpression
	 *     EvoMappingLessOrEqualExpression returns HyFeatureReferenceExpression
	 *     EvoMappingLessOrEqualExpression.HyLessOrEqualExpression_1_0 returns HyFeatureReferenceExpression
	 *     EvoMappingGreaterExpression returns HyFeatureReferenceExpression
	 *     EvoMappingGreaterExpression.HyGreaterExpression_1_0 returns HyFeatureReferenceExpression
	 *     EvoMappingGreaterOrEqualExpression returns HyFeatureReferenceExpression
	 *     EvoMappingGreaterOrEqualExpression.HyGreaterOrEqualExpression_1_0 returns HyFeatureReferenceExpression
	 *     EvoMappingSubtractionExpression returns HyFeatureReferenceExpression
	 *     EvoMappingSubtractionExpression.HySubtractionExpression_1_0 returns HyFeatureReferenceExpression
	 *     EvoMappingAdditionExpression returns HyFeatureReferenceExpression
	 *     EvoMappingAdditionExpression.HyAdditionExpression_1_0 returns HyFeatureReferenceExpression
	 *     EvoMappingModuloExpression returns HyFeatureReferenceExpression
	 *     EvoMappingModuloExpression.HyModuloExpression_1_0 returns HyFeatureReferenceExpression
	 *     EvoMappingMultiplicationExpression returns HyFeatureReferenceExpression
	 *     EvoMappingMultiplicationExpression.HyMultiplicationExpression_1_0 returns HyFeatureReferenceExpression
	 *     EvoMappingDivisionExpression returns HyFeatureReferenceExpression
	 *     EvoMappingDivisionExpression.HyDivisionExpression_1_0 returns HyFeatureReferenceExpression
	 *     EvoMappingTerminal returns HyFeatureReferenceExpression
	 *     EvoMappingFeatureReferenceExpression returns HyFeatureReferenceExpression
	 *
	 * Constraint:
	 *     feature=[HyFeature|STRING]
	 */
	protected void sequence_EvoMappingFeatureReferenceExpression(ISerializationContext context, HyFeatureReferenceExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_ABSTRACT_FEATURE_REFERENCE_EXPRESSION__FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_ABSTRACT_FEATURE_REFERENCE_EXPRESSION__FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingFeatureReferenceExpressionAccess().getFeatureHyFeatureSTRINGTerminalRuleCall_0_1(), semanticObject.eGet(HyExpressionPackage.Literals.HY_ABSTRACT_FEATURE_REFERENCE_EXPRESSION__FEATURE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyGreaterExpression
	 *     EvoMappingOr returns HyGreaterExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyGreaterExpression
	 *     EvoMappingAnd returns HyGreaterExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyGreaterExpression
	 *     EvoMappingEqual returns HyGreaterExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HyGreaterExpression
	 *     EvoMappingUnequal returns HyGreaterExpression
	 *     EvoMappingUnequal.HyNotEqualExpression_1_0 returns HyGreaterExpression
	 *     EvoMappingImplication returns HyGreaterExpression
	 *     EvoMappingImplication.HyImpliesExpression_1_0 returns HyGreaterExpression
	 *     EvoMappingEquivalence returns HyGreaterExpression
	 *     EvoMappingEquivalence.HyEquivalenceExpression_1_0 returns HyGreaterExpression
	 *     EvoMappingLessExpression returns HyGreaterExpression
	 *     EvoMappingLessExpression.HyLessExpression_1_0 returns HyGreaterExpression
	 *     EvoMappingIfPossibleExpression returns HyGreaterExpression
	 *     EvoMappingIfPossibleExpression.HyIfPossibleExpression_1_1 returns HyGreaterExpression
	 *     EvoMappingLessOrEqualExpression returns HyGreaterExpression
	 *     EvoMappingLessOrEqualExpression.HyLessOrEqualExpression_1_0 returns HyGreaterExpression
	 *     EvoMappingGreaterExpression returns HyGreaterExpression
	 *     EvoMappingGreaterExpression.HyGreaterExpression_1_0 returns HyGreaterExpression
	 *
	 * Constraint:
	 *     (operand1=EvoMappingGreaterExpression_HyGreaterExpression_1_0 operand2=EvoMappingGreaterOrEqualExpression)
	 */
	protected void sequence_EvoMappingGreaterExpression(ISerializationContext context, HyGreaterExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingGreaterExpressionAccess().getHyGreaterExpressionOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoMappingGreaterExpressionAccess().getOperand2EvoMappingGreaterOrEqualExpressionParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyGreaterOrEqualExpression
	 *     EvoMappingOr returns HyGreaterOrEqualExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyGreaterOrEqualExpression
	 *     EvoMappingAnd returns HyGreaterOrEqualExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyGreaterOrEqualExpression
	 *     EvoMappingEqual returns HyGreaterOrEqualExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HyGreaterOrEqualExpression
	 *     EvoMappingUnequal returns HyGreaterOrEqualExpression
	 *     EvoMappingUnequal.HyNotEqualExpression_1_0 returns HyGreaterOrEqualExpression
	 *     EvoMappingImplication returns HyGreaterOrEqualExpression
	 *     EvoMappingImplication.HyImpliesExpression_1_0 returns HyGreaterOrEqualExpression
	 *     EvoMappingEquivalence returns HyGreaterOrEqualExpression
	 *     EvoMappingEquivalence.HyEquivalenceExpression_1_0 returns HyGreaterOrEqualExpression
	 *     EvoMappingLessExpression returns HyGreaterOrEqualExpression
	 *     EvoMappingLessExpression.HyLessExpression_1_0 returns HyGreaterOrEqualExpression
	 *     EvoMappingIfPossibleExpression returns HyGreaterOrEqualExpression
	 *     EvoMappingIfPossibleExpression.HyIfPossibleExpression_1_1 returns HyGreaterOrEqualExpression
	 *     EvoMappingLessOrEqualExpression returns HyGreaterOrEqualExpression
	 *     EvoMappingLessOrEqualExpression.HyLessOrEqualExpression_1_0 returns HyGreaterOrEqualExpression
	 *     EvoMappingGreaterExpression returns HyGreaterOrEqualExpression
	 *     EvoMappingGreaterExpression.HyGreaterExpression_1_0 returns HyGreaterOrEqualExpression
	 *     EvoMappingGreaterOrEqualExpression returns HyGreaterOrEqualExpression
	 *     EvoMappingGreaterOrEqualExpression.HyGreaterOrEqualExpression_1_0 returns HyGreaterOrEqualExpression
	 *
	 * Constraint:
	 *     (operand1=EvoMappingGreaterOrEqualExpression_HyGreaterOrEqualExpression_1_0 operand2=EvoMappingSubtractionExpression)
	 */
	protected void sequence_EvoMappingGreaterOrEqualExpression(ISerializationContext context, HyGreaterOrEqualExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingGreaterOrEqualExpressionAccess().getHyGreaterOrEqualExpressionOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoMappingGreaterOrEqualExpressionAccess().getOperand2EvoMappingSubtractionExpressionParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyIfPossibleExpression
	 *     EvoMappingOr returns HyIfPossibleExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyIfPossibleExpression
	 *     EvoMappingAnd returns HyIfPossibleExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyIfPossibleExpression
	 *     EvoMappingEqual returns HyIfPossibleExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HyIfPossibleExpression
	 *     EvoMappingUnequal returns HyIfPossibleExpression
	 *     EvoMappingUnequal.HyNotEqualExpression_1_0 returns HyIfPossibleExpression
	 *     EvoMappingImplication returns HyIfPossibleExpression
	 *     EvoMappingImplication.HyImpliesExpression_1_0 returns HyIfPossibleExpression
	 *     EvoMappingEquivalence returns HyIfPossibleExpression
	 *     EvoMappingEquivalence.HyEquivalenceExpression_1_0 returns HyIfPossibleExpression
	 *     EvoMappingLessExpression returns HyIfPossibleExpression
	 *     EvoMappingLessExpression.HyLessExpression_1_0 returns HyIfPossibleExpression
	 *     EvoMappingIfPossibleExpression returns HyIfPossibleExpression
	 *     EvoMappingIfPossibleExpression.HyIfPossibleExpression_1_1 returns HyIfPossibleExpression
	 *
	 * Constraint:
	 *     (operands+=EvoMappingIfPossibleExpression_HyIfPossibleExpression_1_1 operands+=EvoMappingLessOrEqualExpression*)
	 */
	protected void sequence_EvoMappingIfPossibleExpression(ISerializationContext context, HyIfPossibleExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyImpliesExpression
	 *     EvoMappingOr returns HyImpliesExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyImpliesExpression
	 *     EvoMappingAnd returns HyImpliesExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyImpliesExpression
	 *     EvoMappingEqual returns HyImpliesExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HyImpliesExpression
	 *     EvoMappingUnequal returns HyImpliesExpression
	 *     EvoMappingUnequal.HyNotEqualExpression_1_0 returns HyImpliesExpression
	 *     EvoMappingImplication returns HyImpliesExpression
	 *     EvoMappingImplication.HyImpliesExpression_1_0 returns HyImpliesExpression
	 *
	 * Constraint:
	 *     (operand1=EvoMappingImplication_HyImpliesExpression_1_0 operand2=EvoMappingEquivalence)
	 */
	protected void sequence_EvoMappingImplication(ISerializationContext context, HyImpliesExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingImplicationAccess().getHyImpliesExpressionOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoMappingImplicationAccess().getOperand2EvoMappingEquivalenceParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyLessExpression
	 *     EvoMappingOr returns HyLessExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyLessExpression
	 *     EvoMappingAnd returns HyLessExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyLessExpression
	 *     EvoMappingEqual returns HyLessExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HyLessExpression
	 *     EvoMappingUnequal returns HyLessExpression
	 *     EvoMappingUnequal.HyNotEqualExpression_1_0 returns HyLessExpression
	 *     EvoMappingImplication returns HyLessExpression
	 *     EvoMappingImplication.HyImpliesExpression_1_0 returns HyLessExpression
	 *     EvoMappingEquivalence returns HyLessExpression
	 *     EvoMappingEquivalence.HyEquivalenceExpression_1_0 returns HyLessExpression
	 *     EvoMappingLessExpression returns HyLessExpression
	 *     EvoMappingLessExpression.HyLessExpression_1_0 returns HyLessExpression
	 *
	 * Constraint:
	 *     (operand1=EvoMappingLessExpression_HyLessExpression_1_0 operand2=EvoMappingIfPossibleExpression)
	 */
	protected void sequence_EvoMappingLessExpression(ISerializationContext context, HyLessExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingLessExpressionAccess().getHyLessExpressionOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoMappingLessExpressionAccess().getOperand2EvoMappingIfPossibleExpressionParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyLessOrEqualExpression
	 *     EvoMappingOr returns HyLessOrEqualExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyLessOrEqualExpression
	 *     EvoMappingAnd returns HyLessOrEqualExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyLessOrEqualExpression
	 *     EvoMappingEqual returns HyLessOrEqualExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HyLessOrEqualExpression
	 *     EvoMappingUnequal returns HyLessOrEqualExpression
	 *     EvoMappingUnequal.HyNotEqualExpression_1_0 returns HyLessOrEqualExpression
	 *     EvoMappingImplication returns HyLessOrEqualExpression
	 *     EvoMappingImplication.HyImpliesExpression_1_0 returns HyLessOrEqualExpression
	 *     EvoMappingEquivalence returns HyLessOrEqualExpression
	 *     EvoMappingEquivalence.HyEquivalenceExpression_1_0 returns HyLessOrEqualExpression
	 *     EvoMappingLessExpression returns HyLessOrEqualExpression
	 *     EvoMappingLessExpression.HyLessExpression_1_0 returns HyLessOrEqualExpression
	 *     EvoMappingIfPossibleExpression returns HyLessOrEqualExpression
	 *     EvoMappingIfPossibleExpression.HyIfPossibleExpression_1_1 returns HyLessOrEqualExpression
	 *     EvoMappingLessOrEqualExpression returns HyLessOrEqualExpression
	 *     EvoMappingLessOrEqualExpression.HyLessOrEqualExpression_1_0 returns HyLessOrEqualExpression
	 *
	 * Constraint:
	 *     (operand1=EvoMappingLessOrEqualExpression_HyLessOrEqualExpression_1_0 operand2=EvoMappingGreaterExpression)
	 */
	protected void sequence_EvoMappingLessOrEqualExpression(ISerializationContext context, HyLessOrEqualExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingLessOrEqualExpressionAccess().getHyLessOrEqualExpressionOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoMappingLessOrEqualExpressionAccess().getOperand2EvoMappingGreaterExpressionParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyMaximumExpression
	 *     EvoMappingOr returns HyMaximumExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyMaximumExpression
	 *     EvoMappingAnd returns HyMaximumExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyMaximumExpression
	 *     EvoMappingEqual returns HyMaximumExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HyMaximumExpression
	 *     EvoMappingUnequal returns HyMaximumExpression
	 *     EvoMappingUnequal.HyNotEqualExpression_1_0 returns HyMaximumExpression
	 *     EvoMappingImplication returns HyMaximumExpression
	 *     EvoMappingImplication.HyImpliesExpression_1_0 returns HyMaximumExpression
	 *     EvoMappingEquivalence returns HyMaximumExpression
	 *     EvoMappingEquivalence.HyEquivalenceExpression_1_0 returns HyMaximumExpression
	 *     EvoMappingLessExpression returns HyMaximumExpression
	 *     EvoMappingLessExpression.HyLessExpression_1_0 returns HyMaximumExpression
	 *     EvoMappingIfPossibleExpression returns HyMaximumExpression
	 *     EvoMappingIfPossibleExpression.HyIfPossibleExpression_1_1 returns HyMaximumExpression
	 *     EvoMappingLessOrEqualExpression returns HyMaximumExpression
	 *     EvoMappingLessOrEqualExpression.HyLessOrEqualExpression_1_0 returns HyMaximumExpression
	 *     EvoMappingGreaterExpression returns HyMaximumExpression
	 *     EvoMappingGreaterExpression.HyGreaterExpression_1_0 returns HyMaximumExpression
	 *     EvoMappingGreaterOrEqualExpression returns HyMaximumExpression
	 *     EvoMappingGreaterOrEqualExpression.HyGreaterOrEqualExpression_1_0 returns HyMaximumExpression
	 *     EvoMappingSubtractionExpression returns HyMaximumExpression
	 *     EvoMappingSubtractionExpression.HySubtractionExpression_1_0 returns HyMaximumExpression
	 *     EvoMappingAdditionExpression returns HyMaximumExpression
	 *     EvoMappingAdditionExpression.HyAdditionExpression_1_0 returns HyMaximumExpression
	 *     EvoMappingModuloExpression returns HyMaximumExpression
	 *     EvoMappingModuloExpression.HyModuloExpression_1_0 returns HyMaximumExpression
	 *     EvoMappingMultiplicationExpression returns HyMaximumExpression
	 *     EvoMappingMultiplicationExpression.HyMultiplicationExpression_1_0 returns HyMaximumExpression
	 *     EvoMappingDivisionExpression returns HyMaximumExpression
	 *     EvoMappingDivisionExpression.HyDivisionExpression_1_0 returns HyMaximumExpression
	 *     EvoMappingTerminal returns HyMaximumExpression
	 *     EvoMappingMaximumExpression returns HyMaximumExpression
	 *
	 * Constraint:
	 *     operand=EvoMappingExpression
	 */
	protected void sequence_EvoMappingMaximumExpression(ISerializationContext context, HyMaximumExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_UNARY_EXPRESSION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_UNARY_EXPRESSION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingMaximumExpressionAccess().getOperandEvoMappingExpressionParserRuleCall_1_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyMinimumExpression
	 *     EvoMappingOr returns HyMinimumExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyMinimumExpression
	 *     EvoMappingAnd returns HyMinimumExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyMinimumExpression
	 *     EvoMappingEqual returns HyMinimumExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HyMinimumExpression
	 *     EvoMappingUnequal returns HyMinimumExpression
	 *     EvoMappingUnequal.HyNotEqualExpression_1_0 returns HyMinimumExpression
	 *     EvoMappingImplication returns HyMinimumExpression
	 *     EvoMappingImplication.HyImpliesExpression_1_0 returns HyMinimumExpression
	 *     EvoMappingEquivalence returns HyMinimumExpression
	 *     EvoMappingEquivalence.HyEquivalenceExpression_1_0 returns HyMinimumExpression
	 *     EvoMappingLessExpression returns HyMinimumExpression
	 *     EvoMappingLessExpression.HyLessExpression_1_0 returns HyMinimumExpression
	 *     EvoMappingIfPossibleExpression returns HyMinimumExpression
	 *     EvoMappingIfPossibleExpression.HyIfPossibleExpression_1_1 returns HyMinimumExpression
	 *     EvoMappingLessOrEqualExpression returns HyMinimumExpression
	 *     EvoMappingLessOrEqualExpression.HyLessOrEqualExpression_1_0 returns HyMinimumExpression
	 *     EvoMappingGreaterExpression returns HyMinimumExpression
	 *     EvoMappingGreaterExpression.HyGreaterExpression_1_0 returns HyMinimumExpression
	 *     EvoMappingGreaterOrEqualExpression returns HyMinimumExpression
	 *     EvoMappingGreaterOrEqualExpression.HyGreaterOrEqualExpression_1_0 returns HyMinimumExpression
	 *     EvoMappingSubtractionExpression returns HyMinimumExpression
	 *     EvoMappingSubtractionExpression.HySubtractionExpression_1_0 returns HyMinimumExpression
	 *     EvoMappingAdditionExpression returns HyMinimumExpression
	 *     EvoMappingAdditionExpression.HyAdditionExpression_1_0 returns HyMinimumExpression
	 *     EvoMappingModuloExpression returns HyMinimumExpression
	 *     EvoMappingModuloExpression.HyModuloExpression_1_0 returns HyMinimumExpression
	 *     EvoMappingMultiplicationExpression returns HyMinimumExpression
	 *     EvoMappingMultiplicationExpression.HyMultiplicationExpression_1_0 returns HyMinimumExpression
	 *     EvoMappingDivisionExpression returns HyMinimumExpression
	 *     EvoMappingDivisionExpression.HyDivisionExpression_1_0 returns HyMinimumExpression
	 *     EvoMappingTerminal returns HyMinimumExpression
	 *     EvoMappingMimumumExpression returns HyMinimumExpression
	 *
	 * Constraint:
	 *     operand=EvoMappingExpression
	 */
	protected void sequence_EvoMappingMimumumExpression(ISerializationContext context, HyMinimumExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_UNARY_EXPRESSION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_UNARY_EXPRESSION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingMimumumExpressionAccess().getOperandEvoMappingExpressionParserRuleCall_1_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyModuloExpression
	 *     EvoMappingOr returns HyModuloExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyModuloExpression
	 *     EvoMappingAnd returns HyModuloExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyModuloExpression
	 *     EvoMappingEqual returns HyModuloExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HyModuloExpression
	 *     EvoMappingUnequal returns HyModuloExpression
	 *     EvoMappingUnequal.HyNotEqualExpression_1_0 returns HyModuloExpression
	 *     EvoMappingImplication returns HyModuloExpression
	 *     EvoMappingImplication.HyImpliesExpression_1_0 returns HyModuloExpression
	 *     EvoMappingEquivalence returns HyModuloExpression
	 *     EvoMappingEquivalence.HyEquivalenceExpression_1_0 returns HyModuloExpression
	 *     EvoMappingLessExpression returns HyModuloExpression
	 *     EvoMappingLessExpression.HyLessExpression_1_0 returns HyModuloExpression
	 *     EvoMappingIfPossibleExpression returns HyModuloExpression
	 *     EvoMappingIfPossibleExpression.HyIfPossibleExpression_1_1 returns HyModuloExpression
	 *     EvoMappingLessOrEqualExpression returns HyModuloExpression
	 *     EvoMappingLessOrEqualExpression.HyLessOrEqualExpression_1_0 returns HyModuloExpression
	 *     EvoMappingGreaterExpression returns HyModuloExpression
	 *     EvoMappingGreaterExpression.HyGreaterExpression_1_0 returns HyModuloExpression
	 *     EvoMappingGreaterOrEqualExpression returns HyModuloExpression
	 *     EvoMappingGreaterOrEqualExpression.HyGreaterOrEqualExpression_1_0 returns HyModuloExpression
	 *     EvoMappingSubtractionExpression returns HyModuloExpression
	 *     EvoMappingSubtractionExpression.HySubtractionExpression_1_0 returns HyModuloExpression
	 *     EvoMappingAdditionExpression returns HyModuloExpression
	 *     EvoMappingAdditionExpression.HyAdditionExpression_1_0 returns HyModuloExpression
	 *     EvoMappingModuloExpression returns HyModuloExpression
	 *     EvoMappingModuloExpression.HyModuloExpression_1_0 returns HyModuloExpression
	 *
	 * Constraint:
	 *     (operand1=EvoMappingModuloExpression_HyModuloExpression_1_0 operand2=EvoMappingMultiplicationExpression)
	 */
	protected void sequence_EvoMappingModuloExpression(ISerializationContext context, HyModuloExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingModuloExpressionAccess().getHyModuloExpressionOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoMappingModuloExpressionAccess().getOperand2EvoMappingMultiplicationExpressionParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyMultiplicationExpression
	 *     EvoMappingOr returns HyMultiplicationExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyMultiplicationExpression
	 *     EvoMappingAnd returns HyMultiplicationExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyMultiplicationExpression
	 *     EvoMappingEqual returns HyMultiplicationExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HyMultiplicationExpression
	 *     EvoMappingUnequal returns HyMultiplicationExpression
	 *     EvoMappingUnequal.HyNotEqualExpression_1_0 returns HyMultiplicationExpression
	 *     EvoMappingImplication returns HyMultiplicationExpression
	 *     EvoMappingImplication.HyImpliesExpression_1_0 returns HyMultiplicationExpression
	 *     EvoMappingEquivalence returns HyMultiplicationExpression
	 *     EvoMappingEquivalence.HyEquivalenceExpression_1_0 returns HyMultiplicationExpression
	 *     EvoMappingLessExpression returns HyMultiplicationExpression
	 *     EvoMappingLessExpression.HyLessExpression_1_0 returns HyMultiplicationExpression
	 *     EvoMappingIfPossibleExpression returns HyMultiplicationExpression
	 *     EvoMappingIfPossibleExpression.HyIfPossibleExpression_1_1 returns HyMultiplicationExpression
	 *     EvoMappingLessOrEqualExpression returns HyMultiplicationExpression
	 *     EvoMappingLessOrEqualExpression.HyLessOrEqualExpression_1_0 returns HyMultiplicationExpression
	 *     EvoMappingGreaterExpression returns HyMultiplicationExpression
	 *     EvoMappingGreaterExpression.HyGreaterExpression_1_0 returns HyMultiplicationExpression
	 *     EvoMappingGreaterOrEqualExpression returns HyMultiplicationExpression
	 *     EvoMappingGreaterOrEqualExpression.HyGreaterOrEqualExpression_1_0 returns HyMultiplicationExpression
	 *     EvoMappingSubtractionExpression returns HyMultiplicationExpression
	 *     EvoMappingSubtractionExpression.HySubtractionExpression_1_0 returns HyMultiplicationExpression
	 *     EvoMappingAdditionExpression returns HyMultiplicationExpression
	 *     EvoMappingAdditionExpression.HyAdditionExpression_1_0 returns HyMultiplicationExpression
	 *     EvoMappingModuloExpression returns HyMultiplicationExpression
	 *     EvoMappingModuloExpression.HyModuloExpression_1_0 returns HyMultiplicationExpression
	 *     EvoMappingMultiplicationExpression returns HyMultiplicationExpression
	 *     EvoMappingMultiplicationExpression.HyMultiplicationExpression_1_0 returns HyMultiplicationExpression
	 *
	 * Constraint:
	 *     (operand1=EvoMappingMultiplicationExpression_HyMultiplicationExpression_1_0 operand2=EvoMappingDivisionExpression)
	 */
	protected void sequence_EvoMappingMultiplicationExpression(ISerializationContext context, HyMultiplicationExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingMultiplicationExpressionAccess().getHyMultiplicationExpressionOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoMappingMultiplicationExpressionAccess().getOperand2EvoMappingDivisionExpressionParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyNegationExpression
	 *     EvoMappingOr returns HyNegationExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyNegationExpression
	 *     EvoMappingAnd returns HyNegationExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyNegationExpression
	 *     EvoMappingEqual returns HyNegationExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HyNegationExpression
	 *     EvoMappingUnequal returns HyNegationExpression
	 *     EvoMappingUnequal.HyNotEqualExpression_1_0 returns HyNegationExpression
	 *     EvoMappingImplication returns HyNegationExpression
	 *     EvoMappingImplication.HyImpliesExpression_1_0 returns HyNegationExpression
	 *     EvoMappingEquivalence returns HyNegationExpression
	 *     EvoMappingEquivalence.HyEquivalenceExpression_1_0 returns HyNegationExpression
	 *     EvoMappingLessExpression returns HyNegationExpression
	 *     EvoMappingLessExpression.HyLessExpression_1_0 returns HyNegationExpression
	 *     EvoMappingIfPossibleExpression returns HyNegationExpression
	 *     EvoMappingIfPossibleExpression.HyIfPossibleExpression_1_1 returns HyNegationExpression
	 *     EvoMappingLessOrEqualExpression returns HyNegationExpression
	 *     EvoMappingLessOrEqualExpression.HyLessOrEqualExpression_1_0 returns HyNegationExpression
	 *     EvoMappingGreaterExpression returns HyNegationExpression
	 *     EvoMappingGreaterExpression.HyGreaterExpression_1_0 returns HyNegationExpression
	 *     EvoMappingGreaterOrEqualExpression returns HyNegationExpression
	 *     EvoMappingGreaterOrEqualExpression.HyGreaterOrEqualExpression_1_0 returns HyNegationExpression
	 *     EvoMappingSubtractionExpression returns HyNegationExpression
	 *     EvoMappingSubtractionExpression.HySubtractionExpression_1_0 returns HyNegationExpression
	 *     EvoMappingAdditionExpression returns HyNegationExpression
	 *     EvoMappingAdditionExpression.HyAdditionExpression_1_0 returns HyNegationExpression
	 *     EvoMappingModuloExpression returns HyNegationExpression
	 *     EvoMappingModuloExpression.HyModuloExpression_1_0 returns HyNegationExpression
	 *     EvoMappingMultiplicationExpression returns HyNegationExpression
	 *     EvoMappingMultiplicationExpression.HyMultiplicationExpression_1_0 returns HyNegationExpression
	 *     EvoMappingDivisionExpression returns HyNegationExpression
	 *     EvoMappingDivisionExpression.HyDivisionExpression_1_0 returns HyNegationExpression
	 *     EvoMappingNegation returns HyNegationExpression
	 *     EvoMappingTerminal returns HyNegationExpression
	 *
	 * Constraint:
	 *     operand=EvoMappingTerminal
	 */
	protected void sequence_EvoMappingNegation(ISerializationContext context, HyNegationExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_UNARY_EXPRESSION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_UNARY_EXPRESSION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingNegationAccess().getOperandEvoMappingTerminalParserRuleCall_1_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyNestedExpression
	 *     EvoMappingOr returns HyNestedExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyNestedExpression
	 *     EvoMappingAnd returns HyNestedExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyNestedExpression
	 *     EvoMappingEqual returns HyNestedExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HyNestedExpression
	 *     EvoMappingUnequal returns HyNestedExpression
	 *     EvoMappingUnequal.HyNotEqualExpression_1_0 returns HyNestedExpression
	 *     EvoMappingImplication returns HyNestedExpression
	 *     EvoMappingImplication.HyImpliesExpression_1_0 returns HyNestedExpression
	 *     EvoMappingEquivalence returns HyNestedExpression
	 *     EvoMappingEquivalence.HyEquivalenceExpression_1_0 returns HyNestedExpression
	 *     EvoMappingLessExpression returns HyNestedExpression
	 *     EvoMappingLessExpression.HyLessExpression_1_0 returns HyNestedExpression
	 *     EvoMappingIfPossibleExpression returns HyNestedExpression
	 *     EvoMappingIfPossibleExpression.HyIfPossibleExpression_1_1 returns HyNestedExpression
	 *     EvoMappingLessOrEqualExpression returns HyNestedExpression
	 *     EvoMappingLessOrEqualExpression.HyLessOrEqualExpression_1_0 returns HyNestedExpression
	 *     EvoMappingGreaterExpression returns HyNestedExpression
	 *     EvoMappingGreaterExpression.HyGreaterExpression_1_0 returns HyNestedExpression
	 *     EvoMappingGreaterOrEqualExpression returns HyNestedExpression
	 *     EvoMappingGreaterOrEqualExpression.HyGreaterOrEqualExpression_1_0 returns HyNestedExpression
	 *     EvoMappingSubtractionExpression returns HyNestedExpression
	 *     EvoMappingSubtractionExpression.HySubtractionExpression_1_0 returns HyNestedExpression
	 *     EvoMappingAdditionExpression returns HyNestedExpression
	 *     EvoMappingAdditionExpression.HyAdditionExpression_1_0 returns HyNestedExpression
	 *     EvoMappingModuloExpression returns HyNestedExpression
	 *     EvoMappingModuloExpression.HyModuloExpression_1_0 returns HyNestedExpression
	 *     EvoMappingMultiplicationExpression returns HyNestedExpression
	 *     EvoMappingMultiplicationExpression.HyMultiplicationExpression_1_0 returns HyNestedExpression
	 *     EvoMappingDivisionExpression returns HyNestedExpression
	 *     EvoMappingDivisionExpression.HyDivisionExpression_1_0 returns HyNestedExpression
	 *     EvoMappingTerminal returns HyNestedExpression
	 *     EvoMappingNestedExpression returns HyNestedExpression
	 *
	 * Constraint:
	 *     operand=EvoMappingExpression
	 */
	protected void sequence_EvoMappingNestedExpression(ISerializationContext context, HyNestedExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_UNARY_EXPRESSION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_UNARY_EXPRESSION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingNestedExpressionAccess().getOperandEvoMappingExpressionParserRuleCall_1_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyNotExpression
	 *     EvoMappingOr returns HyNotExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyNotExpression
	 *     EvoMappingAnd returns HyNotExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyNotExpression
	 *     EvoMappingEqual returns HyNotExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HyNotExpression
	 *     EvoMappingUnequal returns HyNotExpression
	 *     EvoMappingUnequal.HyNotEqualExpression_1_0 returns HyNotExpression
	 *     EvoMappingImplication returns HyNotExpression
	 *     EvoMappingImplication.HyImpliesExpression_1_0 returns HyNotExpression
	 *     EvoMappingEquivalence returns HyNotExpression
	 *     EvoMappingEquivalence.HyEquivalenceExpression_1_0 returns HyNotExpression
	 *     EvoMappingLessExpression returns HyNotExpression
	 *     EvoMappingLessExpression.HyLessExpression_1_0 returns HyNotExpression
	 *     EvoMappingIfPossibleExpression returns HyNotExpression
	 *     EvoMappingIfPossibleExpression.HyIfPossibleExpression_1_1 returns HyNotExpression
	 *     EvoMappingLessOrEqualExpression returns HyNotExpression
	 *     EvoMappingLessOrEqualExpression.HyLessOrEqualExpression_1_0 returns HyNotExpression
	 *     EvoMappingGreaterExpression returns HyNotExpression
	 *     EvoMappingGreaterExpression.HyGreaterExpression_1_0 returns HyNotExpression
	 *     EvoMappingGreaterOrEqualExpression returns HyNotExpression
	 *     EvoMappingGreaterOrEqualExpression.HyGreaterOrEqualExpression_1_0 returns HyNotExpression
	 *     EvoMappingSubtractionExpression returns HyNotExpression
	 *     EvoMappingSubtractionExpression.HySubtractionExpression_1_0 returns HyNotExpression
	 *     EvoMappingAdditionExpression returns HyNotExpression
	 *     EvoMappingAdditionExpression.HyAdditionExpression_1_0 returns HyNotExpression
	 *     EvoMappingModuloExpression returns HyNotExpression
	 *     EvoMappingModuloExpression.HyModuloExpression_1_0 returns HyNotExpression
	 *     EvoMappingMultiplicationExpression returns HyNotExpression
	 *     EvoMappingMultiplicationExpression.HyMultiplicationExpression_1_0 returns HyNotExpression
	 *     EvoMappingDivisionExpression returns HyNotExpression
	 *     EvoMappingDivisionExpression.HyDivisionExpression_1_0 returns HyNotExpression
	 *     EvoMappingTerminal returns HyNotExpression
	 *     EvoMappingNot returns HyNotExpression
	 *
	 * Constraint:
	 *     operand=EvoMappingTerminal
	 */
	protected void sequence_EvoMappingNot(ISerializationContext context, HyNotExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_UNARY_EXPRESSION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_UNARY_EXPRESSION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingNotAccess().getOperandEvoMappingTerminalParserRuleCall_1_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingNumberValue returns HyNumberValue
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_EvoMappingNumberValue(ISerializationContext context, HyNumberValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyDataValuesPackage.Literals.HY_NUMBER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyDataValuesPackage.Literals.HY_NUMBER_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingNumberValueAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyOrExpression
	 *     EvoMappingOr returns HyOrExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyOrExpression
	 *
	 * Constraint:
	 *     (operand1=EvoMappingOr_HyOrExpression_1_0 operand2=EvoMappingAnd)
	 */
	protected void sequence_EvoMappingOr(ISerializationContext context, HyOrExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingOrAccess().getHyOrExpressionOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoMappingOrAccess().getOperand2EvoMappingAndParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingVersionRestriction returns HyRelativeVersionRestriction
	 *     EvoMappingRelativeVersionRestriction returns HyRelativeVersionRestriction
	 *
	 * Constraint:
	 *     (operator=EvoMappingRelativeVersionRestrictionOperator version=[HyVersion|ID])
	 */
	protected void sequence_EvoMappingRelativeVersionRestriction(ISerializationContext context, HyRelativeVersionRestriction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_RELATIVE_VERSION_RESTRICTION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_RELATIVE_VERSION_RESTRICTION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_RELATIVE_VERSION_RESTRICTION__VERSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_RELATIVE_VERSION_RESTRICTION__VERSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingRelativeVersionRestrictionAccess().getOperatorEvoMappingRelativeVersionRestrictionOperatorEnumRuleCall_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getEvoMappingRelativeVersionRestrictionAccess().getVersionHyVersionIDTerminalRuleCall_2_0_1(), semanticObject.eGet(HyExpressionPackage.Literals.HY_RELATIVE_VERSION_RESTRICTION__VERSION, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HySubtractionExpression
	 *     EvoMappingOr returns HySubtractionExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HySubtractionExpression
	 *     EvoMappingAnd returns HySubtractionExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HySubtractionExpression
	 *     EvoMappingEqual returns HySubtractionExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HySubtractionExpression
	 *     EvoMappingUnequal returns HySubtractionExpression
	 *     EvoMappingUnequal.HyNotEqualExpression_1_0 returns HySubtractionExpression
	 *     EvoMappingImplication returns HySubtractionExpression
	 *     EvoMappingImplication.HyImpliesExpression_1_0 returns HySubtractionExpression
	 *     EvoMappingEquivalence returns HySubtractionExpression
	 *     EvoMappingEquivalence.HyEquivalenceExpression_1_0 returns HySubtractionExpression
	 *     EvoMappingLessExpression returns HySubtractionExpression
	 *     EvoMappingLessExpression.HyLessExpression_1_0 returns HySubtractionExpression
	 *     EvoMappingIfPossibleExpression returns HySubtractionExpression
	 *     EvoMappingIfPossibleExpression.HyIfPossibleExpression_1_1 returns HySubtractionExpression
	 *     EvoMappingLessOrEqualExpression returns HySubtractionExpression
	 *     EvoMappingLessOrEqualExpression.HyLessOrEqualExpression_1_0 returns HySubtractionExpression
	 *     EvoMappingGreaterExpression returns HySubtractionExpression
	 *     EvoMappingGreaterExpression.HyGreaterExpression_1_0 returns HySubtractionExpression
	 *     EvoMappingGreaterOrEqualExpression returns HySubtractionExpression
	 *     EvoMappingGreaterOrEqualExpression.HyGreaterOrEqualExpression_1_0 returns HySubtractionExpression
	 *     EvoMappingSubtractionExpression returns HySubtractionExpression
	 *     EvoMappingSubtractionExpression.HySubtractionExpression_1_0 returns HySubtractionExpression
	 *
	 * Constraint:
	 *     (operand1=EvoMappingSubtractionExpression_HySubtractionExpression_1_0 operand2=EvoMappingAdditionExpression)
	 */
	protected void sequence_EvoMappingSubtractionExpression(ISerializationContext context, HySubtractionExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingSubtractionExpressionAccess().getHySubtractionExpressionOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoMappingSubtractionExpressionAccess().getOperand2EvoMappingAdditionExpressionParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyNotEqualExpression
	 *     EvoMappingOr returns HyNotEqualExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyNotEqualExpression
	 *     EvoMappingAnd returns HyNotEqualExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyNotEqualExpression
	 *     EvoMappingEqual returns HyNotEqualExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HyNotEqualExpression
	 *     EvoMappingUnequal returns HyNotEqualExpression
	 *     EvoMappingUnequal.HyNotEqualExpression_1_0 returns HyNotEqualExpression
	 *
	 * Constraint:
	 *     (operand1=EvoMappingUnequal_HyNotEqualExpression_1_0 operand2=EvoMappingImplication)
	 */
	protected void sequence_EvoMappingUnequal(ISerializationContext context, HyNotEqualExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingUnequalAccess().getHyNotEqualExpressionOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoMappingUnequalAccess().getOperand2EvoMappingImplicationParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingExpression returns HyValueExpression
	 *     EvoMappingOr returns HyValueExpression
	 *     EvoMappingOr.HyOrExpression_1_0 returns HyValueExpression
	 *     EvoMappingAnd returns HyValueExpression
	 *     EvoMappingAnd.HyAndExpression_1_0 returns HyValueExpression
	 *     EvoMappingEqual returns HyValueExpression
	 *     EvoMappingEqual.HyEqualExpression_1_0 returns HyValueExpression
	 *     EvoMappingUnequal returns HyValueExpression
	 *     EvoMappingUnequal.HyNotEqualExpression_1_0 returns HyValueExpression
	 *     EvoMappingImplication returns HyValueExpression
	 *     EvoMappingImplication.HyImpliesExpression_1_0 returns HyValueExpression
	 *     EvoMappingEquivalence returns HyValueExpression
	 *     EvoMappingEquivalence.HyEquivalenceExpression_1_0 returns HyValueExpression
	 *     EvoMappingLessExpression returns HyValueExpression
	 *     EvoMappingLessExpression.HyLessExpression_1_0 returns HyValueExpression
	 *     EvoMappingIfPossibleExpression returns HyValueExpression
	 *     EvoMappingIfPossibleExpression.HyIfPossibleExpression_1_1 returns HyValueExpression
	 *     EvoMappingLessOrEqualExpression returns HyValueExpression
	 *     EvoMappingLessOrEqualExpression.HyLessOrEqualExpression_1_0 returns HyValueExpression
	 *     EvoMappingGreaterExpression returns HyValueExpression
	 *     EvoMappingGreaterExpression.HyGreaterExpression_1_0 returns HyValueExpression
	 *     EvoMappingGreaterOrEqualExpression returns HyValueExpression
	 *     EvoMappingGreaterOrEqualExpression.HyGreaterOrEqualExpression_1_0 returns HyValueExpression
	 *     EvoMappingSubtractionExpression returns HyValueExpression
	 *     EvoMappingSubtractionExpression.HySubtractionExpression_1_0 returns HyValueExpression
	 *     EvoMappingAdditionExpression returns HyValueExpression
	 *     EvoMappingAdditionExpression.HyAdditionExpression_1_0 returns HyValueExpression
	 *     EvoMappingModuloExpression returns HyValueExpression
	 *     EvoMappingModuloExpression.HyModuloExpression_1_0 returns HyValueExpression
	 *     EvoMappingMultiplicationExpression returns HyValueExpression
	 *     EvoMappingMultiplicationExpression.HyMultiplicationExpression_1_0 returns HyValueExpression
	 *     EvoMappingDivisionExpression returns HyValueExpression
	 *     EvoMappingDivisionExpression.HyDivisionExpression_1_0 returns HyValueExpression
	 *     EvoMappingTerminal returns HyValueExpression
	 *     EvoMappingValueExpression returns HyValueExpression
	 *
	 * Constraint:
	 *     value=EvoMappingNumberValue
	 */
	protected void sequence_EvoMappingValueExpression(ISerializationContext context, HyValueExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_VALUE_EXPRESSION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_VALUE_EXPRESSION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingValueExpressionAccess().getValueEvoMappingNumberValueParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingVersionRestriction returns HyVersionRangeRestriction
	 *     EvoMappingVersionRangeRestriction returns HyVersionRangeRestriction
	 *
	 * Constraint:
	 *     (lowerIncluded?='true' | (lowerVersion=[HyVersion|QualifiedName] upperIncluded?='true') | upperVersion=[HyVersion|QualifiedName])
	 */
	protected void sequence_EvoMappingVersionRangeRestriction(ISerializationContext context, HyVersionRangeRestriction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GrammarEntry returns GrammarEntry
	 *
	 * Constraint:
	 *     expression=EvoMappingExpression
	 */
	protected void sequence_GrammarEntry(ISerializationContext context, GrammarEntry semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Evo_expression_dslPackage.Literals.GRAMMAR_ENTRY__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Evo_expression_dslPackage.Literals.GRAMMAR_ENTRY__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGrammarEntryAccess().getExpressionEvoMappingExpressionParserRuleCall_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
}
