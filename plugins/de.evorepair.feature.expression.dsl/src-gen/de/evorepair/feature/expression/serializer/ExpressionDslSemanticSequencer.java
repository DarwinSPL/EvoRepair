/*
 * generated by Xtext 2.12.0
 */
package de.evorepair.feature.expression.serializer;

import com.google.inject.Inject;
import de.evorepair.evolution.evovariable.EvoFeatureVariable;
import de.evorepair.evolution.evovariable.EvoVariablePackage;
import de.evorepair.feature.expression.evo_expression_dsl.EvoImplication;
import de.evorepair.feature.expression.evo_expression_dsl.EvoSetElementOf;
import de.evorepair.feature.expression.evo_expression_dsl.Evo_expression_dslPackage;
import de.evorepair.feature.expression.evo_expression_dsl.GrammarEntry;
import de.evorepair.feature.expression.evo_expression_dsl.HyFeatureReferenceExpression;
import de.evorepair.feature.expression.services.ExpressionDslGrammarAccess;
import de.evorepair.logic.evoLogicDsl.EvoAnd;
import de.evorepair.logic.evoLogicDsl.EvoBiconditional;
import de.evorepair.logic.evoLogicDsl.EvoChildrenOf;
import de.evorepair.logic.evoLogicDsl.EvoEqual;
import de.evorepair.logic.evoLogicDsl.EvoExists;
import de.evorepair.logic.evoLogicDsl.EvoFeatureType;
import de.evorepair.logic.evoLogicDsl.EvoForAll;
import de.evorepair.logic.evoLogicDsl.EvoGroupType;
import de.evorepair.logic.evoLogicDsl.EvoLogicDslPackage;
import de.evorepair.logic.evoLogicDsl.EvoNot;
import de.evorepair.logic.evoLogicDsl.EvoOr;
import de.evorepair.logic.evoLogicDsl.EvoParentOf;
import de.evorepair.logic.evoLogicDsl.EvoSatisfiable;
import de.evorepair.logic.evoLogicDsl.EvoSetCardinality;
import de.evorepair.logic.evoLogicDsl.EvoSetCartesianProduct;
import de.evorepair.logic.evoLogicDsl.EvoSetDifference;
import de.evorepair.logic.evoLogicDsl.EvoSetInclusion;
import de.evorepair.logic.evoLogicDsl.EvoSetIntersection;
import de.evorepair.logic.evoLogicDsl.EvoSetSymmetricDifference;
import de.evorepair.logic.evoLogicDsl.EvoSetTerm;
import de.evorepair.logic.evoLogicDsl.EvoSetUnion;
import de.evorepair.logic.evoLogicDsl.EvoSiblingsOf;
import de.evorepair.logic.evoLogicDsl.EvoSize;
import de.evorepair.logic.evoLogicDsl.EvoUnequal;
import de.evorepair.logic.evoLogicDsl.EvoXOr;
import de.evorepair.logic.evologic.EvoFormula;
import de.evorepair.logic.evologic.EvoLogicPackage;
import de.evorepair.logic.evologic.EvoVariableTerm;
import de.evorepair.logic.serializer.EvoLogicDslSemanticSequencer;
import eu.hyvar.dataValues.HyBooleanValue;
import eu.hyvar.dataValues.HyDataValuesPackage;
import eu.hyvar.dataValues.HyEnum;
import eu.hyvar.dataValues.HyEnumLiteral;
import eu.hyvar.dataValues.HyEnumValue;
import eu.hyvar.dataValues.HyNumberValue;
import eu.hyvar.feature.expression.HyAdditionExpression;
import eu.hyvar.feature.expression.HyAttributeReferenceExpression;
import eu.hyvar.feature.expression.HyBooleanValueExpression;
import eu.hyvar.feature.expression.HyConditionalFeatureReferenceExpression;
import eu.hyvar.feature.expression.HyContextInformationReferenceExpression;
import eu.hyvar.feature.expression.HyDivisionExpression;
import eu.hyvar.feature.expression.HyEquivalenceExpression;
import eu.hyvar.feature.expression.HyExpressionPackage;
import eu.hyvar.feature.expression.HyGreaterExpression;
import eu.hyvar.feature.expression.HyGreaterOrEqualExpression;
import eu.hyvar.feature.expression.HyIfPossibleExpression;
import eu.hyvar.feature.expression.HyLessExpression;
import eu.hyvar.feature.expression.HyLessOrEqualExpression;
import eu.hyvar.feature.expression.HyMaximumExpression;
import eu.hyvar.feature.expression.HyMinimumExpression;
import eu.hyvar.feature.expression.HyModuloExpression;
import eu.hyvar.feature.expression.HyMultiplicationExpression;
import eu.hyvar.feature.expression.HyNegationExpression;
import eu.hyvar.feature.expression.HyNestedExpression;
import eu.hyvar.feature.expression.HyRelativeVersionRestriction;
import eu.hyvar.feature.expression.HySubtractionExpression;
import eu.hyvar.feature.expression.HyValueExpression;
import eu.hyvar.feature.expression.HyVersionRangeRestriction;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ExpressionDslSemanticSequencer extends EvoLogicDslSemanticSequencer {

	@Inject
	private ExpressionDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == HyDataValuesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HyDataValuesPackage.HY_BOOLEAN_VALUE:
				sequence_EvoBooleanValue(context, (HyBooleanValue) semanticObject); 
				return; 
			case HyDataValuesPackage.HY_ENUM:
				sequence_EvoEnum(context, (HyEnum) semanticObject); 
				return; 
			case HyDataValuesPackage.HY_ENUM_LITERAL:
				sequence_EvoEnumLiteral(context, (HyEnumLiteral) semanticObject); 
				return; 
			case HyDataValuesPackage.HY_ENUM_VALUE:
				sequence_EvoEnumValue(context, (HyEnumValue) semanticObject); 
				return; 
			case HyDataValuesPackage.HY_NUMBER_VALUE:
				sequence_EvoNumberValue(context, (HyNumberValue) semanticObject); 
				return; 
			}
		else if (epackage == EvoLogicDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EvoLogicDslPackage.EVO_AND:
				sequence_EvoAnd(context, (EvoAnd) semanticObject); 
				return; 
			case EvoLogicDslPackage.EVO_BICONDITIONAL:
				sequence_EvoBiconditional(context, (EvoBiconditional) semanticObject); 
				return; 
			case EvoLogicDslPackage.EVO_CHILDREN_OF:
				sequence_EvoChildrenOf(context, (EvoChildrenOf) semanticObject); 
				return; 
			case EvoLogicDslPackage.EVO_EQUAL:
				sequence_EvoEqual(context, (EvoEqual) semanticObject); 
				return; 
			case EvoLogicDslPackage.EVO_EXISTS:
				sequence_EvoExists(context, (EvoExists) semanticObject); 
				return; 
			case EvoLogicDslPackage.EVO_FEATURE_TYPE:
				sequence_EvoFeatureType(context, (EvoFeatureType) semanticObject); 
				return; 
			case EvoLogicDslPackage.EVO_FOR_ALL:
				sequence_EvoForAll(context, (EvoForAll) semanticObject); 
				return; 
			case EvoLogicDslPackage.EVO_GROUP_TYPE:
				sequence_EvoGroupType(context, (EvoGroupType) semanticObject); 
				return; 
			case EvoLogicDslPackage.EVO_NOT:
				sequence_EvoNot(context, (EvoNot) semanticObject); 
				return; 
			case EvoLogicDslPackage.EVO_OR:
				sequence_EvoOr(context, (EvoOr) semanticObject); 
				return; 
			case EvoLogicDslPackage.EVO_PARENT_OF:
				sequence_EvoParentOf(context, (EvoParentOf) semanticObject); 
				return; 
			case EvoLogicDslPackage.EVO_SATISFIABLE:
				sequence_EvoSatisfiable(context, (EvoSatisfiable) semanticObject); 
				return; 
			case EvoLogicDslPackage.EVO_SET_CARDINALITY:
				sequence_EvoSetCardinality(context, (EvoSetCardinality) semanticObject); 
				return; 
			case EvoLogicDslPackage.EVO_SET_CARTESIAN_PRODUCT:
				sequence_EvoSetCartesianProduct(context, (EvoSetCartesianProduct) semanticObject); 
				return; 
			case EvoLogicDslPackage.EVO_SET_DIFFERENCE:
				sequence_EvoSetDifference(context, (EvoSetDifference) semanticObject); 
				return; 
			case EvoLogicDslPackage.EVO_SET_INCLUSION:
				sequence_EvoSetInclusion(context, (EvoSetInclusion) semanticObject); 
				return; 
			case EvoLogicDslPackage.EVO_SET_INTERSECTION:
				sequence_EvoSetIntersection(context, (EvoSetIntersection) semanticObject); 
				return; 
			case EvoLogicDslPackage.EVO_SET_SYMMETRIC_DIFFERENCE:
				sequence_EvoSetSymmetricDifference(context, (EvoSetSymmetricDifference) semanticObject); 
				return; 
			case EvoLogicDslPackage.EVO_SET_TERM:
				sequence_EvoSetTerm(context, (EvoSetTerm) semanticObject); 
				return; 
			case EvoLogicDslPackage.EVO_SET_UNION:
				sequence_EvoSetUnion(context, (EvoSetUnion) semanticObject); 
				return; 
			case EvoLogicDslPackage.EVO_SIBLINGS_OF:
				sequence_EvoSiblingsOf(context, (EvoSiblingsOf) semanticObject); 
				return; 
			case EvoLogicDslPackage.EVO_SIZE:
				sequence_EvoSize(context, (EvoSize) semanticObject); 
				return; 
			case EvoLogicDslPackage.EVO_UNEQUAL:
				sequence_EvoUnequal(context, (EvoUnequal) semanticObject); 
				return; 
			case EvoLogicDslPackage.EVO_XOR:
				sequence_EvoXOr(context, (EvoXOr) semanticObject); 
				return; 
			}
		else if (epackage == Evo_expression_dslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Evo_expression_dslPackage.EVO_IMPLICATION:
				sequence_EvoImplication(context, (EvoImplication) semanticObject); 
				return; 
			case Evo_expression_dslPackage.EVO_SET_ELEMENT_OF:
				sequence_EvoElementOf(context, (EvoSetElementOf) semanticObject); 
				return; 
			case Evo_expression_dslPackage.GRAMMAR_ENTRY:
				sequence_GrammarEntry(context, (GrammarEntry) semanticObject); 
				return; 
			case Evo_expression_dslPackage.HY_FEATURE_REFERENCE_EXPRESSION:
				sequence_EvoFeatureReferenceExpression(context, (HyFeatureReferenceExpression) semanticObject); 
				return; 
			}
		else if (epackage == EvoLogicPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EvoLogicPackage.EVO_FORMULA:
				sequence_EvoFormula(context, (EvoFormula) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_VARIABLE_TERM:
				if (rule == grammarAccess.getEvoApplicationConstraintTermRule()) {
					sequence_EvoApplicationConstraintTerm(context, (EvoVariableTerm) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEvoGroupTermRule()) {
					sequence_EvoGroupTerm(context, (EvoVariableTerm) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEvoVariableTermRule()
						|| rule == grammarAccess.getEvoSetVariableRule()) {
					sequence_EvoVariableTerm(context, (EvoVariableTerm) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == EvoVariablePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EvoVariablePackage.EVO_FEATURE_VARIABLE:
				sequence_EvoFeatureVariable(context, (EvoFeatureVariable) semanticObject); 
				return; 
			}
		else if (epackage == HyExpressionPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HyExpressionPackage.HY_ADDITION_EXPRESSION:
				sequence_EvoAdditionExpression(context, (HyAdditionExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_ATTRIBUTE_REFERENCE_EXPRESSION:
				sequence_EvoAttributeReferenceExpression(context, (HyAttributeReferenceExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_BOOLEAN_VALUE_EXPRESSION:
				sequence_EvoBooleanValueExpression(context, (HyBooleanValueExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_CONDITIONAL_FEATURE_REFERENCE_EXPRESSION:
				sequence_EvoConditionalFeatureReferenceExpression(context, (HyConditionalFeatureReferenceExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_CONTEXT_INFORMATION_REFERENCE_EXPRESSION:
				sequence_EvoContextInformationReferenceExpression(context, (HyContextInformationReferenceExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_DIVISION_EXPRESSION:
				sequence_EvoDivisionExpression(context, (HyDivisionExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_EQUIVALENCE_EXPRESSION:
				sequence_EvoEquivalenceExpression(context, (HyEquivalenceExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_GREATER_EXPRESSION:
				sequence_EvoGreaterExpression(context, (HyGreaterExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_GREATER_OR_EQUAL_EXPRESSION:
				sequence_EvoGreaterOrEqualExpression(context, (HyGreaterOrEqualExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_IF_POSSIBLE_EXPRESSION:
				sequence_EvoIfPossibleExpression(context, (HyIfPossibleExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_LESS_EXPRESSION:
				sequence_EvoLessExpression(context, (HyLessExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_LESS_OR_EQUAL_EXPRESSION:
				sequence_EvoLessOrEqualExpression(context, (HyLessOrEqualExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_MAXIMUM_EXPRESSION:
				sequence_EvoMaximumExpression(context, (HyMaximumExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_MINIMUM_EXPRESSION:
				sequence_EvoMimumumExpression(context, (HyMinimumExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_MODULO_EXPRESSION:
				sequence_EvoModuloExpression(context, (HyModuloExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_MULTIPLICATION_EXPRESSION:
				sequence_EvoMultiplicationExpression(context, (HyMultiplicationExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_NEGATION_EXPRESSION:
				sequence_EvoNegation(context, (HyNegationExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_NESTED_EXPRESSION:
				sequence_EvoNestedExpression(context, (HyNestedExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_RELATIVE_VERSION_RESTRICTION:
				sequence_EvoRelativeVersionRestriction(context, (HyRelativeVersionRestriction) semanticObject); 
				return; 
			case HyExpressionPackage.HY_SUBTRACTION_EXPRESSION:
				sequence_EvoSubtractionExpression(context, (HySubtractionExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_VALUE_EXPRESSION:
				sequence_EvoValueExpression(context, (HyValueExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_VERSION_RANGE_RESTRICTION:
				sequence_EvoVersionRangeRestriction(context, (HyVersionRangeRestriction) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     EvoAdditionExpression returns HyAdditionExpression
	 *
	 * Constraint:
	 *     (operand1=EvoExpression operand2=EvoExpression)
	 */
	protected void sequence_EvoAdditionExpression(ISerializationContext context, HyAdditionExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoAdditionExpressionAccess().getOperand1EvoExpressionParserRuleCall_0_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoAdditionExpressionAccess().getOperand2EvoExpressionParserRuleCall_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoAttributeReferenceExpression returns HyAttributeReferenceExpression
	 *
	 * Constraint:
	 *     (feature=[HyFeature|ID] attribute=[HyFeatureAttribute|QualifiedName])
	 */
	protected void sequence_EvoAttributeReferenceExpression(ISerializationContext context, HyAttributeReferenceExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_ATTRIBUTE_REFERENCE_EXPRESSION__FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_ATTRIBUTE_REFERENCE_EXPRESSION__FEATURE));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_ATTRIBUTE_REFERENCE_EXPRESSION__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_ATTRIBUTE_REFERENCE_EXPRESSION__ATTRIBUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoAttributeReferenceExpressionAccess().getFeatureHyFeatureIDTerminalRuleCall_0_0_1(), semanticObject.eGet(HyExpressionPackage.Literals.HY_ATTRIBUTE_REFERENCE_EXPRESSION__FEATURE, false));
		feeder.accept(grammarAccess.getEvoAttributeReferenceExpressionAccess().getAttributeHyFeatureAttributeQualifiedNameParserRuleCall_2_0_1(), semanticObject.eGet(HyExpressionPackage.Literals.HY_ATTRIBUTE_REFERENCE_EXPRESSION__ATTRIBUTE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoBooleanValueExpression returns HyBooleanValueExpression
	 *
	 * Constraint:
	 *     value?='true'?
	 */
	protected void sequence_EvoBooleanValueExpression(ISerializationContext context, HyBooleanValueExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EvoValue returns HyBooleanValue
	 *     EvoBooleanValue returns HyBooleanValue
	 *
	 * Constraint:
	 *     value?='true'?
	 */
	protected void sequence_EvoBooleanValue(ISerializationContext context, HyBooleanValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EvoConditionalFeatureReferenceExpression returns HyConditionalFeatureReferenceExpression
	 *
	 * Constraint:
	 *     (feature=[HyFeature|QualifiedName] versionRestriction=EvoVersionRestriction?)
	 */
	protected void sequence_EvoConditionalFeatureReferenceExpression(ISerializationContext context, HyConditionalFeatureReferenceExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EvoContextInformationReferenceExpression returns HyContextInformationReferenceExpression
	 *
	 * Constraint:
	 *     contextInformation=[HyContextualInformation|QualifiedName]
	 */
	protected void sequence_EvoContextInformationReferenceExpression(ISerializationContext context, HyContextInformationReferenceExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_CONTEXT_INFORMATION_REFERENCE_EXPRESSION__CONTEXT_INFORMATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_CONTEXT_INFORMATION_REFERENCE_EXPRESSION__CONTEXT_INFORMATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoContextInformationReferenceExpressionAccess().getContextInformationHyContextualInformationQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(HyExpressionPackage.Literals.HY_CONTEXT_INFORMATION_REFERENCE_EXPRESSION__CONTEXT_INFORMATION, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoDivisionExpression returns HyDivisionExpression
	 *
	 * Constraint:
	 *     (operand1=EvoExpression operand2=EvoExpression)
	 */
	protected void sequence_EvoDivisionExpression(ISerializationContext context, HyDivisionExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoDivisionExpressionAccess().getOperand1EvoExpressionParserRuleCall_0_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoDivisionExpressionAccess().getOperand2EvoExpressionParserRuleCall_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoExpression returns EvoSetElementOf
	 *     EvoElementOf returns EvoSetElementOf
	 *     EvoElementOf.EvoSetElementOf_1_0 returns EvoSetElementOf
	 *     EvoImplication returns EvoSetElementOf
	 *     EvoImplication.EvoImplication_1_0 returns EvoSetElementOf
	 *     EvoXOr returns EvoSetElementOf
	 *     EvoXOr.EvoXOr_1_0 returns EvoSetElementOf
	 *     EvoOr returns EvoSetElementOf
	 *     EvoOr.EvoOr_1_0 returns EvoSetElementOf
	 *     EvoAnd returns EvoSetElementOf
	 *     EvoAnd.EvoAnd_1_0 returns EvoSetElementOf
	 *     EvoEqual returns EvoSetElementOf
	 *     EvoEqual.EvoEqual_1_0 returns EvoSetElementOf
	 *     EvoUnequalSize returns EvoSetElementOf
	 *     EvoUnequal returns EvoSetElementOf
	 *     EvoUnequal.EvoUnequal_1_0 returns EvoSetElementOf
	 *     EvoImplicationSize returns EvoSetElementOf
	 *     EvoBiconditionalSize returns EvoSetElementOf
	 *     EvoBiconditional returns EvoSetElementOf
	 *     EvoBiconditional.EvoBiconditional_1_0 returns EvoSetElementOf
	 *     EvoSetInclusionSize returns EvoSetElementOf
	 *     EvoSetInclusion returns EvoSetElementOf
	 *     EvoSetInclusion.EvoSetInclusion_1_0 returns EvoSetElementOf
	 *     EvoSetIntersection returns EvoSetElementOf
	 *     EvoSetIntersection.EvoSetIntersection_1_0 returns EvoSetElementOf
	 *     EvoSetUnion returns EvoSetElementOf
	 *     EvoSetUnion.EvoSetUnion_1_0 returns EvoSetElementOf
	 *     EvoSetDifference returns EvoSetElementOf
	 *     EvoSetDifference.EvoSetDifference_1_0 returns EvoSetElementOf
	 *     EvoSetSymmetricDifference returns EvoSetElementOf
	 *     EvoSetSymmetricDifference.EvoSetSymmetricDifference_1_0 returns EvoSetElementOf
	 *     EvoSetCartesianProduct returns EvoSetElementOf
	 *     EvoSetCartesianProduct.EvoSetCartesianProduct_1_0 returns EvoSetElementOf
	 *
	 * Constraint:
	 *     (operand1=EvoElementOf_EvoSetElementOf_1_0 operand2=EvoTerminal)
	 */
	protected void sequence_EvoElementOf(ISerializationContext context, EvoSetElementOf semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Evo_expression_dslPackage.Literals.EVO_SET_ELEMENT_OF__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Evo_expression_dslPackage.Literals.EVO_SET_ELEMENT_OF__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, Evo_expression_dslPackage.Literals.EVO_SET_ELEMENT_OF__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Evo_expression_dslPackage.Literals.EVO_SET_ELEMENT_OF__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoElementOfAccess().getEvoSetElementOfOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoElementOfAccess().getOperand2EvoTerminalParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoEnumLiteral returns HyEnumLiteral
	 *
	 * Constraint:
	 *     (name=ID value=INT ((validSince=DATE validUntil=DATE) | validSince=DATE | validUntil=DATE)?)
	 */
	protected void sequence_EvoEnumLiteral(ISerializationContext context, HyEnumLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EvoEnumValue returns HyEnumValue
	 *
	 * Constraint:
	 *     (enum=[HyEnum|QualifiedName] enumLiteral=[HyEnumLiteral|QualifiedName])
	 */
	protected void sequence_EvoEnumValue(ISerializationContext context, HyEnumValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyDataValuesPackage.Literals.HY_ENUM_VALUE__ENUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyDataValuesPackage.Literals.HY_ENUM_VALUE__ENUM));
			if (transientValues.isValueTransient(semanticObject, HyDataValuesPackage.Literals.HY_ENUM_VALUE__ENUM_LITERAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyDataValuesPackage.Literals.HY_ENUM_VALUE__ENUM_LITERAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoEnumValueAccess().getEnumHyEnumQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(HyDataValuesPackage.Literals.HY_ENUM_VALUE__ENUM, false));
		feeder.accept(grammarAccess.getEvoEnumValueAccess().getEnumLiteralHyEnumLiteralQualifiedNameParserRuleCall_3_0_1(), semanticObject.eGet(HyDataValuesPackage.Literals.HY_ENUM_VALUE__ENUM_LITERAL, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoEnum returns HyEnum
	 *
	 * Constraint:
	 *     (name=ID literals+=EvoEnumLiteral literals+=EvoEnumLiteral*)
	 */
	protected void sequence_EvoEnum(ISerializationContext context, HyEnum semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EvoEquivalenceExpression returns HyEquivalenceExpression
	 *
	 * Constraint:
	 *     (operand1=EvoExpression operand2=EvoExpression)
	 */
	protected void sequence_EvoEquivalenceExpression(ISerializationContext context, HyEquivalenceExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoEquivalenceExpressionAccess().getOperand1EvoExpressionParserRuleCall_0_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoEquivalenceExpressionAccess().getOperand2EvoExpressionParserRuleCall_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoExpression returns HyFeatureReferenceExpression
	 *     EvoElementOf returns HyFeatureReferenceExpression
	 *     EvoElementOf.EvoSetElementOf_1_0 returns HyFeatureReferenceExpression
	 *     EvoTerminal returns HyFeatureReferenceExpression
	 *     EvoImplication returns HyFeatureReferenceExpression
	 *     EvoImplication.EvoImplication_1_0 returns HyFeatureReferenceExpression
	 *     EvoFeatureReferenceExpression returns HyFeatureReferenceExpression
	 *     EvoXOr returns HyFeatureReferenceExpression
	 *     EvoXOr.EvoXOr_1_0 returns HyFeatureReferenceExpression
	 *     EvoOr returns HyFeatureReferenceExpression
	 *     EvoOr.EvoOr_1_0 returns HyFeatureReferenceExpression
	 *     EvoAnd returns HyFeatureReferenceExpression
	 *     EvoAnd.EvoAnd_1_0 returns HyFeatureReferenceExpression
	 *     EvoEqual returns HyFeatureReferenceExpression
	 *     EvoEqual.EvoEqual_1_0 returns HyFeatureReferenceExpression
	 *     EvoUnequalSize returns HyFeatureReferenceExpression
	 *     EvoUnequal returns HyFeatureReferenceExpression
	 *     EvoUnequal.EvoUnequal_1_0 returns HyFeatureReferenceExpression
	 *     EvoImplicationSize returns HyFeatureReferenceExpression
	 *     EvoBiconditionalSize returns HyFeatureReferenceExpression
	 *     EvoBiconditional returns HyFeatureReferenceExpression
	 *     EvoBiconditional.EvoBiconditional_1_0 returns HyFeatureReferenceExpression
	 *     EvoSetInclusionSize returns HyFeatureReferenceExpression
	 *     EvoSetInclusion returns HyFeatureReferenceExpression
	 *     EvoSetInclusion.EvoSetInclusion_1_0 returns HyFeatureReferenceExpression
	 *     EvoSetIntersection returns HyFeatureReferenceExpression
	 *     EvoSetIntersection.EvoSetIntersection_1_0 returns HyFeatureReferenceExpression
	 *     EvoSetUnion returns HyFeatureReferenceExpression
	 *     EvoSetUnion.EvoSetUnion_1_0 returns HyFeatureReferenceExpression
	 *     EvoSetDifference returns HyFeatureReferenceExpression
	 *     EvoSetDifference.EvoSetDifference_1_0 returns HyFeatureReferenceExpression
	 *     EvoSetSymmetricDifference returns HyFeatureReferenceExpression
	 *     EvoSetSymmetricDifference.EvoSetSymmetricDifference_1_0 returns HyFeatureReferenceExpression
	 *     EvoSetCartesianProduct returns HyFeatureReferenceExpression
	 *     EvoSetCartesianProduct.EvoSetCartesianProduct_1_0 returns HyFeatureReferenceExpression
	 *
	 * Constraint:
	 *     feature=[HyFeature|STRING]
	 */
	protected void sequence_EvoFeatureReferenceExpression(ISerializationContext context, HyFeatureReferenceExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Evo_expression_dslPackage.Literals.HY_FEATURE_REFERENCE_EXPRESSION__FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Evo_expression_dslPackage.Literals.HY_FEATURE_REFERENCE_EXPRESSION__FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoFeatureReferenceExpressionAccess().getFeatureHyFeatureSTRINGTerminalRuleCall_0_1(), semanticObject.eGet(Evo_expression_dslPackage.Literals.HY_FEATURE_REFERENCE_EXPRESSION__FEATURE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoGreaterExpression returns HyGreaterExpression
	 *
	 * Constraint:
	 *     (operand1=EvoExpression operand2=EvoExpression)
	 */
	protected void sequence_EvoGreaterExpression(ISerializationContext context, HyGreaterExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoGreaterExpressionAccess().getOperand1EvoExpressionParserRuleCall_0_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoGreaterExpressionAccess().getOperand2EvoExpressionParserRuleCall_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoGreaterOrEqualExpression returns HyGreaterOrEqualExpression
	 *
	 * Constraint:
	 *     (operand1=EvoExpression operand2=EvoExpression)
	 */
	protected void sequence_EvoGreaterOrEqualExpression(ISerializationContext context, HyGreaterOrEqualExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoGreaterOrEqualExpressionAccess().getOperand1EvoExpressionParserRuleCall_0_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoGreaterOrEqualExpressionAccess().getOperand2EvoExpressionParserRuleCall_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoIfPossibleExpression returns HyIfPossibleExpression
	 *
	 * Constraint:
	 *     (operands+=EvoExpression operands+=EvoExpression*)
	 */
	protected void sequence_EvoIfPossibleExpression(ISerializationContext context, HyIfPossibleExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EvoExpression returns EvoImplication
	 *     EvoImplication returns EvoImplication
	 *     EvoImplication.EvoImplication_1_0 returns EvoImplication
	 *     EvoXOr returns EvoImplication
	 *     EvoXOr.EvoXOr_1_0 returns EvoImplication
	 *     EvoOr returns EvoImplication
	 *     EvoOr.EvoOr_1_0 returns EvoImplication
	 *     EvoAnd returns EvoImplication
	 *     EvoAnd.EvoAnd_1_0 returns EvoImplication
	 *     EvoEqual returns EvoImplication
	 *     EvoEqual.EvoEqual_1_0 returns EvoImplication
	 *     EvoUnequalSize returns EvoImplication
	 *     EvoUnequal returns EvoImplication
	 *     EvoUnequal.EvoUnequal_1_0 returns EvoImplication
	 *     EvoImplicationSize returns EvoImplication
	 *
	 * Constraint:
	 *     (operand1=EvoImplication_EvoImplication_1_0 operand2=EvoBiconditionalSize)
	 */
	protected void sequence_EvoImplication(ISerializationContext context, EvoImplication semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Evo_expression_dslPackage.Literals.EVO_IMPLICATION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Evo_expression_dslPackage.Literals.EVO_IMPLICATION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, Evo_expression_dslPackage.Literals.EVO_IMPLICATION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Evo_expression_dslPackage.Literals.EVO_IMPLICATION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoImplicationAccess().getEvoImplicationOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoImplicationAccess().getOperand2EvoBiconditionalSizeParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoLessExpression returns HyLessExpression
	 *
	 * Constraint:
	 *     (operand1=EvoExpression operand2=EvoExpression)
	 */
	protected void sequence_EvoLessExpression(ISerializationContext context, HyLessExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoLessExpressionAccess().getOperand1EvoExpressionParserRuleCall_0_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoLessExpressionAccess().getOperand2EvoExpressionParserRuleCall_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoLessOrEqualExpression returns HyLessOrEqualExpression
	 *
	 * Constraint:
	 *     (operand1=EvoExpression operand2=EvoExpression)
	 */
	protected void sequence_EvoLessOrEqualExpression(ISerializationContext context, HyLessOrEqualExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoLessOrEqualExpressionAccess().getOperand1EvoExpressionParserRuleCall_0_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoLessOrEqualExpressionAccess().getOperand2EvoExpressionParserRuleCall_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMaximumExpression returns HyMaximumExpression
	 *
	 * Constraint:
	 *     operand=EvoExpression
	 */
	protected void sequence_EvoMaximumExpression(ISerializationContext context, HyMaximumExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_UNARY_EXPRESSION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_UNARY_EXPRESSION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMaximumExpressionAccess().getOperandEvoExpressionParserRuleCall_1_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMimumumExpression returns HyMinimumExpression
	 *
	 * Constraint:
	 *     operand=EvoExpression
	 */
	protected void sequence_EvoMimumumExpression(ISerializationContext context, HyMinimumExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_UNARY_EXPRESSION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_UNARY_EXPRESSION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMimumumExpressionAccess().getOperandEvoExpressionParserRuleCall_1_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoModuloExpression returns HyModuloExpression
	 *
	 * Constraint:
	 *     (operand1=EvoExpression operand2=EvoExpression)
	 */
	protected void sequence_EvoModuloExpression(ISerializationContext context, HyModuloExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoModuloExpressionAccess().getOperand1EvoExpressionParserRuleCall_0_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoModuloExpressionAccess().getOperand2EvoExpressionParserRuleCall_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMultiplicationExpression returns HyMultiplicationExpression
	 *
	 * Constraint:
	 *     (operand1=EvoExpression operand2=EvoExpression)
	 */
	protected void sequence_EvoMultiplicationExpression(ISerializationContext context, HyMultiplicationExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMultiplicationExpressionAccess().getOperand1EvoExpressionParserRuleCall_0_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoMultiplicationExpressionAccess().getOperand2EvoExpressionParserRuleCall_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoNegation returns HyNegationExpression
	 *
	 * Constraint:
	 *     operand=EvoExpression
	 */
	protected void sequence_EvoNegation(ISerializationContext context, HyNegationExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_UNARY_EXPRESSION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_UNARY_EXPRESSION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoNegationAccess().getOperandEvoExpressionParserRuleCall_1_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoExpression returns HyNestedExpression
	 *     EvoElementOf returns HyNestedExpression
	 *     EvoElementOf.EvoSetElementOf_1_0 returns HyNestedExpression
	 *     EvoTerminal returns HyNestedExpression
	 *     EvoNestedExpression returns HyNestedExpression
	 *     EvoImplication returns HyNestedExpression
	 *     EvoImplication.EvoImplication_1_0 returns HyNestedExpression
	 *     EvoXOr returns HyNestedExpression
	 *     EvoXOr.EvoXOr_1_0 returns HyNestedExpression
	 *     EvoOr returns HyNestedExpression
	 *     EvoOr.EvoOr_1_0 returns HyNestedExpression
	 *     EvoAnd returns HyNestedExpression
	 *     EvoAnd.EvoAnd_1_0 returns HyNestedExpression
	 *     EvoEqual returns HyNestedExpression
	 *     EvoEqual.EvoEqual_1_0 returns HyNestedExpression
	 *     EvoUnequalSize returns HyNestedExpression
	 *     EvoUnequal returns HyNestedExpression
	 *     EvoUnequal.EvoUnequal_1_0 returns HyNestedExpression
	 *     EvoImplicationSize returns HyNestedExpression
	 *     EvoBiconditionalSize returns HyNestedExpression
	 *     EvoBiconditional returns HyNestedExpression
	 *     EvoBiconditional.EvoBiconditional_1_0 returns HyNestedExpression
	 *     EvoSetInclusionSize returns HyNestedExpression
	 *     EvoSetInclusion returns HyNestedExpression
	 *     EvoSetInclusion.EvoSetInclusion_1_0 returns HyNestedExpression
	 *     EvoSetIntersection returns HyNestedExpression
	 *     EvoSetIntersection.EvoSetIntersection_1_0 returns HyNestedExpression
	 *     EvoSetUnion returns HyNestedExpression
	 *     EvoSetUnion.EvoSetUnion_1_0 returns HyNestedExpression
	 *     EvoSetDifference returns HyNestedExpression
	 *     EvoSetDifference.EvoSetDifference_1_0 returns HyNestedExpression
	 *     EvoSetSymmetricDifference returns HyNestedExpression
	 *     EvoSetSymmetricDifference.EvoSetSymmetricDifference_1_0 returns HyNestedExpression
	 *     EvoSetCartesianProduct returns HyNestedExpression
	 *     EvoSetCartesianProduct.EvoSetCartesianProduct_1_0 returns HyNestedExpression
	 *
	 * Constraint:
	 *     operand=EvoExpression
	 */
	protected void sequence_EvoNestedExpression(ISerializationContext context, HyNestedExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_UNARY_EXPRESSION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_UNARY_EXPRESSION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoNestedExpressionAccess().getOperandEvoExpressionParserRuleCall_1_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoValue returns HyNumberValue
	 *     EvoNumberValue returns HyNumberValue
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_EvoNumberValue(ISerializationContext context, HyNumberValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyDataValuesPackage.Literals.HY_NUMBER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyDataValuesPackage.Literals.HY_NUMBER_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoNumberValueAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoVersionRestriction returns HyRelativeVersionRestriction
	 *     EvoRelativeVersionRestriction returns HyRelativeVersionRestriction
	 *
	 * Constraint:
	 *     (operator=EvoRelativeVersionRestrictionOperator version=[HyVersion|ID])
	 */
	protected void sequence_EvoRelativeVersionRestriction(ISerializationContext context, HyRelativeVersionRestriction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_RELATIVE_VERSION_RESTRICTION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_RELATIVE_VERSION_RESTRICTION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_RELATIVE_VERSION_RESTRICTION__VERSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_RELATIVE_VERSION_RESTRICTION__VERSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoRelativeVersionRestrictionAccess().getOperatorEvoRelativeVersionRestrictionOperatorEnumRuleCall_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getEvoRelativeVersionRestrictionAccess().getVersionHyVersionIDTerminalRuleCall_2_0_1(), semanticObject.eGet(HyExpressionPackage.Literals.HY_RELATIVE_VERSION_RESTRICTION__VERSION, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoSubtractionExpression returns HySubtractionExpression
	 *
	 * Constraint:
	 *     (operand1=EvoExpression operand2=EvoExpression)
	 */
	protected void sequence_EvoSubtractionExpression(ISerializationContext context, HySubtractionExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoSubtractionExpressionAccess().getOperand1EvoExpressionParserRuleCall_0_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoSubtractionExpressionAccess().getOperand2EvoExpressionParserRuleCall_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoValueExpression returns HyValueExpression
	 *
	 * Constraint:
	 *     value=EvoValue
	 */
	protected void sequence_EvoValueExpression(ISerializationContext context, HyValueExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_VALUE_EXPRESSION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_VALUE_EXPRESSION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoValueExpressionAccess().getValueEvoValueParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoVersionRestriction returns HyVersionRangeRestriction
	 *     EvoVersionRangeRestriction returns HyVersionRangeRestriction
	 *
	 * Constraint:
	 *     (lowerIncluded?='true' | (lowerVersion=[HyVersion|QualifiedName] upperIncluded?='true') | upperVersion=[HyVersion|QualifiedName])
	 */
	protected void sequence_EvoVersionRangeRestriction(ISerializationContext context, HyVersionRangeRestriction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GrammarEntry returns GrammarEntry
	 *
	 * Constraint:
	 *     expression=EvoExpression
	 */
	protected void sequence_GrammarEntry(ISerializationContext context, GrammarEntry semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Evo_expression_dslPackage.Literals.GRAMMAR_ENTRY__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Evo_expression_dslPackage.Literals.GRAMMAR_ENTRY__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGrammarEntryAccess().getExpressionEvoExpressionParserRuleCall_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
}
