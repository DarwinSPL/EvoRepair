/**
 * generated by Xtext 2.12.0
 */
package de.evorepair.feature.expression.evo_expression_dsl.util;

import de.evorepair.feature.expression.evo_expression_dsl.*;

import eu.hyvar.feature.expression.HyExpression;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see de.evorepair.feature.expression.evo_expression_dsl.Evo_expression_dslPackage
 * @generated
 */
public class Evo_expression_dslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static Evo_expression_dslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Evo_expression_dslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = Evo_expression_dslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Evo_expression_dslSwitch<Adapter> modelSwitch =
    new Evo_expression_dslSwitch<Adapter>()
    {
      @Override
      public Adapter caseGrammarEntry(GrammarEntry object)
      {
        return createGrammarEntryAdapter();
      }
      @Override
      public Adapter caseHyFeatureReferenceExpression(HyFeatureReferenceExpression object)
      {
        return createHyFeatureReferenceExpressionAdapter();
      }
      @Override
      public Adapter caseEvoLogicDsl_GrammarEntry(de.evorepair.logic.evoLogicDsl.GrammarEntry object)
      {
        return createEvoLogicDsl_GrammarEntryAdapter();
      }
      @Override
      public Adapter caseHyExpression(HyExpression object)
      {
        return createHyExpressionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link de.evorepair.feature.expression.evo_expression_dsl.GrammarEntry <em>Grammar Entry</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.evorepair.feature.expression.evo_expression_dsl.GrammarEntry
   * @generated
   */
  public Adapter createGrammarEntryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.evorepair.feature.expression.evo_expression_dsl.HyFeatureReferenceExpression <em>Hy Feature Reference Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.evorepair.feature.expression.evo_expression_dsl.HyFeatureReferenceExpression
   * @generated
   */
  public Adapter createHyFeatureReferenceExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.evorepair.logic.evoLogicDsl.GrammarEntry <em>Grammar Entry</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.evorepair.logic.evoLogicDsl.GrammarEntry
   * @generated
   */
  public Adapter createEvoLogicDsl_GrammarEntryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link eu.hyvar.feature.expression.HyExpression <em>Hy Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see eu.hyvar.feature.expression.HyExpression
   * @generated
   */
  public Adapter createHyExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //Evo_expression_dslAdapterFactory
