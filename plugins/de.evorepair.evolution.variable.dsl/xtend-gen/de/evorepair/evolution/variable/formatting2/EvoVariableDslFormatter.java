/**
 * generated by Xtext 2.12.0
 */
package de.evorepair.evolution.variable.formatting2;

import com.google.inject.Inject;
import de.evorepair.evolution.evovariable.EvoFeatureRelation;
import de.evorepair.evolution.evovariable.EvoFeatureVariable;
import de.evorepair.evolution.evovariable.EvoVariable;
import de.evorepair.evolution.variable.evoVariableDsl.Model;
import de.evorepair.evolution.variable.services.EvoVariableDslGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class EvoVariableDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private EvoVariableDslGrammarAccess _evoVariableDslGrammarAccess;
  
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    EList<EvoVariable> _variables = model.getVariables();
    for (final EvoVariable evoVariable : _variables) {
      document.<EvoVariable>format(evoVariable);
    }
  }
  
  protected void _format(final EvoFeatureVariable evoFeatureVariable, @Extension final IFormattableDocument document) {
    document.<EvoFeatureRelation>format(evoFeatureVariable.getRelation());
  }
  
  public void format(final Object evoFeatureVariable, final IFormattableDocument document) {
    if (evoFeatureVariable instanceof XtextResource) {
      _format((XtextResource)evoFeatureVariable, document);
      return;
    } else if (evoFeatureVariable instanceof EvoFeatureVariable) {
      _format((EvoFeatureVariable)evoFeatureVariable, document);
      return;
    } else if (evoFeatureVariable instanceof Model) {
      _format((Model)evoFeatureVariable, document);
      return;
    } else if (evoFeatureVariable instanceof EObject) {
      _format((EObject)evoFeatureVariable, document);
      return;
    } else if (evoFeatureVariable == null) {
      _format((Void)null, document);
      return;
    } else if (evoFeatureVariable != null) {
      _format(evoFeatureVariable, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(evoFeatureVariable, document).toString());
    }
  }
}
