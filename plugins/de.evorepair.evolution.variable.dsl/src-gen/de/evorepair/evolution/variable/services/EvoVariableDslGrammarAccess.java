/*
 * generated by Xtext 2.12.0
 */
package de.evorepair.evolution.variable.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EvoVariableDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.evolution.variable.EvoVariableDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURIQualifiedNameParserRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablesEvoVariableParserRuleCall_2_0 = (RuleCall)cVariablesAssignment_2.eContents().get(0);
		
		//Model:
		//	'import' importURI=QualifiedName
		//	variables+=EvoVariable*;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importURI=QualifiedName variables+=EvoVariable*
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importURI=QualifiedName
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//QualifiedName
		public RuleCall getImportURIQualifiedNameParserRuleCall_1_0() { return cImportURIQualifiedNameParserRuleCall_1_0; }
		
		//variables+=EvoVariable*
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }
		
		//EvoVariable
		public RuleCall getVariablesEvoVariableParserRuleCall_2_0() { return cVariablesEvoVariableParserRuleCall_2_0; }
	}
	public class EvoVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.evolution.variable.EvoVariableDsl.EvoVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEvoConfigurationVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEvoFeatureVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEvoGroupVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEvoSetVariableParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEvoMappingVariableParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//EvoVariable:
		//	EvoConfigurationVariable | EvoFeatureVariable | EvoGroupVariable | EvoSetVariable | EvoMappingVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoConfigurationVariable | EvoFeatureVariable | EvoGroupVariable | EvoSetVariable | EvoMappingVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EvoConfigurationVariable
		public RuleCall getEvoConfigurationVariableParserRuleCall_0() { return cEvoConfigurationVariableParserRuleCall_0; }
		
		//EvoFeatureVariable
		public RuleCall getEvoFeatureVariableParserRuleCall_1() { return cEvoFeatureVariableParserRuleCall_1; }
		
		//EvoGroupVariable
		public RuleCall getEvoGroupVariableParserRuleCall_2() { return cEvoGroupVariableParserRuleCall_2; }
		
		//EvoSetVariable
		public RuleCall getEvoSetVariableParserRuleCall_3() { return cEvoSetVariableParserRuleCall_3; }
		
		//EvoMappingVariable
		public RuleCall getEvoMappingVariableParserRuleCall_4() { return cEvoMappingVariableParserRuleCall_4; }
	}
	public class EvoFeatureVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.evolution.variable.EvoVariableDsl.EvoFeatureVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRelationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRelationEvoFeatureRelationParserRuleCall_2_0 = (RuleCall)cRelationAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cFeatureAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cFeatureHyFeatureCrossReference_3_2_0 = (CrossReference)cFeatureAssignment_3_2.eContents().get(0);
		private final RuleCall cFeatureHyFeatureQualifiedNameParserRuleCall_3_2_0_1 = (RuleCall)cFeatureHyFeatureCrossReference_3_2_0.eContents().get(1);
		
		//EvoFeatureVariable:
		//	'feature' name=ID relation=EvoFeatureRelation? ('value' '=' feature=[feature::HyFeature|QualifiedName])?;
		@Override public ParserRule getRule() { return rule; }
		
		//'feature' name=ID relation=EvoFeatureRelation? ('value' '=' feature=[feature::HyFeature|QualifiedName])?
		public Group getGroup() { return cGroup; }
		
		//'feature'
		public Keyword getFeatureKeyword_0() { return cFeatureKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//relation=EvoFeatureRelation?
		public Assignment getRelationAssignment_2() { return cRelationAssignment_2; }
		
		//EvoFeatureRelation
		public RuleCall getRelationEvoFeatureRelationParserRuleCall_2_0() { return cRelationEvoFeatureRelationParserRuleCall_2_0; }
		
		//('value' '=' feature=[feature::HyFeature|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'value'
		public Keyword getValueKeyword_3_0() { return cValueKeyword_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }
		
		//feature=[feature::HyFeature|QualifiedName]
		public Assignment getFeatureAssignment_3_2() { return cFeatureAssignment_3_2; }
		
		//[feature::HyFeature|QualifiedName]
		public CrossReference getFeatureHyFeatureCrossReference_3_2_0() { return cFeatureHyFeatureCrossReference_3_2_0; }
		
		//QualifiedName
		public RuleCall getFeatureHyFeatureQualifiedNameParserRuleCall_3_2_0_1() { return cFeatureHyFeatureQualifiedNameParserRuleCall_3_2_0_1; }
	}
	public class EvoFeatureRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.evolution.variable.EvoVariableDsl.EvoFeatureRelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFeatureTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFeatureTypeEvoFeatureVariableTypeEnumRuleCall_0_0 = (RuleCall)cFeatureTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRelatedFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRelatedFeaturesEvoFeatureVariableCrossReference_2_0 = (CrossReference)cRelatedFeaturesAssignment_2.eContents().get(0);
		private final RuleCall cRelatedFeaturesEvoFeatureVariableIDTerminalRuleCall_2_0_1 = (RuleCall)cRelatedFeaturesEvoFeatureVariableCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRelatedFeaturesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRelatedFeaturesEvoFeatureVariableCrossReference_3_1_0 = (CrossReference)cRelatedFeaturesAssignment_3_1.eContents().get(0);
		private final RuleCall cRelatedFeaturesEvoFeatureVariableIDTerminalRuleCall_3_1_0_1 = (RuleCall)cRelatedFeaturesEvoFeatureVariableCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EvoFeatureRelation:
		//	featureType=EvoFeatureVariableType '(' relatedFeatures+=[EvoFeatureVariable] (','
		//	relatedFeatures+=[EvoFeatureVariable])? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//featureType=EvoFeatureVariableType '(' relatedFeatures+=[EvoFeatureVariable] (','
		//relatedFeatures+=[EvoFeatureVariable])? ')'
		public Group getGroup() { return cGroup; }
		
		//featureType=EvoFeatureVariableType
		public Assignment getFeatureTypeAssignment_0() { return cFeatureTypeAssignment_0; }
		
		//EvoFeatureVariableType
		public RuleCall getFeatureTypeEvoFeatureVariableTypeEnumRuleCall_0_0() { return cFeatureTypeEvoFeatureVariableTypeEnumRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//relatedFeatures+=[EvoFeatureVariable]
		public Assignment getRelatedFeaturesAssignment_2() { return cRelatedFeaturesAssignment_2; }
		
		//[EvoFeatureVariable]
		public CrossReference getRelatedFeaturesEvoFeatureVariableCrossReference_2_0() { return cRelatedFeaturesEvoFeatureVariableCrossReference_2_0; }
		
		//ID
		public RuleCall getRelatedFeaturesEvoFeatureVariableIDTerminalRuleCall_2_0_1() { return cRelatedFeaturesEvoFeatureVariableIDTerminalRuleCall_2_0_1; }
		
		//(',' relatedFeatures+=[EvoFeatureVariable])?
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//relatedFeatures+=[EvoFeatureVariable]
		public Assignment getRelatedFeaturesAssignment_3_1() { return cRelatedFeaturesAssignment_3_1; }
		
		//[EvoFeatureVariable]
		public CrossReference getRelatedFeaturesEvoFeatureVariableCrossReference_3_1_0() { return cRelatedFeaturesEvoFeatureVariableCrossReference_3_1_0; }
		
		//ID
		public RuleCall getRelatedFeaturesEvoFeatureVariableIDTerminalRuleCall_3_1_0_1() { return cRelatedFeaturesEvoFeatureVariableIDTerminalRuleCall_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EvoGroupVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.evolution.variable.EvoVariableDsl.EvoGroupVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cValueKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cGroupAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cGroupHyGroupCrossReference_2_2_0 = (CrossReference)cGroupAssignment_2_2.eContents().get(0);
		private final RuleCall cGroupHyGroupQualifiedNameParserRuleCall_2_2_0_1 = (RuleCall)cGroupHyGroupCrossReference_2_2_0.eContents().get(1);
		
		//EvoGroupVariable:
		//	'group' name=ID ('value' '=' group=[feature::HyGroup|QualifiedName])?;
		@Override public ParserRule getRule() { return rule; }
		
		//'group' name=ID ('value' '=' group=[feature::HyGroup|QualifiedName])?
		public Group getGroup() { return cGroup; }
		
		//'group'
		public Keyword getGroupKeyword_0() { return cGroupKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('value' '=' group=[feature::HyGroup|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'value'
		public Keyword getValueKeyword_2_0() { return cValueKeyword_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }
		
		//group=[feature::HyGroup|QualifiedName]
		public Assignment getGroupAssignment_2_2() { return cGroupAssignment_2_2; }
		
		//[feature::HyGroup|QualifiedName]
		public CrossReference getGroupHyGroupCrossReference_2_2_0() { return cGroupHyGroupCrossReference_2_2_0; }
		
		//QualifiedName
		public RuleCall getGroupHyGroupQualifiedNameParserRuleCall_2_2_0_1() { return cGroupHyGroupQualifiedNameParserRuleCall_2_2_0_1; }
	}
	public class EvoSetVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.evolution.variable.EvoVariableDsl.EvoSetVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cElementsEvoVariableCrossReference_2_1_0 = (CrossReference)cElementsAssignment_2_1.eContents().get(0);
		private final RuleCall cElementsEvoVariableIDTerminalRuleCall_2_1_0_1 = (RuleCall)cElementsEvoVariableCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cElementsEvoVariableCrossReference_2_2_1_0 = (CrossReference)cElementsAssignment_2_2_1.eContents().get(0);
		private final RuleCall cElementsEvoVariableIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cElementsEvoVariableCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//EvoSetVariable:
		//	'set' name=ID ('(' elements+=[EvoVariable] (',' elements+=[EvoVariable]) ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'set' name=ID ('(' elements+=[EvoVariable] (',' elements+=[EvoVariable]) ')')?
		public Group getGroup() { return cGroup; }
		
		//'set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' elements+=[EvoVariable] (',' elements+=[EvoVariable]) ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//elements+=[EvoVariable]
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }
		
		//[EvoVariable]
		public CrossReference getElementsEvoVariableCrossReference_2_1_0() { return cElementsEvoVariableCrossReference_2_1_0; }
		
		//ID
		public RuleCall getElementsEvoVariableIDTerminalRuleCall_2_1_0_1() { return cElementsEvoVariableIDTerminalRuleCall_2_1_0_1; }
		
		//',' elements+=[EvoVariable]
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//elements+=[EvoVariable]
		public Assignment getElementsAssignment_2_2_1() { return cElementsAssignment_2_2_1; }
		
		//[EvoVariable]
		public CrossReference getElementsEvoVariableCrossReference_2_2_1_0() { return cElementsEvoVariableCrossReference_2_2_1_0; }
		
		//ID
		public RuleCall getElementsEvoVariableIDTerminalRuleCall_2_2_1_0_1() { return cElementsEvoVariableIDTerminalRuleCall_2_2_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	public class EvoMappingVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.evolution.variable.EvoVariableDsl.EvoMappingVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EvoMappingVariable:
		//	'mapping' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'mapping' name=ID
		public Group getGroup() { return cGroup; }
		
		//'mapping'
		public Keyword getMappingKeyword_0() { return cMappingKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class EvoConfigurationVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.evolution.variable.EvoVariableDsl.EvoConfigurationVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigurationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EvoConfigurationVariable:
		//	'configuration' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'configuration' name=ID
		public Group getGroup() { return cGroup; }
		
		//'configuration'
		public Keyword getConfigurationKeyword_0() { return cConfigurationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.evolution.variable.EvoVariableDsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ("." ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	public class EvoFeatureVariableTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.evolution.variable.EvoVariableDsl.EvoFeatureVariableType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEvoParentEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEvoParentParentOfKeyword_0_0 = (Keyword)cEvoParentEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEvoSiblingEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEvoSiblingSiblingOfKeyword_1_0 = (Keyword)cEvoSiblingEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEvoChildEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEvoChildChildOfKeyword_2_0 = (Keyword)cEvoChildEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum EvoFeatureVariableType:
		//	EvoParent='parentOf' |
		//	EvoSibling='siblingOf' |
		//	EvoChild='childOf';
		public EnumRule getRule() { return rule; }
		
		//EvoParent='parentOf' | EvoSibling='siblingOf' | EvoChild='childOf'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EvoParent='parentOf'
		public EnumLiteralDeclaration getEvoParentEnumLiteralDeclaration_0() { return cEvoParentEnumLiteralDeclaration_0; }
		
		//'parentOf'
		public Keyword getEvoParentParentOfKeyword_0_0() { return cEvoParentParentOfKeyword_0_0; }
		
		//EvoSibling='siblingOf'
		public EnumLiteralDeclaration getEvoSiblingEnumLiteralDeclaration_1() { return cEvoSiblingEnumLiteralDeclaration_1; }
		
		//'siblingOf'
		public Keyword getEvoSiblingSiblingOfKeyword_1_0() { return cEvoSiblingSiblingOfKeyword_1_0; }
		
		//EvoChild='childOf'
		public EnumLiteralDeclaration getEvoChildEnumLiteralDeclaration_2() { return cEvoChildEnumLiteralDeclaration_2; }
		
		//'childOf'
		public Keyword getEvoChildChildOfKeyword_2_0() { return cEvoChildChildOfKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final EvoVariableElements pEvoVariable;
	private final EvoFeatureVariableElements pEvoFeatureVariable;
	private final EvoFeatureRelationElements pEvoFeatureRelation;
	private final EvoGroupVariableElements pEvoGroupVariable;
	private final EvoSetVariableElements pEvoSetVariable;
	private final EvoMappingVariableElements pEvoMappingVariable;
	private final EvoConfigurationVariableElements pEvoConfigurationVariable;
	private final EvoFeatureVariableTypeElements eEvoFeatureVariableType;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EvoVariableDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pEvoVariable = new EvoVariableElements();
		this.pEvoFeatureVariable = new EvoFeatureVariableElements();
		this.pEvoFeatureRelation = new EvoFeatureRelationElements();
		this.pEvoGroupVariable = new EvoGroupVariableElements();
		this.pEvoSetVariable = new EvoSetVariableElements();
		this.pEvoMappingVariable = new EvoMappingVariableElements();
		this.pEvoConfigurationVariable = new EvoConfigurationVariableElements();
		this.eEvoFeatureVariableType = new EvoFeatureVariableTypeElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.evorepair.evolution.variable.EvoVariableDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	'import' importURI=QualifiedName
	//	variables+=EvoVariable*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//EvoVariable:
	//	EvoConfigurationVariable | EvoFeatureVariable | EvoGroupVariable | EvoSetVariable | EvoMappingVariable;
	public EvoVariableElements getEvoVariableAccess() {
		return pEvoVariable;
	}
	
	public ParserRule getEvoVariableRule() {
		return getEvoVariableAccess().getRule();
	}
	
	//EvoFeatureVariable:
	//	'feature' name=ID relation=EvoFeatureRelation? ('value' '=' feature=[feature::HyFeature|QualifiedName])?;
	public EvoFeatureVariableElements getEvoFeatureVariableAccess() {
		return pEvoFeatureVariable;
	}
	
	public ParserRule getEvoFeatureVariableRule() {
		return getEvoFeatureVariableAccess().getRule();
	}
	
	//EvoFeatureRelation:
	//	featureType=EvoFeatureVariableType '(' relatedFeatures+=[EvoFeatureVariable] (','
	//	relatedFeatures+=[EvoFeatureVariable])? ')';
	public EvoFeatureRelationElements getEvoFeatureRelationAccess() {
		return pEvoFeatureRelation;
	}
	
	public ParserRule getEvoFeatureRelationRule() {
		return getEvoFeatureRelationAccess().getRule();
	}
	
	//EvoGroupVariable:
	//	'group' name=ID ('value' '=' group=[feature::HyGroup|QualifiedName])?;
	public EvoGroupVariableElements getEvoGroupVariableAccess() {
		return pEvoGroupVariable;
	}
	
	public ParserRule getEvoGroupVariableRule() {
		return getEvoGroupVariableAccess().getRule();
	}
	
	//EvoSetVariable:
	//	'set' name=ID ('(' elements+=[EvoVariable] (',' elements+=[EvoVariable]) ')')?;
	public EvoSetVariableElements getEvoSetVariableAccess() {
		return pEvoSetVariable;
	}
	
	public ParserRule getEvoSetVariableRule() {
		return getEvoSetVariableAccess().getRule();
	}
	
	//EvoMappingVariable:
	//	'mapping' name=ID;
	public EvoMappingVariableElements getEvoMappingVariableAccess() {
		return pEvoMappingVariable;
	}
	
	public ParserRule getEvoMappingVariableRule() {
		return getEvoMappingVariableAccess().getRule();
	}
	
	//EvoConfigurationVariable:
	//	'configuration' name=ID;
	public EvoConfigurationVariableElements getEvoConfigurationVariableAccess() {
		return pEvoConfigurationVariable;
	}
	
	public ParserRule getEvoConfigurationVariableRule() {
		return getEvoConfigurationVariableAccess().getRule();
	}
	
	//enum EvoFeatureVariableType:
	//	EvoParent='parentOf' |
	//	EvoSibling='siblingOf' |
	//	EvoChild='childOf';
	public EvoFeatureVariableTypeElements getEvoFeatureVariableTypeAccess() {
		return eEvoFeatureVariableType;
	}
	
	public EnumRule getEvoFeatureVariableTypeRule() {
		return getEvoFeatureVariableTypeAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
