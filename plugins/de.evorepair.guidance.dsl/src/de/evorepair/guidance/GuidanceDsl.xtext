grammar de.evorepair.guidance.GuidanceDsl with de.evorepair.logic.EvoDsl

import "http://darwinspl.de/evorepair/logic/dsl"

generate guidancedsl "http://darwinspl.de/evorepair/guidance/dsl" 

import "http://darwinspl.de/evorepair/guidance/catalog/0.1"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://hyvar-project.eu/feature/1.0" as hyfeature
import "http://darwinspl.de/evorepair/logic/0.3" 
import "http://darwinspl.de/evorepair/variable/0.2" as evovariables
import "http://darwinspl.de/evorepair/evolutionoperation/0.1" as evooperations

GrammarEntry:
    table=EvoGuidanceContainer;


EvoGuidanceContainer:
	{EvoGuidanceContainer}(tables+=EvoGuidanceTable)*;
	
	
EvoGuidanceTable returns EvoGuidanceTable: 
	'guidance_table' '=' '{'
		'trigger' '=' '{'
			triggeringOperations+=[evooperations::EvoOperation] ( ";" triggeringOperations+=[evooperations::EvoOperation])*
		'}'
		
		'anomalies' '=' '{'
			anomalies+=EvoAnomaly
		'}'
	'}';


EvoAnomaly returns EvoAnomaly:
 	'anomaly' id=ID '=' '{'
		('type' type=EvoAnomalyType)?
		('category' '=' category=EvoAnomalyCategory)?
		'condition' '=' condition=EvoFormula
		'guidances' '=' '{' 
			guidance+=EvoGuidanceElement
		'}' 
	'}';
	
	
EvoGuidanceElement:
	'guidance' '=' '{'
		'type' '=' type=EvoGuidanceType
		('description' '=' description=STRING)?
		('action' '=' action=EvoFormula)?
	'}';

@Override 
EvoFormula returns EvoFormula:	
	term=EvoAbstractTerm;

enum EvoAnomalyType returns EvoAnomalyType:
	DEFECT = 'Defect' | BEHAVIORAL_CHANGE = 'Behavioral Change';


enum EvoAnomalyCategory returns EvoAnomalyCategory:
	CONFIGURATION = 'Configuration' | MAPPING = 'Mapping';


enum EvoGuidanceType returns EvoGuidanceType:
				REPAIR_SUGGESTION = 'Repair Suggestion' | WARNING = 'Warning';
