/*
 * generated by Xtext 2.11.0
 */
package de.evorepair.logic.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EvoLogicLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class CommandDocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.logic.EvoLogicLanguage.CommandDocument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cFormulaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFormulaEvoFormulaParserRuleCall_1_0 = (RuleCall)cFormulaAssignment_1.eContents().get(0);
		
		//CommandDocument:
		//	imports+=Import
		//	formula=EvoFormula;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=Import formula=EvoFormula
		public Group getGroup() { return cGroup; }
		
		//imports+=Import
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }
		
		//formula=EvoFormula
		public Assignment getFormulaAssignment_1() { return cFormulaAssignment_1; }
		
		//EvoFormula
		public RuleCall getFormulaEvoFormulaParserRuleCall_1_0() { return cFormulaEvoFormulaParserRuleCall_1_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.logic.EvoLogicLanguage.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' importURI=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importURI=STRING
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}
	public class EvoFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.logic.EvoLogicLanguage.EvoFormula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFormulaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVariablesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cVariablesAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cVariablesEvoVariableParserRuleCall_2_2_0 = (RuleCall)cVariablesAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cVariablesAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cVariablesEvoVariableParserRuleCall_2_3_1_0 = (RuleCall)cVariablesAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cTermKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTermAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTermEvoAbstractTermParserRuleCall_4_0 = (RuleCall)cTermAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EvoFormula:
		//	'formula'
		//	'{' ('variables' '{'
		//	variables+=EvoVariable ("," variables+=EvoVariable)*
		//	'}')?
		//	'term' term=EvoAbstractTerm
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'formula' '{' ('variables' '{' variables+=EvoVariable ("," variables+=EvoVariable)* '}')? 'term' term=EvoAbstractTerm
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'formula'
		public Keyword getFormulaKeyword_0() { return cFormulaKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('variables' '{' variables+=EvoVariable ("," variables+=EvoVariable)* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'variables'
		public Keyword getVariablesKeyword_2_0() { return cVariablesKeyword_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//variables+=EvoVariable
		public Assignment getVariablesAssignment_2_2() { return cVariablesAssignment_2_2; }
		
		//EvoVariable
		public RuleCall getVariablesEvoVariableParserRuleCall_2_2_0() { return cVariablesEvoVariableParserRuleCall_2_2_0; }
		
		//("," variables+=EvoVariable)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//variables+=EvoVariable
		public Assignment getVariablesAssignment_2_3_1() { return cVariablesAssignment_2_3_1; }
		
		//EvoVariable
		public RuleCall getVariablesEvoVariableParserRuleCall_2_3_1_0() { return cVariablesEvoVariableParserRuleCall_2_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
		
		//'term'
		public Keyword getTermKeyword_3() { return cTermKeyword_3; }
		
		//term=EvoAbstractTerm
		public Assignment getTermAssignment_4() { return cTermAssignment_4; }
		
		//EvoAbstractTerm
		public RuleCall getTermEvoAbstractTermParserRuleCall_4_0() { return cTermEvoAbstractTermParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EvoVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.logic.EvoLogicLanguage.EvoVariable");
		private final RuleCall cEvoArbitratyFeatureVariableParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EvoVariable:
		//	EvoArbitratyFeatureVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoArbitratyFeatureVariable
		public RuleCall getEvoArbitratyFeatureVariableParserRuleCall() { return cEvoArbitratyFeatureVariableParserRuleCall; }
	}
	public class EvoVariableTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.logic.EvoLogicLanguage.EvoVariableTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEvoVariableTermKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cVariableKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cVariableEvoVariableCrossReference_3_0 = (CrossReference)cVariableAssignment_3.eContents().get(0);
		private final RuleCall cVariableEvoVariableIDTerminalRuleCall_3_0_1 = (RuleCall)cVariableEvoVariableCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EvoVariableTerm:
		//	'EvoVariableTerm'
		//	'{'
		//	'variable' variable=[EvoVariable]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'EvoVariableTerm' '{' 'variable' variable=[EvoVariable] '}'
		public Group getGroup() { return cGroup; }
		
		//'EvoVariableTerm'
		public Keyword getEvoVariableTermKeyword_0() { return cEvoVariableTermKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'variable'
		public Keyword getVariableKeyword_2() { return cVariableKeyword_2; }
		
		//variable=[EvoVariable]
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }
		
		//[EvoVariable]
		public CrossReference getVariableEvoVariableCrossReference_3_0() { return cVariableEvoVariableCrossReference_3_0; }
		
		//ID
		public RuleCall getVariableEvoVariableIDTerminalRuleCall_3_0_1() { return cVariableEvoVariableIDTerminalRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EvoArbitratyFeatureVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.logic.EvoLogicLanguage.EvoArbitratyFeatureVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAfeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureHyFeatureCrossReference_1_0 = (CrossReference)cFeatureAssignment_1.eContents().get(0);
		private final RuleCall cFeatureHyFeatureIDTerminalRuleCall_1_0_1 = (RuleCall)cFeatureHyFeatureCrossReference_1_0.eContents().get(1);
		
		//EvoArbitratyFeatureVariable:
		//	'afeature' feature=[hyfeature::HyFeature];
		@Override public ParserRule getRule() { return rule; }
		
		//'afeature' feature=[hyfeature::HyFeature]
		public Group getGroup() { return cGroup; }
		
		//'afeature'
		public Keyword getAfeatureKeyword_0() { return cAfeatureKeyword_0; }
		
		//feature=[hyfeature::HyFeature]
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }
		
		//[hyfeature::HyFeature]
		public CrossReference getFeatureHyFeatureCrossReference_1_0() { return cFeatureHyFeatureCrossReference_1_0; }
		
		//ID
		public RuleCall getFeatureHyFeatureIDTerminalRuleCall_1_0_1() { return cFeatureHyFeatureIDTerminalRuleCall_1_0_1; }
	}
	public class EvoAbstractTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.logic.EvoLogicLanguage.EvoAbstractTerm");
		private final RuleCall cEvoOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EvoAbstractTerm:
		//	EvoOr;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoOr
		public RuleCall getEvoOrParserRuleCall() { return cEvoOrParserRuleCall; }
	}
	public class EvoOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.logic.EvoLogicLanguage.EvoOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEvoAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEvoOrLeftElementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cOrKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRightElementAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightElementEvoAndParserRuleCall_1_2_0 = (RuleCall)cRightElementAssignment_1_2.eContents().get(0);
		
		//EvoOr EvoAbstractTerm:
		//	EvoAnd ({EvoOr.leftElement=current} ('or' | '||') rightElement=EvoAnd)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoAnd ({EvoOr.leftElement=current} ('or' | '||') rightElement=EvoAnd)*
		public Group getGroup() { return cGroup; }
		
		//EvoAnd
		public RuleCall getEvoAndParserRuleCall_0() { return cEvoAndParserRuleCall_0; }
		
		//({EvoOr.leftElement=current} ('or' | '||') rightElement=EvoAnd)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{EvoOr.leftElement=current}
		public Action getEvoOrLeftElementAction_1_0() { return cEvoOrLeftElementAction_1_0; }
		
		//'or' | '||'
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'or'
		public Keyword getOrKeyword_1_1_0() { return cOrKeyword_1_1_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_1_1() { return cVerticalLineVerticalLineKeyword_1_1_1; }
		
		//rightElement=EvoAnd
		public Assignment getRightElementAssignment_1_2() { return cRightElementAssignment_1_2; }
		
		//EvoAnd
		public RuleCall getRightElementEvoAndParserRuleCall_1_2_0() { return cRightElementEvoAndParserRuleCall_1_2_0; }
	}
	public class EvoXOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.logic.EvoLogicLanguage.EvoXOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEvoAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEvoXOrLeftElementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cXorKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightElementAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightElementEvoAndParserRuleCall_1_2_0 = (RuleCall)cRightElementAssignment_1_2.eContents().get(0);
		
		//EvoXOr EvoAbstractTerm:
		//	EvoAnd ({EvoXOr.leftElement=current} 'xor' rightElement=EvoAnd)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoAnd ({EvoXOr.leftElement=current} 'xor' rightElement=EvoAnd)*
		public Group getGroup() { return cGroup; }
		
		//EvoAnd
		public RuleCall getEvoAndParserRuleCall_0() { return cEvoAndParserRuleCall_0; }
		
		//({EvoXOr.leftElement=current} 'xor' rightElement=EvoAnd)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{EvoXOr.leftElement=current}
		public Action getEvoXOrLeftElementAction_1_0() { return cEvoXOrLeftElementAction_1_0; }
		
		//'xor'
		public Keyword getXorKeyword_1_1() { return cXorKeyword_1_1; }
		
		//rightElement=EvoAnd
		public Assignment getRightElementAssignment_1_2() { return cRightElementAssignment_1_2; }
		
		//EvoAnd
		public RuleCall getRightElementEvoAndParserRuleCall_1_2_0() { return cRightElementEvoAndParserRuleCall_1_2_0; }
	}
	public class EvoAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.logic.EvoLogicLanguage.EvoAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEvoAbstractOneParameterTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEvoAndLeftElementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cAndKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRightElementAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightElementEvoAbstractOneParameterTermParserRuleCall_1_2_0 = (RuleCall)cRightElementAssignment_1_2.eContents().get(0);
		
		//EvoAnd EvoAbstractTerm:
		//	EvoAbstractOneParameterTerm ({EvoAnd.leftElement=current} ('and' | '&&') rightElement=EvoAbstractOneParameterTerm)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoAbstractOneParameterTerm ({EvoAnd.leftElement=current} ('and' | '&&') rightElement=EvoAbstractOneParameterTerm)*
		public Group getGroup() { return cGroup; }
		
		//EvoAbstractOneParameterTerm
		public RuleCall getEvoAbstractOneParameterTermParserRuleCall_0() { return cEvoAbstractOneParameterTermParserRuleCall_0; }
		
		//({EvoAnd.leftElement=current} ('and' | '&&') rightElement=EvoAbstractOneParameterTerm)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{EvoAnd.leftElement=current}
		public Action getEvoAndLeftElementAction_1_0() { return cEvoAndLeftElementAction_1_0; }
		
		//'and' | '&&'
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'and'
		public Keyword getAndKeyword_1_1_0() { return cAndKeyword_1_1_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_1_1() { return cAmpersandAmpersandKeyword_1_1_1; }
		
		//rightElement=EvoAbstractOneParameterTerm
		public Assignment getRightElementAssignment_1_2() { return cRightElementAssignment_1_2; }
		
		//EvoAbstractOneParameterTerm
		public RuleCall getRightElementEvoAbstractOneParameterTermParserRuleCall_1_2_0() { return cRightElementEvoAbstractOneParameterTermParserRuleCall_1_2_0; }
	}
	public class EvoAbstractOneParameterTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.logic.EvoLogicLanguage.EvoAbstractOneParameterTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEvoVariableTermParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cEvoOrParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//EvoAbstractOneParameterTerm EvoAbstractTerm:
		//	EvoVariableTerm | '(' EvoOr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//EvoVariableTerm | '(' EvoOr ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EvoVariableTerm
		public RuleCall getEvoVariableTermParserRuleCall_0() { return cEvoVariableTermParserRuleCall_0; }
		
		//'(' EvoOr ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//EvoOr
		public RuleCall getEvoOrParserRuleCall_1_1() { return cEvoOrParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	
	
	private final CommandDocumentElements pCommandDocument;
	private final ImportElements pImport;
	private final EvoFormulaElements pEvoFormula;
	private final EvoVariableElements pEvoVariable;
	private final EvoVariableTermElements pEvoVariableTerm;
	private final EvoArbitratyFeatureVariableElements pEvoArbitratyFeatureVariable;
	private final EvoAbstractTermElements pEvoAbstractTerm;
	private final EvoOrElements pEvoOr;
	private final EvoXOrElements pEvoXOr;
	private final EvoAndElements pEvoAnd;
	private final EvoAbstractOneParameterTermElements pEvoAbstractOneParameterTerm;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EvoLogicLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCommandDocument = new CommandDocumentElements();
		this.pImport = new ImportElements();
		this.pEvoFormula = new EvoFormulaElements();
		this.pEvoVariable = new EvoVariableElements();
		this.pEvoVariableTerm = new EvoVariableTermElements();
		this.pEvoArbitratyFeatureVariable = new EvoArbitratyFeatureVariableElements();
		this.pEvoAbstractTerm = new EvoAbstractTermElements();
		this.pEvoOr = new EvoOrElements();
		this.pEvoXOr = new EvoXOrElements();
		this.pEvoAnd = new EvoAndElements();
		this.pEvoAbstractOneParameterTerm = new EvoAbstractOneParameterTermElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.evorepair.logic.EvoLogicLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//CommandDocument:
	//	imports+=Import
	//	formula=EvoFormula;
	public CommandDocumentElements getCommandDocumentAccess() {
		return pCommandDocument;
	}
	
	public ParserRule getCommandDocumentRule() {
		return getCommandDocumentAccess().getRule();
	}
	
	//Import:
	//	'import' importURI=STRING;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//EvoFormula:
	//	'formula'
	//	'{' ('variables' '{'
	//	variables+=EvoVariable ("," variables+=EvoVariable)*
	//	'}')?
	//	'term' term=EvoAbstractTerm
	//	'}';
	public EvoFormulaElements getEvoFormulaAccess() {
		return pEvoFormula;
	}
	
	public ParserRule getEvoFormulaRule() {
		return getEvoFormulaAccess().getRule();
	}
	
	//EvoVariable:
	//	EvoArbitratyFeatureVariable;
	public EvoVariableElements getEvoVariableAccess() {
		return pEvoVariable;
	}
	
	public ParserRule getEvoVariableRule() {
		return getEvoVariableAccess().getRule();
	}
	
	//EvoVariableTerm:
	//	'EvoVariableTerm'
	//	'{'
	//	'variable' variable=[EvoVariable]
	//	'}';
	public EvoVariableTermElements getEvoVariableTermAccess() {
		return pEvoVariableTerm;
	}
	
	public ParserRule getEvoVariableTermRule() {
		return getEvoVariableTermAccess().getRule();
	}
	
	//EvoArbitratyFeatureVariable:
	//	'afeature' feature=[hyfeature::HyFeature];
	public EvoArbitratyFeatureVariableElements getEvoArbitratyFeatureVariableAccess() {
		return pEvoArbitratyFeatureVariable;
	}
	
	public ParserRule getEvoArbitratyFeatureVariableRule() {
		return getEvoArbitratyFeatureVariableAccess().getRule();
	}
	
	//EvoAbstractTerm:
	//	EvoOr;
	public EvoAbstractTermElements getEvoAbstractTermAccess() {
		return pEvoAbstractTerm;
	}
	
	public ParserRule getEvoAbstractTermRule() {
		return getEvoAbstractTermAccess().getRule();
	}
	
	//EvoOr EvoAbstractTerm:
	//	EvoAnd ({EvoOr.leftElement=current} ('or' | '||') rightElement=EvoAnd)*;
	public EvoOrElements getEvoOrAccess() {
		return pEvoOr;
	}
	
	public ParserRule getEvoOrRule() {
		return getEvoOrAccess().getRule();
	}
	
	//EvoXOr EvoAbstractTerm:
	//	EvoAnd ({EvoXOr.leftElement=current} 'xor' rightElement=EvoAnd)*;
	public EvoXOrElements getEvoXOrAccess() {
		return pEvoXOr;
	}
	
	public ParserRule getEvoXOrRule() {
		return getEvoXOrAccess().getRule();
	}
	
	//EvoAnd EvoAbstractTerm:
	//	EvoAbstractOneParameterTerm ({EvoAnd.leftElement=current} ('and' | '&&') rightElement=EvoAbstractOneParameterTerm)*;
	public EvoAndElements getEvoAndAccess() {
		return pEvoAnd;
	}
	
	public ParserRule getEvoAndRule() {
		return getEvoAndAccess().getRule();
	}
	
	//EvoAbstractOneParameterTerm EvoAbstractTerm:
	//	EvoVariableTerm | '(' EvoOr ')';
	public EvoAbstractOneParameterTermElements getEvoAbstractOneParameterTermAccess() {
		return pEvoAbstractOneParameterTerm;
	}
	
	public ParserRule getEvoAbstractOneParameterTermRule() {
		return getEvoAbstractOneParameterTermAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
