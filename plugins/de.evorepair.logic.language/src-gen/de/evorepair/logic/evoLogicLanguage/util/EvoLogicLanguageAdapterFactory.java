/**
 * generated by Xtext 2.11.0
 */
package de.evorepair.logic.evoLogicLanguage.util;

import de.evorepair.logic.evoLogicLanguage.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see de.evorepair.logic.evoLogicLanguage.EvoLogicLanguagePackage
 * @generated
 */
public class EvoLogicLanguageAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static EvoLogicLanguagePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EvoLogicLanguageAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = EvoLogicLanguagePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EvoLogicLanguageSwitch<Adapter> modelSwitch =
    new EvoLogicLanguageSwitch<Adapter>()
    {
      @Override
      public Adapter caseCommandDocument(CommandDocument object)
      {
        return createCommandDocumentAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseEvoFormula(EvoFormula object)
      {
        return createEvoFormulaAdapter();
      }
      @Override
      public Adapter caseEvoVariable(EvoVariable object)
      {
        return createEvoVariableAdapter();
      }
      @Override
      public Adapter caseEvoVariableTerm(EvoVariableTerm object)
      {
        return createEvoVariableTermAdapter();
      }
      @Override
      public Adapter caseEvoArbitratyFeatureVariable(EvoArbitratyFeatureVariable object)
      {
        return createEvoArbitratyFeatureVariableAdapter();
      }
      @Override
      public Adapter caseEvoAbstractTerm(EvoAbstractTerm object)
      {
        return createEvoAbstractTermAdapter();
      }
      @Override
      public Adapter caseEvoOr(EvoOr object)
      {
        return createEvoOrAdapter();
      }
      @Override
      public Adapter caseEvoXOr(EvoXOr object)
      {
        return createEvoXOrAdapter();
      }
      @Override
      public Adapter caseEvoAnd(EvoAnd object)
      {
        return createEvoAndAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link de.evorepair.logic.evoLogicLanguage.CommandDocument <em>Command Document</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.evorepair.logic.evoLogicLanguage.CommandDocument
   * @generated
   */
  public Adapter createCommandDocumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.evorepair.logic.evoLogicLanguage.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.evorepair.logic.evoLogicLanguage.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.evorepair.logic.evoLogicLanguage.EvoFormula <em>Evo Formula</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.evorepair.logic.evoLogicLanguage.EvoFormula
   * @generated
   */
  public Adapter createEvoFormulaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.evorepair.logic.evoLogicLanguage.EvoVariable <em>Evo Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.evorepair.logic.evoLogicLanguage.EvoVariable
   * @generated
   */
  public Adapter createEvoVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.evorepair.logic.evoLogicLanguage.EvoVariableTerm <em>Evo Variable Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.evorepair.logic.evoLogicLanguage.EvoVariableTerm
   * @generated
   */
  public Adapter createEvoVariableTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.evorepair.logic.evoLogicLanguage.EvoArbitratyFeatureVariable <em>Evo Arbitraty Feature Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.evorepair.logic.evoLogicLanguage.EvoArbitratyFeatureVariable
   * @generated
   */
  public Adapter createEvoArbitratyFeatureVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.evorepair.logic.evoLogicLanguage.EvoAbstractTerm <em>Evo Abstract Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.evorepair.logic.evoLogicLanguage.EvoAbstractTerm
   * @generated
   */
  public Adapter createEvoAbstractTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.evorepair.logic.evoLogicLanguage.EvoOr <em>Evo Or</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.evorepair.logic.evoLogicLanguage.EvoOr
   * @generated
   */
  public Adapter createEvoOrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.evorepair.logic.evoLogicLanguage.EvoXOr <em>Evo XOr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.evorepair.logic.evoLogicLanguage.EvoXOr
   * @generated
   */
  public Adapter createEvoXOrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.evorepair.logic.evoLogicLanguage.EvoAnd <em>Evo And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.evorepair.logic.evoLogicLanguage.EvoAnd
   * @generated
   */
  public Adapter createEvoAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //EvoLogicLanguageAdapterFactory
