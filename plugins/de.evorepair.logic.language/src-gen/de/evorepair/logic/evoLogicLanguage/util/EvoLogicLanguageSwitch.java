/**
 * generated by Xtext 2.11.0
 */
package de.evorepair.logic.evoLogicLanguage.util;

import de.evorepair.logic.evoLogicLanguage.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see de.evorepair.logic.evoLogicLanguage.EvoLogicLanguagePackage
 * @generated
 */
public class EvoLogicLanguageSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static EvoLogicLanguagePackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EvoLogicLanguageSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = EvoLogicLanguagePackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case EvoLogicLanguagePackage.COMMAND_DOCUMENT:
      {
        CommandDocument commandDocument = (CommandDocument)theEObject;
        T result = caseCommandDocument(commandDocument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EvoLogicLanguagePackage.IMPORT:
      {
        Import import_ = (Import)theEObject;
        T result = caseImport(import_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EvoLogicLanguagePackage.EVO_FORMULA:
      {
        EvoFormula evoFormula = (EvoFormula)theEObject;
        T result = caseEvoFormula(evoFormula);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EvoLogicLanguagePackage.EVO_VARIABLE:
      {
        EvoVariable evoVariable = (EvoVariable)theEObject;
        T result = caseEvoVariable(evoVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EvoLogicLanguagePackage.EVO_VARIABLE_TERM:
      {
        EvoVariableTerm evoVariableTerm = (EvoVariableTerm)theEObject;
        T result = caseEvoVariableTerm(evoVariableTerm);
        if (result == null) result = caseEvoAbstractTerm(evoVariableTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EvoLogicLanguagePackage.EVO_ARBITRATY_FEATURE_VARIABLE:
      {
        EvoArbitratyFeatureVariable evoArbitratyFeatureVariable = (EvoArbitratyFeatureVariable)theEObject;
        T result = caseEvoArbitratyFeatureVariable(evoArbitratyFeatureVariable);
        if (result == null) result = caseEvoVariable(evoArbitratyFeatureVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EvoLogicLanguagePackage.EVO_ABSTRACT_TERM:
      {
        EvoAbstractTerm evoAbstractTerm = (EvoAbstractTerm)theEObject;
        T result = caseEvoAbstractTerm(evoAbstractTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EvoLogicLanguagePackage.EVO_OR:
      {
        EvoOr evoOr = (EvoOr)theEObject;
        T result = caseEvoOr(evoOr);
        if (result == null) result = caseEvoAbstractTerm(evoOr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EvoLogicLanguagePackage.EVO_XOR:
      {
        EvoXOr evoXOr = (EvoXOr)theEObject;
        T result = caseEvoXOr(evoXOr);
        if (result == null) result = caseEvoAbstractTerm(evoXOr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case EvoLogicLanguagePackage.EVO_AND:
      {
        EvoAnd evoAnd = (EvoAnd)theEObject;
        T result = caseEvoAnd(evoAnd);
        if (result == null) result = caseEvoAbstractTerm(evoAnd);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Command Document</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Command Document</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommandDocument(CommandDocument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImport(Import object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Evo Formula</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Evo Formula</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEvoFormula(EvoFormula object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Evo Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Evo Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEvoVariable(EvoVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Evo Variable Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Evo Variable Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEvoVariableTerm(EvoVariableTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Evo Arbitraty Feature Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Evo Arbitraty Feature Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEvoArbitratyFeatureVariable(EvoArbitratyFeatureVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Evo Abstract Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Evo Abstract Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEvoAbstractTerm(EvoAbstractTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Evo Or</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Evo Or</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEvoOr(EvoOr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Evo XOr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Evo XOr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEvoXOr(EvoXOr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Evo And</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Evo And</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEvoAnd(EvoAnd object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //EvoLogicLanguageSwitch
