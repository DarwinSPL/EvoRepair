/*
 * generated by Xtext 2.11.0
 */
grammar InternalEvoLogicLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.evorepair.logic.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.evorepair.logic.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.evorepair.logic.services.EvoLogicLanguageGrammarAccess;

}

@parser::members {

 	private EvoLogicLanguageGrammarAccess grammarAccess;

    public InternalEvoLogicLanguageParser(TokenStream input, EvoLogicLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "CommandDocument";
   	}

   	@Override
   	protected EvoLogicLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleCommandDocument
entryRuleCommandDocument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandDocumentRule()); }
	iv_ruleCommandDocument=ruleCommandDocument
	{ $current=$iv_ruleCommandDocument.current; }
	EOF;

// Rule CommandDocument
ruleCommandDocument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCommandDocumentAccess().getImportsImportParserRuleCall_0_0());
				}
				lv_imports_0_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommandDocumentRule());
					}
					add(
						$current,
						"imports",
						lv_imports_0_0,
						"de.evorepair.logic.EvoLogicLanguage.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCommandDocumentAccess().getFormulaEvoFormulaParserRuleCall_1_0());
				}
				lv_formula_1_0=ruleEvoFormula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommandDocumentRule());
					}
					set(
						$current,
						"formula",
						lv_formula_1_0,
						"de.evorepair.logic.EvoLogicLanguage.EvoFormula");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				lv_importURI_1_0=RULE_STRING
				{
					newLeafNode(lv_importURI_1_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportRule());
					}
					setWithLastConsumed(
						$current,
						"importURI",
						lv_importURI_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleEvoFormula
entryRuleEvoFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEvoFormulaRule()); }
	iv_ruleEvoFormula=ruleEvoFormula
	{ $current=$iv_ruleEvoFormula.current; }
	EOF;

// Rule EvoFormula
ruleEvoFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='formula'
		{
			newLeafNode(otherlv_0, grammarAccess.getEvoFormulaAccess().getFormulaKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getEvoFormulaAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			otherlv_2='variables'
			{
				newLeafNode(otherlv_2, grammarAccess.getEvoFormulaAccess().getVariablesKeyword_2_0());
			}
			otherlv_3='{'
			{
				newLeafNode(otherlv_3, grammarAccess.getEvoFormulaAccess().getLeftCurlyBracketKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEvoFormulaAccess().getVariablesEvoVariableParserRuleCall_2_2_0());
					}
					lv_variables_4_0=ruleEvoVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEvoFormulaRule());
						}
						add(
							$current,
							"variables",
							lv_variables_4_0,
							"de.evorepair.logic.EvoLogicLanguage.EvoVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getEvoFormulaAccess().getCommaKeyword_2_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getEvoFormulaAccess().getVariablesEvoVariableParserRuleCall_2_3_1_0());
						}
						lv_variables_6_0=ruleEvoVariable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEvoFormulaRule());
							}
							add(
								$current,
								"variables",
								lv_variables_6_0,
								"de.evorepair.logic.EvoLogicLanguage.EvoVariable");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_7='}'
			{
				newLeafNode(otherlv_7, grammarAccess.getEvoFormulaAccess().getRightCurlyBracketKeyword_2_4());
			}
		)?
		otherlv_8='term'
		{
			newLeafNode(otherlv_8, grammarAccess.getEvoFormulaAccess().getTermKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEvoFormulaAccess().getTermEvoAbstractTermParserRuleCall_4_0());
				}
				lv_term_9_0=ruleEvoAbstractTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEvoFormulaRule());
					}
					set(
						$current,
						"term",
						lv_term_9_0,
						"de.evorepair.logic.EvoLogicLanguage.EvoAbstractTerm");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getEvoFormulaAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleEvoVariable
entryRuleEvoVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEvoVariableRule()); }
	iv_ruleEvoVariable=ruleEvoVariable
	{ $current=$iv_ruleEvoVariable.current; }
	EOF;

// Rule EvoVariable
ruleEvoVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getEvoVariableAccess().getEvoArbitratyFeatureVariableParserRuleCall());
	}
	this_EvoArbitratyFeatureVariable_0=ruleEvoArbitratyFeatureVariable
	{
		$current = $this_EvoArbitratyFeatureVariable_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleEvoVariableTerm
entryRuleEvoVariableTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEvoVariableTermRule()); }
	iv_ruleEvoVariableTerm=ruleEvoVariableTerm
	{ $current=$iv_ruleEvoVariableTerm.current; }
	EOF;

// Rule EvoVariableTerm
ruleEvoVariableTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='EvoVariableTerm'
		{
			newLeafNode(otherlv_0, grammarAccess.getEvoVariableTermAccess().getEvoVariableTermKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getEvoVariableTermAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='variable'
		{
			newLeafNode(otherlv_2, grammarAccess.getEvoVariableTermAccess().getVariableKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEvoVariableTermRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getEvoVariableTermAccess().getVariableEvoVariableCrossReference_3_0());
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getEvoVariableTermAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleEvoArbitratyFeatureVariable
entryRuleEvoArbitratyFeatureVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEvoArbitratyFeatureVariableRule()); }
	iv_ruleEvoArbitratyFeatureVariable=ruleEvoArbitratyFeatureVariable
	{ $current=$iv_ruleEvoArbitratyFeatureVariable.current; }
	EOF;

// Rule EvoArbitratyFeatureVariable
ruleEvoArbitratyFeatureVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='afeature'
		{
			newLeafNode(otherlv_0, grammarAccess.getEvoArbitratyFeatureVariableAccess().getAfeatureKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEvoArbitratyFeatureVariableRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getEvoArbitratyFeatureVariableAccess().getFeatureHyFeatureCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleEvoAbstractTerm
entryRuleEvoAbstractTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEvoAbstractTermRule()); }
	iv_ruleEvoAbstractTerm=ruleEvoAbstractTerm
	{ $current=$iv_ruleEvoAbstractTerm.current; }
	EOF;

// Rule EvoAbstractTerm
ruleEvoAbstractTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getEvoAbstractTermAccess().getEvoOrParserRuleCall());
	}
	this_EvoOr_0=ruleEvoOr
	{
		$current = $this_EvoOr_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleEvoOr
entryRuleEvoOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEvoOrRule()); }
	iv_ruleEvoOr=ruleEvoOr
	{ $current=$iv_ruleEvoOr.current; }
	EOF;

// Rule EvoOr
ruleEvoOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEvoOrAccess().getEvoAndParserRuleCall_0());
		}
		this_EvoAnd_0=ruleEvoAnd
		{
			$current = $this_EvoAnd_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEvoOrAccess().getEvoOrLeftElementAction_1_0(),
						$current);
				}
			)
			(
				otherlv_2='or'
				{
					newLeafNode(otherlv_2, grammarAccess.getEvoOrAccess().getOrKeyword_1_1_0());
				}
				    |
				otherlv_3='||'
				{
					newLeafNode(otherlv_3, grammarAccess.getEvoOrAccess().getVerticalLineVerticalLineKeyword_1_1_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEvoOrAccess().getRightElementEvoAndParserRuleCall_1_2_0());
					}
					lv_rightElement_4_0=ruleEvoAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEvoOrRule());
						}
						set(
							$current,
							"rightElement",
							lv_rightElement_4_0,
							"de.evorepair.logic.EvoLogicLanguage.EvoAnd");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEvoAnd
entryRuleEvoAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEvoAndRule()); }
	iv_ruleEvoAnd=ruleEvoAnd
	{ $current=$iv_ruleEvoAnd.current; }
	EOF;

// Rule EvoAnd
ruleEvoAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEvoAndAccess().getEvoAbstractOneParameterTermParserRuleCall_0());
		}
		this_EvoAbstractOneParameterTerm_0=ruleEvoAbstractOneParameterTerm
		{
			$current = $this_EvoAbstractOneParameterTerm_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEvoAndAccess().getEvoAndLeftElementAction_1_0(),
						$current);
				}
			)
			(
				otherlv_2='and'
				{
					newLeafNode(otherlv_2, grammarAccess.getEvoAndAccess().getAndKeyword_1_1_0());
				}
				    |
				otherlv_3='&&'
				{
					newLeafNode(otherlv_3, grammarAccess.getEvoAndAccess().getAmpersandAmpersandKeyword_1_1_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEvoAndAccess().getRightElementEvoAbstractOneParameterTermParserRuleCall_1_2_0());
					}
					lv_rightElement_4_0=ruleEvoAbstractOneParameterTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEvoAndRule());
						}
						set(
							$current,
							"rightElement",
							lv_rightElement_4_0,
							"de.evorepair.logic.EvoLogicLanguage.EvoAbstractOneParameterTerm");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEvoAbstractOneParameterTerm
entryRuleEvoAbstractOneParameterTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEvoAbstractOneParameterTermRule()); }
	iv_ruleEvoAbstractOneParameterTerm=ruleEvoAbstractOneParameterTerm
	{ $current=$iv_ruleEvoAbstractOneParameterTerm.current; }
	EOF;

// Rule EvoAbstractOneParameterTerm
ruleEvoAbstractOneParameterTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEvoAbstractOneParameterTermAccess().getEvoVariableTermParserRuleCall_0());
		}
		this_EvoVariableTerm_0=ruleEvoVariableTerm
		{
			$current = $this_EvoVariableTerm_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getEvoAbstractOneParameterTermAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getEvoAbstractOneParameterTermAccess().getEvoOrParserRuleCall_1_1());
			}
			this_EvoOr_2=ruleEvoOr
			{
				$current = $this_EvoOr_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getEvoAbstractOneParameterTermAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
