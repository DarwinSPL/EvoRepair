module de.evorepair.logic.GenerateEvoLogicLanguage

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.ui.generator.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."
var projectName = "../de.evorepair.logic.language"
var runtimeProject = "../${projectName}"


Workflow {
	component = org.eclipse.emf.mwe.utils.DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}
	component = org.eclipse.emf.mwe.utils.DirectoryCleaner {
		directory = "${runtimeProject}/.ui/src-gen"
	}	
	component = org.eclipse.emf.mwe.utils.DirectoryCleaner {
		directory = "${runtimeProject}/.tests/src-gen"
	}
				
	component = XtextGenerator {
		
		
		configuration = {
			
			project = StandardProjectConfig {
				baseName = "de.evorepair.logic.language"
				rootPath = rootPath
				runtimeTest = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
				}
				createEclipseMetaData = true
			}
			code = {
				
				encoding = "UTF-8"
				lineDelimiter = "\r\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = StandardLanguage {
			name = "de.evorepair.logic.EvoLogicLanguage"
			fileExtensions = "evologic"
			
			
			
			// register the hyfeature model for xtext to find it
			referencedResource = "platform:/resource/de.evorepair.logic.firstorder/model/EvoFirstOrder.genmodel"
			
			/*
    		// generates Java API for the generated EPackages
    		fragment = ecore.EMFGeneratorFragment2 auto-inject {}
    		
    		fragment = serializer.SerializerFragment2 auto-inject {
    			generateStub = false
    		}
    		fragment = resourceFactory.ResourceFactoryFragment2 auto-inject {}
        */
			serializer = {
				generateStub = false
			}
			validator = {
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}
		}
	}
}
