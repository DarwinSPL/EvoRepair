/*
 * generated by Xtext 2.12.0
 */
package de.evorepair.feature.mapping.repair.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.evorepair.feature.expression.services.EvoExpressionDslGrammarAccess;
import de.evorepair.logic.services.EvoLogicDslGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EvoMappingRepairDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MappingRepairGrammarEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.mapping.repair.dsl.EvoMappingRepairDsl.MappingRepairGrammarEntry");
		private final Assignment cActionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cActionEvoMappingRepairExpressionParserRuleCall_0 = (RuleCall)cActionAssignment.eContents().get(0);
		
		//MappingRepairGrammarEntry:
		//	action=EvoMappingRepairExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//action=EvoMappingRepairExpression
		public Assignment getActionAssignment() { return cActionAssignment; }
		
		//EvoMappingRepairExpression
		public RuleCall getActionEvoMappingRepairExpressionParserRuleCall_0() { return cActionEvoMappingRepairExpressionParserRuleCall_0; }
	}
	public class EvoMappingRepairExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.mapping.repair.dsl.EvoMappingRepairDsl.EvoMappingRepairExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEvoMappingKeepParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEvoMappingReplaceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EvoMappingRepairExpression dw_expression::HyExpression:
		//	EvoMappingKeep | EvoMappingReplace;
		@Override public ParserRule getRule() { return rule; }
		
		//EvoMappingKeep | EvoMappingReplace
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EvoMappingKeep
		public RuleCall getEvoMappingKeepParserRuleCall_0() { return cEvoMappingKeepParserRuleCall_0; }
		
		//EvoMappingReplace
		public RuleCall getEvoMappingReplaceParserRuleCall_1() { return cEvoMappingReplaceParserRuleCall_1; }
	}
	public class EvoMappingKeepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.mapping.repair.dsl.EvoMappingRepairDsl.EvoMappingKeep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKeepKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperandEvoMappingExpressionParserRuleCall_2_0 = (RuleCall)cOperandAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EvoMappingKeep:
		//	'keep' '(' operand=EvoMappingExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'keep' '(' operand=EvoMappingExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'keep'
		public Keyword getKeepKeyword_0() { return cKeepKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//operand=EvoMappingExpression
		public Assignment getOperandAssignment_2() { return cOperandAssignment_2; }
		
		//EvoMappingExpression
		public RuleCall getOperandEvoMappingExpressionParserRuleCall_2_0() { return cOperandEvoMappingExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class EvoMappingReplaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.feature.mapping.repair.dsl.EvoMappingRepairDsl.EvoMappingReplace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReplaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperand1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperand1EvoMappingExpressionParserRuleCall_2_0 = (RuleCall)cOperand1Assignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cWithKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOperand2Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOperand2EvoMappingExpressionParserRuleCall_6_0 = (RuleCall)cOperand2Assignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//EvoMappingReplace:
		//	'replace' '(' operand1=EvoMappingExpression ')' 'with' '(' operand2=EvoMappingExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'replace' '(' operand1=EvoMappingExpression ')' 'with' '(' operand2=EvoMappingExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'replace'
		public Keyword getReplaceKeyword_0() { return cReplaceKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//operand1=EvoMappingExpression
		public Assignment getOperand1Assignment_2() { return cOperand1Assignment_2; }
		
		//EvoMappingExpression
		public RuleCall getOperand1EvoMappingExpressionParserRuleCall_2_0() { return cOperand1EvoMappingExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'with'
		public Keyword getWithKeyword_4() { return cWithKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//operand2=EvoMappingExpression
		public Assignment getOperand2Assignment_6() { return cOperand2Assignment_6; }
		
		//EvoMappingExpression
		public RuleCall getOperand2EvoMappingExpressionParserRuleCall_6_0() { return cOperand2EvoMappingExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	
	
	private final MappingRepairGrammarEntryElements pMappingRepairGrammarEntry;
	private final EvoMappingRepairExpressionElements pEvoMappingRepairExpression;
	private final EvoMappingKeepElements pEvoMappingKeep;
	private final EvoMappingReplaceElements pEvoMappingReplace;
	
	private final Grammar grammar;
	
	private final EvoExpressionDslGrammarAccess gaEvoExpressionDsl;
	
	private final EvoLogicDslGrammarAccess gaEvoLogicDsl;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EvoMappingRepairDslGrammarAccess(GrammarProvider grammarProvider,
			EvoExpressionDslGrammarAccess gaEvoExpressionDsl,
			EvoLogicDslGrammarAccess gaEvoLogicDsl,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaEvoExpressionDsl = gaEvoExpressionDsl;
		this.gaEvoLogicDsl = gaEvoLogicDsl;
		this.gaTerminals = gaTerminals;
		this.pMappingRepairGrammarEntry = new MappingRepairGrammarEntryElements();
		this.pEvoMappingRepairExpression = new EvoMappingRepairExpressionElements();
		this.pEvoMappingKeep = new EvoMappingKeepElements();
		this.pEvoMappingReplace = new EvoMappingReplaceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.evorepair.feature.mapping.repair.dsl.EvoMappingRepairDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public EvoExpressionDslGrammarAccess getEvoExpressionDslGrammarAccess() {
		return gaEvoExpressionDsl;
	}
	
	public EvoLogicDslGrammarAccess getEvoLogicDslGrammarAccess() {
		return gaEvoLogicDsl;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MappingRepairGrammarEntry:
	//	action=EvoMappingRepairExpression;
	public MappingRepairGrammarEntryElements getMappingRepairGrammarEntryAccess() {
		return pMappingRepairGrammarEntry;
	}
	
	public ParserRule getMappingRepairGrammarEntryRule() {
		return getMappingRepairGrammarEntryAccess().getRule();
	}
	
	//EvoMappingRepairExpression dw_expression::HyExpression:
	//	EvoMappingKeep | EvoMappingReplace;
	public EvoMappingRepairExpressionElements getEvoMappingRepairExpressionAccess() {
		return pEvoMappingRepairExpression;
	}
	
	public ParserRule getEvoMappingRepairExpressionRule() {
		return getEvoMappingRepairExpressionAccess().getRule();
	}
	
	//EvoMappingKeep:
	//	'keep' '(' operand=EvoMappingExpression ')';
	public EvoMappingKeepElements getEvoMappingKeepAccess() {
		return pEvoMappingKeep;
	}
	
	public ParserRule getEvoMappingKeepRule() {
		return getEvoMappingKeepAccess().getRule();
	}
	
	//EvoMappingReplace:
	//	'replace' '(' operand1=EvoMappingExpression ')' 'with' '(' operand2=EvoMappingExpression ')';
	public EvoMappingReplaceElements getEvoMappingReplaceAccess() {
		return pEvoMappingReplace;
	}
	
	public ParserRule getEvoMappingReplaceRule() {
		return getEvoMappingReplaceAccess().getRule();
	}
	
	//@ Override GrammarEntry:
	//	expression=EvoMappingExpression;
	public EvoExpressionDslGrammarAccess.GrammarEntryElements getGrammarEntryAccess() {
		return gaEvoExpressionDsl.getGrammarEntryAccess();
	}
	
	public ParserRule getGrammarEntryRule() {
		return getGrammarEntryAccess().getRule();
	}
	
	//EvoMappingExpression dw_expression::HyExpression:
	//	EvoMappingOr;
	public EvoExpressionDslGrammarAccess.EvoMappingExpressionElements getEvoMappingExpressionAccess() {
		return gaEvoExpressionDsl.getEvoMappingExpressionAccess();
	}
	
	public ParserRule getEvoMappingExpressionRule() {
		return getEvoMappingExpressionAccess().getRule();
	}
	
	//EvoMappingOr dw_expression::HyExpression:
	//	EvoMappingAnd ({dw_expression::HyOrExpression.operand1=current} '||' operand2=EvoMappingAnd)*;
	public EvoExpressionDslGrammarAccess.EvoMappingOrElements getEvoMappingOrAccess() {
		return gaEvoExpressionDsl.getEvoMappingOrAccess();
	}
	
	public ParserRule getEvoMappingOrRule() {
		return getEvoMappingOrAccess().getRule();
	}
	
	//EvoMappingAnd dw_expression::HyExpression:
	//	EvoMappingEqual ({dw_expression::HyAndExpression.operand1=current} '&&' operand2=EvoMappingEqual)*;
	public EvoExpressionDslGrammarAccess.EvoMappingAndElements getEvoMappingAndAccess() {
		return gaEvoExpressionDsl.getEvoMappingAndAccess();
	}
	
	public ParserRule getEvoMappingAndRule() {
		return getEvoMappingAndAccess().getRule();
	}
	
	//EvoMappingEqual dw_expression::HyExpression:
	//	EvoMappingUnequal ({dw_expression::HyEqualExpression.operand1=current} '==' operand2=EvoMappingUnequal)*;
	public EvoExpressionDslGrammarAccess.EvoMappingEqualElements getEvoMappingEqualAccess() {
		return gaEvoExpressionDsl.getEvoMappingEqualAccess();
	}
	
	public ParserRule getEvoMappingEqualRule() {
		return getEvoMappingEqualAccess().getRule();
	}
	
	//EvoMappingUnequal dw_expression::HyExpression:
	//	EvoMappingImplication ({dw_expression::HyNotEqualExpression.operand1=current} '!=' operand2=EvoMappingImplication)*;
	public EvoExpressionDslGrammarAccess.EvoMappingUnequalElements getEvoMappingUnequalAccess() {
		return gaEvoExpressionDsl.getEvoMappingUnequalAccess();
	}
	
	public ParserRule getEvoMappingUnequalRule() {
		return getEvoMappingUnequalAccess().getRule();
	}
	
	//EvoMappingImplication dw_expression::HyExpression:
	//	EvoMappingEquivalence ({dw_expression::HyImpliesExpression.operand1=current} '->' operand2=EvoMappingEquivalence)*;
	public EvoExpressionDslGrammarAccess.EvoMappingImplicationElements getEvoMappingImplicationAccess() {
		return gaEvoExpressionDsl.getEvoMappingImplicationAccess();
	}
	
	public ParserRule getEvoMappingImplicationRule() {
		return getEvoMappingImplicationAccess().getRule();
	}
	
	//EvoMappingEquivalence dw_expression::HyExpression:
	//	EvoMappingLessExpression ({dw_expression::HyEquivalenceExpression.operand1=current} '<->'
	//	operand2=EvoMappingLessExpression)*;
	public EvoExpressionDslGrammarAccess.EvoMappingEquivalenceElements getEvoMappingEquivalenceAccess() {
		return gaEvoExpressionDsl.getEvoMappingEquivalenceAccess();
	}
	
	public ParserRule getEvoMappingEquivalenceRule() {
		return getEvoMappingEquivalenceAccess().getRule();
	}
	
	//EvoMappingLessExpression dw_expression::HyExpression:
	//	EvoMappingIfPossibleExpression ({dw_expression::HyLessExpression.operand1=current} '<'
	//	operand2=EvoMappingIfPossibleExpression)*;
	public EvoExpressionDslGrammarAccess.EvoMappingLessExpressionElements getEvoMappingLessExpressionAccess() {
		return gaEvoExpressionDsl.getEvoMappingLessExpressionAccess();
	}
	
	public ParserRule getEvoMappingLessExpressionRule() {
		return getEvoMappingLessExpressionAccess().getRule();
	}
	
	//EvoMappingIfPossibleExpression dw_expression::HyExpression:
	//	EvoMappingLessOrEqualExpression ("ifPossible(" {dw_expression::HyIfPossibleExpression.operands+=current} (','
	//	operands+=EvoMappingLessOrEqualExpression)* ")")*;
	public EvoExpressionDslGrammarAccess.EvoMappingIfPossibleExpressionElements getEvoMappingIfPossibleExpressionAccess() {
		return gaEvoExpressionDsl.getEvoMappingIfPossibleExpressionAccess();
	}
	
	public ParserRule getEvoMappingIfPossibleExpressionRule() {
		return getEvoMappingIfPossibleExpressionAccess().getRule();
	}
	
	//EvoMappingLessOrEqualExpression dw_expression::HyExpression:
	//	EvoMappingGreaterExpression ({dw_expression::HyLessOrEqualExpression.operand1=current} '<='
	//	operand2=EvoMappingGreaterExpression)*;
	public EvoExpressionDslGrammarAccess.EvoMappingLessOrEqualExpressionElements getEvoMappingLessOrEqualExpressionAccess() {
		return gaEvoExpressionDsl.getEvoMappingLessOrEqualExpressionAccess();
	}
	
	public ParserRule getEvoMappingLessOrEqualExpressionRule() {
		return getEvoMappingLessOrEqualExpressionAccess().getRule();
	}
	
	//EvoMappingGreaterExpression dw_expression::HyExpression:
	//	EvoMappingGreaterOrEqualExpression ({dw_expression::HyGreaterExpression.operand1=current} '>'
	//	operand2=EvoMappingGreaterOrEqualExpression)*;
	public EvoExpressionDslGrammarAccess.EvoMappingGreaterExpressionElements getEvoMappingGreaterExpressionAccess() {
		return gaEvoExpressionDsl.getEvoMappingGreaterExpressionAccess();
	}
	
	public ParserRule getEvoMappingGreaterExpressionRule() {
		return getEvoMappingGreaterExpressionAccess().getRule();
	}
	
	//EvoMappingGreaterOrEqualExpression dw_expression::HyExpression:
	//	EvoMappingSubtractionExpression ({dw_expression::HyGreaterOrEqualExpression.operand1=current} '>='
	//	operand2=EvoMappingSubtractionExpression)*;
	public EvoExpressionDslGrammarAccess.EvoMappingGreaterOrEqualExpressionElements getEvoMappingGreaterOrEqualExpressionAccess() {
		return gaEvoExpressionDsl.getEvoMappingGreaterOrEqualExpressionAccess();
	}
	
	public ParserRule getEvoMappingGreaterOrEqualExpressionRule() {
		return getEvoMappingGreaterOrEqualExpressionAccess().getRule();
	}
	
	//EvoMappingSubtractionExpression dw_expression::HyExpression:
	//	EvoMappingAdditionExpression ({dw_expression::HySubtractionExpression.operand1=current} '-'
	//	operand2=EvoMappingAdditionExpression)*;
	public EvoExpressionDslGrammarAccess.EvoMappingSubtractionExpressionElements getEvoMappingSubtractionExpressionAccess() {
		return gaEvoExpressionDsl.getEvoMappingSubtractionExpressionAccess();
	}
	
	public ParserRule getEvoMappingSubtractionExpressionRule() {
		return getEvoMappingSubtractionExpressionAccess().getRule();
	}
	
	//EvoMappingAdditionExpression dw_expression::HyExpression:
	//	EvoMappingModuloExpression ({dw_expression::HyAdditionExpression.operand1=current} '+'
	//	operand2=EvoMappingModuloExpression)*;
	public EvoExpressionDslGrammarAccess.EvoMappingAdditionExpressionElements getEvoMappingAdditionExpressionAccess() {
		return gaEvoExpressionDsl.getEvoMappingAdditionExpressionAccess();
	}
	
	public ParserRule getEvoMappingAdditionExpressionRule() {
		return getEvoMappingAdditionExpressionAccess().getRule();
	}
	
	//EvoMappingModuloExpression dw_expression::HyExpression:
	//	EvoMappingMultiplicationExpression ({dw_expression::HyModuloExpression.operand1=current} '%'
	//	operand2=EvoMappingMultiplicationExpression)*;
	public EvoExpressionDslGrammarAccess.EvoMappingModuloExpressionElements getEvoMappingModuloExpressionAccess() {
		return gaEvoExpressionDsl.getEvoMappingModuloExpressionAccess();
	}
	
	public ParserRule getEvoMappingModuloExpressionRule() {
		return getEvoMappingModuloExpressionAccess().getRule();
	}
	
	//EvoMappingMultiplicationExpression dw_expression::HyExpression:
	//	EvoMappingDivisionExpression ({dw_expression::HyMultiplicationExpression.operand1=current} '*'
	//	operand2=EvoMappingDivisionExpression)*;
	public EvoExpressionDslGrammarAccess.EvoMappingMultiplicationExpressionElements getEvoMappingMultiplicationExpressionAccess() {
		return gaEvoExpressionDsl.getEvoMappingMultiplicationExpressionAccess();
	}
	
	public ParserRule getEvoMappingMultiplicationExpressionRule() {
		return getEvoMappingMultiplicationExpressionAccess().getRule();
	}
	
	//EvoMappingDivisionExpression dw_expression::HyExpression:
	//	EvoMappingTerminal ({dw_expression::HyDivisionExpression.operand1=current} '/' operand2=EvoMappingTerminal)*;
	public EvoExpressionDslGrammarAccess.EvoMappingDivisionExpressionElements getEvoMappingDivisionExpressionAccess() {
		return gaEvoExpressionDsl.getEvoMappingDivisionExpressionAccess();
	}
	
	public ParserRule getEvoMappingDivisionExpressionRule() {
		return getEvoMappingDivisionExpressionAccess().getRule();
	}
	
	//EvoMappingTerminal dw_expression::HyExpression:
	//	EvoMappingFeatureReferenceExpression | EvoMappingNestedExpression | EvoMappingNegation |
	//	EvoMappingConditionalFeatureReferenceExpression | EvoMappingContextInformationReferenceExpression |
	//	EvoMappingAttributeReferenceExpression | EvoMappingValueExpression | EvoMappingBooleanValueExpression |
	//	EvoMappingMimumumExpression | EvoMappingMaximumExpression | EvoMappingNot;
	public EvoExpressionDslGrammarAccess.EvoMappingTerminalElements getEvoMappingTerminalAccess() {
		return gaEvoExpressionDsl.getEvoMappingTerminalAccess();
	}
	
	public ParserRule getEvoMappingTerminalRule() {
		return getEvoMappingTerminalAccess().getRule();
	}
	
	//EvoMappingNestedExpression dw_expression::HyNestedExpression:
	//	'(' operand=EvoMappingExpression ')';
	public EvoExpressionDslGrammarAccess.EvoMappingNestedExpressionElements getEvoMappingNestedExpressionAccess() {
		return gaEvoExpressionDsl.getEvoMappingNestedExpressionAccess();
	}
	
	public ParserRule getEvoMappingNestedExpressionRule() {
		return getEvoMappingNestedExpressionAccess().getRule();
	}
	
	//EvoMappingNegation dw_expression::HyNegationExpression:
	//	'-' operand=EvoMappingTerminal;
	public EvoExpressionDslGrammarAccess.EvoMappingNegationElements getEvoMappingNegationAccess() {
		return gaEvoExpressionDsl.getEvoMappingNegationAccess();
	}
	
	public ParserRule getEvoMappingNegationRule() {
		return getEvoMappingNegationAccess().getRule();
	}
	
	//EvoMappingNot dw_expression::HyNotExpression:
	//	'!' operand=EvoMappingTerminal;
	public EvoExpressionDslGrammarAccess.EvoMappingNotElements getEvoMappingNotAccess() {
		return gaEvoExpressionDsl.getEvoMappingNotAccess();
	}
	
	public ParserRule getEvoMappingNotRule() {
		return getEvoMappingNotAccess().getRule();
	}
	
	//EvoMappingFeatureReferenceExpression HyFeatureReferenceExpression:
	//	feature=[dw_feature::HyFeature|STRING];
	public EvoExpressionDslGrammarAccess.EvoMappingFeatureReferenceExpressionElements getEvoMappingFeatureReferenceExpressionAccess() {
		return gaEvoExpressionDsl.getEvoMappingFeatureReferenceExpressionAccess();
	}
	
	public ParserRule getEvoMappingFeatureReferenceExpressionRule() {
		return getEvoMappingFeatureReferenceExpressionAccess().getRule();
	}
	
	//// (versionRestriction=EvoMappingVersionRestriction)?;
	//EvoMappingConditionalFeatureReferenceExpression dw_expression::HyConditionalFeatureReferenceExpression:
	//	"?" feature=[dw_feature::HyFeature|QualifiedName] versionRestriction=EvoMappingVersionRestriction?;
	public EvoExpressionDslGrammarAccess.EvoMappingConditionalFeatureReferenceExpressionElements getEvoMappingConditionalFeatureReferenceExpressionAccess() {
		return gaEvoExpressionDsl.getEvoMappingConditionalFeatureReferenceExpressionAccess();
	}
	
	public ParserRule getEvoMappingConditionalFeatureReferenceExpressionRule() {
		return getEvoMappingConditionalFeatureReferenceExpressionAccess().getRule();
	}
	
	//EvoMappingVersionRestriction dw_expression::HyVersionRestriction:
	//	EvoMappingRelativeVersionRestriction | EvoMappingVersionRangeRestriction;
	public EvoExpressionDslGrammarAccess.EvoMappingVersionRestrictionElements getEvoMappingVersionRestrictionAccess() {
		return gaEvoExpressionDsl.getEvoMappingVersionRestrictionAccess();
	}
	
	public ParserRule getEvoMappingVersionRestrictionRule() {
		return getEvoMappingVersionRestrictionAccess().getRule();
	}
	
	//EvoMappingRelativeVersionRestriction dw_expression::HyRelativeVersionRestriction:
	//	"[" operator=EvoMappingRelativeVersionRestrictionOperator version=[dw_feature::HyVersion] "]";
	public EvoExpressionDslGrammarAccess.EvoMappingRelativeVersionRestrictionElements getEvoMappingRelativeVersionRestrictionAccess() {
		return gaEvoExpressionDsl.getEvoMappingRelativeVersionRestrictionAccess();
	}
	
	public ParserRule getEvoMappingRelativeVersionRestrictionRule() {
		return getEvoMappingRelativeVersionRestrictionAccess().getRule();
	}
	
	//enum EvoMappingRelativeVersionRestrictionOperator returns dw_expression::HyRelativeVersionRestrictionOperator:
	//	lessThan="<" | lessThanOrEqual="<=" | equal="=" | greaterThanOrEqual=">=" | greaterThan=">";
	public EvoExpressionDslGrammarAccess.EvoMappingRelativeVersionRestrictionOperatorElements getEvoMappingRelativeVersionRestrictionOperatorAccess() {
		return gaEvoExpressionDsl.getEvoMappingRelativeVersionRestrictionOperatorAccess();
	}
	
	public EnumRule getEvoMappingRelativeVersionRestrictionOperatorRule() {
		return getEvoMappingRelativeVersionRestrictionOperatorAccess().getRule();
	}
	
	//EvoMappingVersionRangeRestriction dw_expression::HyVersionRangeRestriction:
	//	"[" lowerIncluded?='true' | 'false' lowerVersion=[dw_feature::HyVersion|QualifiedName] "-" upperIncluded?='true' |
	//	'false' upperVersion=[dw_feature::HyVersion|QualifiedName] "]";
	public EvoExpressionDslGrammarAccess.EvoMappingVersionRangeRestrictionElements getEvoMappingVersionRangeRestrictionAccess() {
		return gaEvoExpressionDsl.getEvoMappingVersionRangeRestrictionAccess();
	}
	
	public ParserRule getEvoMappingVersionRangeRestrictionRule() {
		return getEvoMappingVersionRangeRestrictionAccess().getRule();
	}
	
	//EvoMappingContextInformationReferenceExpression dw_expression::HyContextInformationReferenceExpression:
	//	"context:" contextInformation=[dw_context::HyContextualInformation|QualifiedName];
	public EvoExpressionDslGrammarAccess.EvoMappingContextInformationReferenceExpressionElements getEvoMappingContextInformationReferenceExpressionAccess() {
		return gaEvoExpressionDsl.getEvoMappingContextInformationReferenceExpressionAccess();
	}
	
	public ParserRule getEvoMappingContextInformationReferenceExpressionRule() {
		return getEvoMappingContextInformationReferenceExpressionAccess().getRule();
	}
	
	//EvoMappingAttributeReferenceExpression dw_expression::HyAttributeReferenceExpression:
	//	feature=[dw_feature::HyFeature|STRING] '.' attribute=[dw_feature::HyFeatureAttribute|QualifiedName];
	public EvoExpressionDslGrammarAccess.EvoMappingAttributeReferenceExpressionElements getEvoMappingAttributeReferenceExpressionAccess() {
		return gaEvoExpressionDsl.getEvoMappingAttributeReferenceExpressionAccess();
	}
	
	public ParserRule getEvoMappingAttributeReferenceExpressionRule() {
		return getEvoMappingAttributeReferenceExpressionAccess().getRule();
	}
	
	//EvoMappingValueExpression dw_expression::HyValueExpression:
	//	value=EvoMappingNumberValue;
	public EvoExpressionDslGrammarAccess.EvoMappingValueExpressionElements getEvoMappingValueExpressionAccess() {
		return gaEvoExpressionDsl.getEvoMappingValueExpressionAccess();
	}
	
	public ParserRule getEvoMappingValueExpressionRule() {
		return getEvoMappingValueExpressionAccess().getRule();
	}
	
	//EvoMappingBooleanValueExpression dw_expression::HyBooleanValueExpression:
	//	{dw_expression::HyBooleanValueExpression} (value?='true' | 'false');
	public EvoExpressionDslGrammarAccess.EvoMappingBooleanValueExpressionElements getEvoMappingBooleanValueExpressionAccess() {
		return gaEvoExpressionDsl.getEvoMappingBooleanValueExpressionAccess();
	}
	
	public ParserRule getEvoMappingBooleanValueExpressionRule() {
		return getEvoMappingBooleanValueExpressionAccess().getRule();
	}
	
	//EvoMappingNumberValue dw_data::HyNumberValue:
	//	value=INT;
	public EvoExpressionDslGrammarAccess.EvoMappingNumberValueElements getEvoMappingNumberValueAccess() {
		return gaEvoExpressionDsl.getEvoMappingNumberValueAccess();
	}
	
	public ParserRule getEvoMappingNumberValueRule() {
		return getEvoMappingNumberValueAccess().getRule();
	}
	
	//EvoMappingBooleanValue dw_data::HyBooleanValue:
	//	{dw_data::HyBooleanValue} (value?='true' | 'false');
	public EvoExpressionDslGrammarAccess.EvoMappingBooleanValueElements getEvoMappingBooleanValueAccess() {
		return gaEvoExpressionDsl.getEvoMappingBooleanValueAccess();
	}
	
	public ParserRule getEvoMappingBooleanValueRule() {
		return getEvoMappingBooleanValueAccess().getRule();
	}
	
	//EvoMappingEnumValue dw_data::HyEnumValue:
	//	"enum:" ^enum=[dw_data::HyEnum|QualifiedName] "." enumLiteral=[dw_data::HyEnumLiteral|QualifiedName];
	public EvoExpressionDslGrammarAccess.EvoMappingEnumValueElements getEvoMappingEnumValueAccess() {
		return gaEvoExpressionDsl.getEvoMappingEnumValueAccess();
	}
	
	public ParserRule getEvoMappingEnumValueRule() {
		return getEvoMappingEnumValueAccess().getRule();
	}
	
	//EvoMappingEnum dw_data::HyEnum:
	//	"Enum(" name=ID "," (literals+=EvoMappingEnumLiteral (',' literals+=EvoMappingEnumLiteral)*);
	public EvoExpressionDslGrammarAccess.EvoMappingEnumElements getEvoMappingEnumAccess() {
		return gaEvoExpressionDsl.getEvoMappingEnumAccess();
	}
	
	public ParserRule getEvoMappingEnumRule() {
		return getEvoMappingEnumAccess().getRule();
	}
	
	//EvoMappingEnumLiteral dw_data::HyEnumLiteral:
	//	"EnumLiteral(" name=ID "," value=INT ")" ("[" (validSince=DATE "-" validUntil=DATE | validSince=DATE "-" | "eternity"
	//	"-" validUntil=DATE) "]")?;
	public EvoExpressionDslGrammarAccess.EvoMappingEnumLiteralElements getEvoMappingEnumLiteralAccess() {
		return gaEvoExpressionDsl.getEvoMappingEnumLiteralAccess();
	}
	
	public ParserRule getEvoMappingEnumLiteralRule() {
		return getEvoMappingEnumLiteralAccess().getRule();
	}
	
	//EvoBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EvoExpressionDslGrammarAccess.EvoBooleanElements getEvoBooleanAccess() {
		return gaEvoExpressionDsl.getEvoBooleanAccess();
	}
	
	public ParserRule getEvoBooleanRule() {
		return getEvoBooleanAccess().getRule();
	}
	
	//EvoMappingMimumumExpression dw_expression::HyMinimumExpression:
	//	"min(" operand=EvoMappingExpression ")";
	public EvoExpressionDslGrammarAccess.EvoMappingMimumumExpressionElements getEvoMappingMimumumExpressionAccess() {
		return gaEvoExpressionDsl.getEvoMappingMimumumExpressionAccess();
	}
	
	public ParserRule getEvoMappingMimumumExpressionRule() {
		return getEvoMappingMimumumExpressionAccess().getRule();
	}
	
	//EvoMappingMaximumExpression dw_expression::HyMaximumExpression:
	//	"max(" operand=EvoMappingExpression ")";
	public EvoExpressionDslGrammarAccess.EvoMappingMaximumExpressionElements getEvoMappingMaximumExpressionAccess() {
		return gaEvoExpressionDsl.getEvoMappingMaximumExpressionAccess();
	}
	
	public ParserRule getEvoMappingMaximumExpressionRule() {
		return getEvoMappingMaximumExpressionAccess().getRule();
	}
	
	//terminal DATE returns ecore::EDate:
	//	'0'..'9' '/' ('0' | '1') '0'..'9' '/' '0'..'9'*;
	public TerminalRule getDATERule() {
		return gaEvoExpressionDsl.getDATERule();
	}
	
	//EvoFormula evo_logic::EvoFormula:
	//	'formula'
	//	'{'
	//	'term' ':' term=EvoExpression ';'
	//	'}';
	public EvoLogicDslGrammarAccess.EvoFormulaElements getEvoFormulaAccess() {
		return gaEvoLogicDsl.getEvoFormulaAccess();
	}
	
	public ParserRule getEvoFormulaRule() {
		return getEvoFormulaAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ("." ID)*;
	public EvoLogicDslGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaEvoLogicDsl.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//EvoExpression dw_expression::HyExpression:
	//	EvoXOr;
	public EvoLogicDslGrammarAccess.EvoExpressionElements getEvoExpressionAccess() {
		return gaEvoLogicDsl.getEvoExpressionAccess();
	}
	
	public ParserRule getEvoExpressionRule() {
		return getEvoExpressionAccess().getRule();
	}
	
	//EvoXOr dw_expression::HyExpression:
	//	EvoOr ({EvoXOr.operand1=current} 'xor' operand2=EvoOr)*;
	public EvoLogicDslGrammarAccess.EvoXOrElements getEvoXOrAccess() {
		return gaEvoLogicDsl.getEvoXOrAccess();
	}
	
	public ParserRule getEvoXOrRule() {
		return getEvoXOrAccess().getRule();
	}
	
	//EvoOr dw_expression::HyExpression:
	//	EvoAnd ({EvoOr.operand1=current} '||' operand2=EvoAnd)*;
	public EvoLogicDslGrammarAccess.EvoOrElements getEvoOrAccess() {
		return gaEvoLogicDsl.getEvoOrAccess();
	}
	
	public ParserRule getEvoOrRule() {
		return getEvoOrAccess().getRule();
	}
	
	//EvoAnd dw_expression::HyExpression:
	//	EvoEqual ({EvoAnd.operand1=current} '&&' operand2=EvoEqual)*;
	public EvoLogicDslGrammarAccess.EvoAndElements getEvoAndAccess() {
		return gaEvoLogicDsl.getEvoAndAccess();
	}
	
	public ParserRule getEvoAndRule() {
		return getEvoAndAccess().getRule();
	}
	
	//EvoEqual dw_expression::HyExpression:
	//	EvoUnequal ({EvoEqual.operand1=current} '==' operand2=EvoUnequalSize)*;
	public EvoLogicDslGrammarAccess.EvoEqualElements getEvoEqualAccess() {
		return gaEvoLogicDsl.getEvoEqualAccess();
	}
	
	public ParserRule getEvoEqualRule() {
		return getEvoEqualAccess().getRule();
	}
	
	//EvoUnequalSize dw_expression::HyExpression:
	//	EvoUnequal | EvoSize;
	public EvoLogicDslGrammarAccess.EvoUnequalSizeElements getEvoUnequalSizeAccess() {
		return gaEvoLogicDsl.getEvoUnequalSizeAccess();
	}
	
	public ParserRule getEvoUnequalSizeRule() {
		return getEvoUnequalSizeAccess().getRule();
	}
	
	//EvoUnequal dw_expression::HyExpression:
	//	EvoImplication ({EvoUnequal.operand1=current} '!=' operand2=EvoImplicationSize)*;
	public EvoLogicDslGrammarAccess.EvoUnequalElements getEvoUnequalAccess() {
		return gaEvoLogicDsl.getEvoUnequalAccess();
	}
	
	public ParserRule getEvoUnequalRule() {
		return getEvoUnequalAccess().getRule();
	}
	
	//EvoImplicationSize dw_expression::HyExpression:
	//	EvoImplication | EvoSize;
	public EvoLogicDslGrammarAccess.EvoImplicationSizeElements getEvoImplicationSizeAccess() {
		return gaEvoLogicDsl.getEvoImplicationSizeAccess();
	}
	
	public ParserRule getEvoImplicationSizeRule() {
		return getEvoImplicationSizeAccess().getRule();
	}
	
	//EvoImplication dw_expression::HyExpression:
	//	EvoBiconditional ({EvoImplication.operand1=current} '=>' operand2=EvoBiconditionalSize)*;
	public EvoLogicDslGrammarAccess.EvoImplicationElements getEvoImplicationAccess() {
		return gaEvoLogicDsl.getEvoImplicationAccess();
	}
	
	public ParserRule getEvoImplicationRule() {
		return getEvoImplicationAccess().getRule();
	}
	
	//EvoBiconditionalSize dw_expression::HyExpression:
	//	EvoBiconditional | EvoSize;
	public EvoLogicDslGrammarAccess.EvoBiconditionalSizeElements getEvoBiconditionalSizeAccess() {
		return gaEvoLogicDsl.getEvoBiconditionalSizeAccess();
	}
	
	public ParserRule getEvoBiconditionalSizeRule() {
		return getEvoBiconditionalSizeAccess().getRule();
	}
	
	//EvoBiconditional dw_expression::HyExpression:
	//	EvoSetInclusion ({EvoBiconditional.operand1=current} '<=>' operand2=EvoSetInclusionSize)*;
	public EvoLogicDslGrammarAccess.EvoBiconditionalElements getEvoBiconditionalAccess() {
		return gaEvoLogicDsl.getEvoBiconditionalAccess();
	}
	
	public ParserRule getEvoBiconditionalRule() {
		return getEvoBiconditionalAccess().getRule();
	}
	
	//EvoSetInclusionSize dw_expression::HyExpression:
	//	EvoSetInclusion | EvoSize;
	public EvoLogicDslGrammarAccess.EvoSetInclusionSizeElements getEvoSetInclusionSizeAccess() {
		return gaEvoLogicDsl.getEvoSetInclusionSizeAccess();
	}
	
	public ParserRule getEvoSetInclusionSizeRule() {
		return getEvoSetInclusionSizeAccess().getRule();
	}
	
	//EvoSetInclusion dw_expression::HyExpression:
	//	EvoSetIntersection ({EvoSetInclusion.operand1=current} 'inclusion' operand2=EvoSetIntersection)*;
	public EvoLogicDslGrammarAccess.EvoSetInclusionElements getEvoSetInclusionAccess() {
		return gaEvoLogicDsl.getEvoSetInclusionAccess();
	}
	
	public ParserRule getEvoSetInclusionRule() {
		return getEvoSetInclusionAccess().getRule();
	}
	
	//EvoSetIntersection dw_expression::HyExpression:
	//	EvoSetUnion ({EvoSetIntersection.operand1=current} 'intersection' operand2=EvoSetUnion)*;
	public EvoLogicDslGrammarAccess.EvoSetIntersectionElements getEvoSetIntersectionAccess() {
		return gaEvoLogicDsl.getEvoSetIntersectionAccess();
	}
	
	public ParserRule getEvoSetIntersectionRule() {
		return getEvoSetIntersectionAccess().getRule();
	}
	
	//EvoSetUnion dw_expression::HyExpression:
	//	EvoSetDifference ({EvoSetUnion.operand1=current} 'union' operand2=EvoSetDifference)*;
	public EvoLogicDslGrammarAccess.EvoSetUnionElements getEvoSetUnionAccess() {
		return gaEvoLogicDsl.getEvoSetUnionAccess();
	}
	
	public ParserRule getEvoSetUnionRule() {
		return getEvoSetUnionAccess().getRule();
	}
	
	//EvoSetDifference dw_expression::HyExpression:
	//	EvoSetSymmetricDifference ({EvoSetDifference.operand1=current} 'difference' operand2=EvoSetSymmetricDifference)*;
	public EvoLogicDslGrammarAccess.EvoSetDifferenceElements getEvoSetDifferenceAccess() {
		return gaEvoLogicDsl.getEvoSetDifferenceAccess();
	}
	
	public ParserRule getEvoSetDifferenceRule() {
		return getEvoSetDifferenceAccess().getRule();
	}
	
	//EvoSetSymmetricDifference dw_expression::HyExpression:
	//	EvoSetCartesianProduct ({EvoSetSymmetricDifference.operand1=current} 'symmetric_difference'
	//	operand2=EvoSetCartesianProduct)*;
	public EvoLogicDslGrammarAccess.EvoSetSymmetricDifferenceElements getEvoSetSymmetricDifferenceAccess() {
		return gaEvoLogicDsl.getEvoSetSymmetricDifferenceAccess();
	}
	
	public ParserRule getEvoSetSymmetricDifferenceRule() {
		return getEvoSetSymmetricDifferenceAccess().getRule();
	}
	
	//EvoSetCartesianProduct dw_expression::HyExpression:
	//	EvoElementOf ({EvoSetCartesianProduct.operand1=current} 'x' operand2=EvoElementOf)*;
	public EvoLogicDslGrammarAccess.EvoSetCartesianProductElements getEvoSetCartesianProductAccess() {
		return gaEvoLogicDsl.getEvoSetCartesianProductAccess();
	}
	
	public ParserRule getEvoSetCartesianProductRule() {
		return getEvoSetCartesianProductAccess().getRule();
	}
	
	//EvoSetCardinality dw_expression::HyExpression:
	//	{EvoSetCardinality} ('|' operand=EvoExpression '|' | 'size' '(' operand=EvoExpression ')');
	public EvoLogicDslGrammarAccess.EvoSetCardinalityElements getEvoSetCardinalityAccess() {
		return gaEvoLogicDsl.getEvoSetCardinalityAccess();
	}
	
	public ParserRule getEvoSetCardinalityRule() {
		return getEvoSetCardinalityAccess().getRule();
	}
	
	//EvoElementOf dw_expression::HyExpression:
	//	EvoTerminal ({EvoSetElementOf.operand1=current} 'elementOf' operand2=EvoTerminal)*;
	public EvoLogicDslGrammarAccess.EvoElementOfElements getEvoElementOfAccess() {
		return gaEvoLogicDsl.getEvoElementOfAccess();
	}
	
	public ParserRule getEvoElementOfRule() {
		return getEvoElementOfAccess().getRule();
	}
	
	//EvoForAll:
	//	'forAll' '('
	//	boundedVariables+=EvoVariableTerm (',' boundedVariables+=EvoVariableTerm) ':'
	//	operand=EvoExpression
	//	')';
	public EvoLogicDslGrammarAccess.EvoForAllElements getEvoForAllAccess() {
		return gaEvoLogicDsl.getEvoForAllAccess();
	}
	
	public ParserRule getEvoForAllRule() {
		return getEvoForAllAccess().getRule();
	}
	
	//EvoExists:
	//	'exists' '('
	//	boundedVariables+=EvoVariableTerm ':'
	//	element=EvoExpression
	//	')';
	public EvoLogicDslGrammarAccess.EvoExistsElements getEvoExistsAccess() {
		return gaEvoLogicDsl.getEvoExistsAccess();
	}
	
	public ParserRule getEvoExistsRule() {
		return getEvoExistsAccess().getRule();
	}
	
	//EvoNot dw_expression::HyNotExpression:
	//	'not' '(' operand=EvoExpression ')' | '!' operand=EvoVariableTerm;
	public EvoLogicDslGrammarAccess.EvoNotElements getEvoNotAccess() {
		return gaEvoLogicDsl.getEvoNotAccess();
	}
	
	public ParserRule getEvoNotRule() {
		return getEvoNotAccess().getRule();
	}
	
	//EvoSatisfiable dw_expression::HyExpression:
	//	{EvoSatisfiable} 'satisfiable' '(' variables+=(EvoSetVariable | EvoApplicationConstraintTerm) (','
	//	variables+=(EvoSetVariable | EvoApplicationConstraintTerm))* ')';
	public EvoLogicDslGrammarAccess.EvoSatisfiableElements getEvoSatisfiableAccess() {
		return gaEvoLogicDsl.getEvoSatisfiableAccess();
	}
	
	public ParserRule getEvoSatisfiableRule() {
		return getEvoSatisfiableAccess().getRule();
	}
	
	//EvoTerminal dw_expression::HyExpression:
	//	EvoVariableTerm | EvoSetTerm | EvoApplicationConstraintTerm | EvoForAll | EvoExists | EvoNot | EvoFeatureType |
	//	EvoGroupType | EvoSetCardinality | EvoChildrenOf | EvoParentOf | EvoSiblingsOf | EvoSatisfiable |
	//	'(' EvoXOr ')';
	public EvoLogicDslGrammarAccess.EvoTerminalElements getEvoTerminalAccess() {
		return gaEvoLogicDsl.getEvoTerminalAccess();
	}
	
	public ParserRule getEvoTerminalRule() {
		return getEvoTerminalAccess().getRule();
	}
	
	//EvoSize dw_expression::HyExpression:
	//	{EvoSize} size=INT;
	public EvoLogicDslGrammarAccess.EvoSizeElements getEvoSizeAccess() {
		return gaEvoLogicDsl.getEvoSizeAccess();
	}
	
	public ParserRule getEvoSizeRule() {
		return getEvoSizeAccess().getRule();
	}
	
	//enum EvoVariableType returns evo_variable::EvoVariableType:
	//	EvoIdentifier='@ident' |
	//	EvoSource='@pre' |
	//	EvoTarget='@post';
	public EvoLogicDslGrammarAccess.EvoVariableTypeElements getEvoVariableTypeAccess() {
		return gaEvoLogicDsl.getEvoVariableTypeAccess();
	}
	
	public EnumRule getEvoVariableTypeRule() {
		return getEvoVariableTypeAccess().getRule();
	}
	
	//EvoVariableTerm evo_logic::EvoVariableTerm:
	//	variable=[evo_variable::EvoVariable|QualifiedName] type=EvoVariableType?;
	public EvoLogicDslGrammarAccess.EvoVariableTermElements getEvoVariableTermAccess() {
		return gaEvoLogicDsl.getEvoVariableTermAccess();
	}
	
	public ParserRule getEvoVariableTermRule() {
		return getEvoVariableTermAccess().getRule();
	}
	
	//EvoApplicationConstraintTerm evo_logic::EvoVariableTerm:
	//	'AC' '(' variable=[evo_variable::EvoMappingVariable|QualifiedName] ')';
	public EvoLogicDslGrammarAccess.EvoApplicationConstraintTermElements getEvoApplicationConstraintTermAccess() {
		return gaEvoLogicDsl.getEvoApplicationConstraintTermAccess();
	}
	
	public ParserRule getEvoApplicationConstraintTermRule() {
		return getEvoApplicationConstraintTermAccess().getRule();
	}
	
	//EvoFeatureType dw_expression::HyExpression:
	//	{EvoFeatureType} 'featureType' ('(' variables+=EvoVariableTerm (',' variables+=EvoVariableTerm)* ')') '=='
	//	type=HyFeatureTypeEnum;
	public EvoLogicDslGrammarAccess.EvoFeatureTypeElements getEvoFeatureTypeAccess() {
		return gaEvoLogicDsl.getEvoFeatureTypeAccess();
	}
	
	public ParserRule getEvoFeatureTypeRule() {
		return getEvoFeatureTypeAccess().getRule();
	}
	
	//enum HyFeatureTypeEnum returns dw_feature::HyFeatureTypeEnum:
	//	OPTIONAL='optional' | MANDATORY='mandatory';
	public EvoLogicDslGrammarAccess.HyFeatureTypeEnumElements getHyFeatureTypeEnumAccess() {
		return gaEvoLogicDsl.getHyFeatureTypeEnumAccess();
	}
	
	public EnumRule getHyFeatureTypeEnumRule() {
		return getHyFeatureTypeEnumAccess().getRule();
	}
	
	//EvoGroupType dw_expression::HyExpression:
	//	{EvoGroupType} 'groupType' ('(' variables+=EvoGroupTerm (',' variables+=EvoGroupTerm)* ')') '=='
	//	type=HyGroupTypeEnum;
	public EvoLogicDslGrammarAccess.EvoGroupTypeElements getEvoGroupTypeAccess() {
		return gaEvoLogicDsl.getEvoGroupTypeAccess();
	}
	
	public ParserRule getEvoGroupTypeRule() {
		return getEvoGroupTypeAccess().getRule();
	}
	
	//EvoGroupTerm evo_logic::EvoVariableTerm:
	//	variable=[evo_variable::EvoGroupVariable|QualifiedName] type=EvoVariableType?;
	public EvoLogicDslGrammarAccess.EvoGroupTermElements getEvoGroupTermAccess() {
		return gaEvoLogicDsl.getEvoGroupTermAccess();
	}
	
	public ParserRule getEvoGroupTermRule() {
		return getEvoGroupTermAccess().getRule();
	}
	
	//enum HyGroupTypeEnum returns dw_feature::HyGroupTypeEnum:
	//	AND='and' | OR='or' | ALTERNATIVE='alternative';
	public EvoLogicDslGrammarAccess.HyGroupTypeEnumElements getHyGroupTypeEnumAccess() {
		return gaEvoLogicDsl.getHyGroupTypeEnumAccess();
	}
	
	public EnumRule getHyGroupTypeEnumRule() {
		return getHyGroupTypeEnumAccess().getRule();
	}
	
	//EvoSetTerm:
	//	'{' variables+=EvoSetVariable (',' variables+=EvoSetVariable)* '}';
	public EvoLogicDslGrammarAccess.EvoSetTermElements getEvoSetTermAccess() {
		return gaEvoLogicDsl.getEvoSetTermAccess();
	}
	
	public ParserRule getEvoSetTermRule() {
		return getEvoSetTermAccess().getRule();
	}
	
	//EvoSetVariable dw_expression::HyExpression:
	//	EvoVariableTerm | EvoSetTerm | EvoNot;
	public EvoLogicDslGrammarAccess.EvoSetVariableElements getEvoSetVariableAccess() {
		return gaEvoLogicDsl.getEvoSetVariableAccess();
	}
	
	public ParserRule getEvoSetVariableRule() {
		return getEvoSetVariableAccess().getRule();
	}
	
	//EvoParentOf:
	//	'parentOf' '(' variable=EvoVariableTerm ')';
	public EvoLogicDslGrammarAccess.EvoParentOfElements getEvoParentOfAccess() {
		return gaEvoLogicDsl.getEvoParentOfAccess();
	}
	
	public ParserRule getEvoParentOfRule() {
		return getEvoParentOfAccess().getRule();
	}
	
	//EvoSiblingsOf:
	//	'sibilingsOf' '(' variable=EvoVariableTerm ')';
	public EvoLogicDslGrammarAccess.EvoSiblingsOfElements getEvoSiblingsOfAccess() {
		return gaEvoLogicDsl.getEvoSiblingsOfAccess();
	}
	
	public ParserRule getEvoSiblingsOfRule() {
		return getEvoSiblingsOfAccess().getRule();
	}
	
	//EvoChildrenOf:
	//	'childrenOf' '(' variable=EvoVariableTerm ')';
	public EvoLogicDslGrammarAccess.EvoChildrenOfElements getEvoChildrenOfAccess() {
		return gaEvoLogicDsl.getEvoChildrenOfAccess();
	}
	
	public ParserRule getEvoChildrenOfRule() {
		return getEvoChildrenOfAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
