/*
 * generated by Xtext 2.12.0
 */
package de.evorepair.feature.mapping.repair.dsl.serializer;

import com.google.inject.Inject;
import de.evorepair.feature.expression.evo_expression_dsl.Evo_expression_dslPackage;
import de.evorepair.feature.expression.evo_expression_dsl.GrammarEntry;
import de.evorepair.feature.expression.serializer.EvoExpressionDslSemanticSequencer;
import de.evorepair.feature.mapping.repair.dsl.mappingRepairDsl.EvoMappingKeep;
import de.evorepair.feature.mapping.repair.dsl.mappingRepairDsl.EvoMappingReplace;
import de.evorepair.feature.mapping.repair.dsl.mappingRepairDsl.MappingRepairDslPackage;
import de.evorepair.feature.mapping.repair.dsl.mappingRepairDsl.MappingRepairGrammarEntry;
import de.evorepair.feature.mapping.repair.dsl.services.EvoMappingRepairDslGrammarAccess;
import de.evorepair.logic.evo_logic_dsl.EvoChildrenOf;
import de.evorepair.logic.evo_logic_dsl.EvoGroupType;
import de.evorepair.logic.evo_logic_dsl.EvoParentOf;
import de.evorepair.logic.evo_logic_dsl.EvoSatisfiable;
import de.evorepair.logic.evo_logic_dsl.EvoSetInclusion;
import de.evorepair.logic.evo_logic_dsl.EvoSetTerm;
import de.evorepair.logic.evo_logic_dsl.EvoSiblingsOf;
import de.evorepair.logic.evo_logic_dsl.EvoSize;
import de.evorepair.logic.evo_logic_dsl.EvoXOr;
import de.evorepair.logic.evo_logic_dsl.Evo_logic_dslPackage;
import de.evorepair.logic.evologic.EvoBinaryExpression;
import de.evorepair.logic.evologic.EvoExist;
import de.evorepair.logic.evologic.EvoFeatureType;
import de.evorepair.logic.evologic.EvoForAll;
import de.evorepair.logic.evologic.EvoFormula;
import de.evorepair.logic.evologic.EvoLogicPackage;
import de.evorepair.logic.evologic.EvoSetCardinality;
import de.evorepair.logic.evologic.EvoSetCartesianProduct;
import de.evorepair.logic.evologic.EvoSetDifference;
import de.evorepair.logic.evologic.EvoSetElementOf;
import de.evorepair.logic.evologic.EvoSetIntersection;
import de.evorepair.logic.evologic.EvoSetSymmetricDifference;
import de.evorepair.logic.evologic.EvoSetUnion;
import de.evorepair.logic.evologic.EvoVariableTerm;
import eu.hyvar.dataValues.HyBooleanValue;
import eu.hyvar.dataValues.HyDataValuesPackage;
import eu.hyvar.dataValues.HyEnum;
import eu.hyvar.dataValues.HyEnumLiteral;
import eu.hyvar.dataValues.HyEnumValue;
import eu.hyvar.dataValues.HyNumberValue;
import eu.hyvar.feature.expression.HyAdditionExpression;
import eu.hyvar.feature.expression.HyAndExpression;
import eu.hyvar.feature.expression.HyAttributeReferenceExpression;
import eu.hyvar.feature.expression.HyBooleanValueExpression;
import eu.hyvar.feature.expression.HyConditionalFeatureReferenceExpression;
import eu.hyvar.feature.expression.HyContextInformationReferenceExpression;
import eu.hyvar.feature.expression.HyDivisionExpression;
import eu.hyvar.feature.expression.HyEqualExpression;
import eu.hyvar.feature.expression.HyEquivalenceExpression;
import eu.hyvar.feature.expression.HyExpressionPackage;
import eu.hyvar.feature.expression.HyFeatureReferenceExpression;
import eu.hyvar.feature.expression.HyGreaterExpression;
import eu.hyvar.feature.expression.HyGreaterOrEqualExpression;
import eu.hyvar.feature.expression.HyIfPossibleExpression;
import eu.hyvar.feature.expression.HyImpliesExpression;
import eu.hyvar.feature.expression.HyLessExpression;
import eu.hyvar.feature.expression.HyLessOrEqualExpression;
import eu.hyvar.feature.expression.HyMaximumExpression;
import eu.hyvar.feature.expression.HyMinimumExpression;
import eu.hyvar.feature.expression.HyModuloExpression;
import eu.hyvar.feature.expression.HyMultiplicationExpression;
import eu.hyvar.feature.expression.HyNegationExpression;
import eu.hyvar.feature.expression.HyNestedExpression;
import eu.hyvar.feature.expression.HyNotEqualExpression;
import eu.hyvar.feature.expression.HyNotExpression;
import eu.hyvar.feature.expression.HyOrExpression;
import eu.hyvar.feature.expression.HyRelativeVersionRestriction;
import eu.hyvar.feature.expression.HySubtractionExpression;
import eu.hyvar.feature.expression.HyValueExpression;
import eu.hyvar.feature.expression.HyVersionRangeRestriction;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class EvoMappingRepairDslSemanticSequencer extends EvoExpressionDslSemanticSequencer {

	@Inject
	private EvoMappingRepairDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == HyDataValuesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HyDataValuesPackage.HY_BOOLEAN_VALUE:
				sequence_EvoMappingBooleanValue(context, (HyBooleanValue) semanticObject); 
				return; 
			case HyDataValuesPackage.HY_ENUM:
				sequence_EvoMappingEnum(context, (HyEnum) semanticObject); 
				return; 
			case HyDataValuesPackage.HY_ENUM_LITERAL:
				sequence_EvoMappingEnumLiteral(context, (HyEnumLiteral) semanticObject); 
				return; 
			case HyDataValuesPackage.HY_ENUM_VALUE:
				sequence_EvoMappingEnumValue(context, (HyEnumValue) semanticObject); 
				return; 
			case HyDataValuesPackage.HY_NUMBER_VALUE:
				sequence_EvoMappingNumberValue(context, (HyNumberValue) semanticObject); 
				return; 
			}
		else if (epackage == Evo_expression_dslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Evo_expression_dslPackage.GRAMMAR_ENTRY:
				sequence_GrammarEntry(context, (GrammarEntry) semanticObject); 
				return; 
			}
		else if (epackage == Evo_logic_dslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Evo_logic_dslPackage.EVO_CHILDREN_OF:
				sequence_EvoChildrenOf(context, (EvoChildrenOf) semanticObject); 
				return; 
			case Evo_logic_dslPackage.EVO_GROUP_TYPE:
				sequence_EvoGroupType(context, (EvoGroupType) semanticObject); 
				return; 
			case Evo_logic_dslPackage.EVO_PARENT_OF:
				sequence_EvoParentOf(context, (EvoParentOf) semanticObject); 
				return; 
			case Evo_logic_dslPackage.EVO_SATISFIABLE:
				sequence_EvoSatisfiable(context, (EvoSatisfiable) semanticObject); 
				return; 
			case Evo_logic_dslPackage.EVO_SET_INCLUSION:
				sequence_EvoSetInclusion(context, (EvoSetInclusion) semanticObject); 
				return; 
			case Evo_logic_dslPackage.EVO_SET_TERM:
				sequence_EvoSetTerm(context, (EvoSetTerm) semanticObject); 
				return; 
			case Evo_logic_dslPackage.EVO_SIBLINGS_OF:
				sequence_EvoSiblingsOf(context, (EvoSiblingsOf) semanticObject); 
				return; 
			case Evo_logic_dslPackage.EVO_SIZE:
				sequence_EvoSize(context, (EvoSize) semanticObject); 
				return; 
			case Evo_logic_dslPackage.EVO_XOR:
				sequence_EvoXOr(context, (EvoXOr) semanticObject); 
				return; 
			}
		else if (epackage == EvoLogicPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EvoLogicPackage.EVO_BINARY_EXPRESSION:
				sequence_EvoBiconditional(context, (EvoBinaryExpression) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_EXIST:
				sequence_EvoExists(context, (EvoExist) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_FEATURE_TYPE:
				sequence_EvoFeatureType(context, (EvoFeatureType) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_FOR_ALL:
				sequence_EvoForAll(context, (EvoForAll) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_FORMULA:
				sequence_EvoFormula(context, (EvoFormula) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_SET_CARDINALITY:
				sequence_EvoSetCardinality(context, (EvoSetCardinality) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_SET_CARTESIAN_PRODUCT:
				sequence_EvoSetCartesianProduct(context, (EvoSetCartesianProduct) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_SET_DIFFERENCE:
				sequence_EvoSetDifference(context, (EvoSetDifference) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_SET_ELEMENT_OF:
				sequence_EvoElementOf(context, (EvoSetElementOf) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_SET_INTERSECTION:
				sequence_EvoSetIntersection(context, (EvoSetIntersection) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_SET_SYMMETRIC_DIFFERENCE:
				sequence_EvoSetSymmetricDifference(context, (EvoSetSymmetricDifference) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_SET_UNION:
				sequence_EvoSetUnion(context, (EvoSetUnion) semanticObject); 
				return; 
			case EvoLogicPackage.EVO_VARIABLE_TERM:
				if (rule == grammarAccess.getEvoApplicationConstraintTermRule()) {
					sequence_EvoApplicationConstraintTerm(context, (EvoVariableTerm) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEvoExpressionRule()
						|| rule == grammarAccess.getEvoXOrRule()
						|| action == grammarAccess.getEvoXOrAccess().getEvoXOrOperand1Action_1_0()
						|| rule == grammarAccess.getEvoOrRule()
						|| action == grammarAccess.getEvoOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoAndRule()
						|| action == grammarAccess.getEvoAndAccess().getHyAndExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoEqualRule()
						|| action == grammarAccess.getEvoEqualAccess().getHyEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoUnequalSizeRule()
						|| rule == grammarAccess.getEvoUnequalRule()
						|| action == grammarAccess.getEvoUnequalAccess().getHyNotEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoImplicationSizeRule()
						|| rule == grammarAccess.getEvoImplicationRule()
						|| action == grammarAccess.getEvoImplicationAccess().getHyImpliesExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoBiconditionalSizeRule()
						|| rule == grammarAccess.getEvoBiconditionalRule()
						|| action == grammarAccess.getEvoBiconditionalAccess().getEvoBinaryExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetInclusionSizeRule()
						|| rule == grammarAccess.getEvoSetInclusionRule()
						|| action == grammarAccess.getEvoSetInclusionAccess().getEvoSetInclusionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetIntersectionRule()
						|| action == grammarAccess.getEvoSetIntersectionAccess().getEvoSetIntersectionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetUnionRule()
						|| action == grammarAccess.getEvoSetUnionAccess().getEvoSetUnionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetDifferenceRule()
						|| action == grammarAccess.getEvoSetDifferenceAccess().getEvoSetDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetSymmetricDifferenceRule()
						|| action == grammarAccess.getEvoSetSymmetricDifferenceAccess().getEvoSetSymmetricDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetCartesianProductRule()
						|| action == grammarAccess.getEvoSetCartesianProductAccess().getEvoSetCartesianProductOperand1Action_1_0()
						|| rule == grammarAccess.getEvoElementOfRule()
						|| action == grammarAccess.getEvoElementOfAccess().getEvoSetElementOfOperand1Action_1_0()
						|| rule == grammarAccess.getEvoTerminalRule()) {
					sequence_EvoApplicationConstraintTerm_EvoVariableTerm(context, (EvoVariableTerm) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEvoGroupTermRule()) {
					sequence_EvoGroupTerm(context, (EvoVariableTerm) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEvoVariableTermRule()
						|| rule == grammarAccess.getEvoSetVariableRule()) {
					sequence_EvoVariableTerm(context, (EvoVariableTerm) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == HyExpressionPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HyExpressionPackage.HY_ADDITION_EXPRESSION:
				sequence_EvoMappingAdditionExpression(context, (HyAdditionExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_AND_EXPRESSION:
				if (rule == grammarAccess.getEvoExpressionRule()
						|| rule == grammarAccess.getEvoXOrRule()
						|| action == grammarAccess.getEvoXOrAccess().getEvoXOrOperand1Action_1_0()
						|| rule == grammarAccess.getEvoOrRule()
						|| action == grammarAccess.getEvoOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoAndRule()
						|| action == grammarAccess.getEvoAndAccess().getHyAndExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoEqualRule()
						|| action == grammarAccess.getEvoEqualAccess().getHyEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoUnequalSizeRule()
						|| rule == grammarAccess.getEvoUnequalRule()
						|| action == grammarAccess.getEvoUnequalAccess().getHyNotEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoImplicationSizeRule()
						|| rule == grammarAccess.getEvoImplicationRule()
						|| action == grammarAccess.getEvoImplicationAccess().getHyImpliesExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoBiconditionalSizeRule()
						|| rule == grammarAccess.getEvoBiconditionalRule()
						|| action == grammarAccess.getEvoBiconditionalAccess().getEvoBinaryExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetInclusionSizeRule()
						|| rule == grammarAccess.getEvoSetInclusionRule()
						|| action == grammarAccess.getEvoSetInclusionAccess().getEvoSetInclusionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetIntersectionRule()
						|| action == grammarAccess.getEvoSetIntersectionAccess().getEvoSetIntersectionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetUnionRule()
						|| action == grammarAccess.getEvoSetUnionAccess().getEvoSetUnionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetDifferenceRule()
						|| action == grammarAccess.getEvoSetDifferenceAccess().getEvoSetDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetSymmetricDifferenceRule()
						|| action == grammarAccess.getEvoSetSymmetricDifferenceAccess().getEvoSetSymmetricDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetCartesianProductRule()
						|| action == grammarAccess.getEvoSetCartesianProductAccess().getEvoSetCartesianProductOperand1Action_1_0()
						|| rule == grammarAccess.getEvoElementOfRule()
						|| action == grammarAccess.getEvoElementOfAccess().getEvoSetElementOfOperand1Action_1_0()
						|| rule == grammarAccess.getEvoTerminalRule()) {
					sequence_EvoAnd(context, (HyAndExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEvoMappingExpressionRule()
						|| rule == grammarAccess.getEvoMappingOrRule()
						|| action == grammarAccess.getEvoMappingOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingAndRule()
						|| action == grammarAccess.getEvoMappingAndAccess().getHyAndExpressionOperand1Action_1_0()) {
					sequence_EvoMappingAnd(context, (HyAndExpression) semanticObject); 
					return; 
				}
				else break;
			case HyExpressionPackage.HY_ATTRIBUTE_REFERENCE_EXPRESSION:
				sequence_EvoMappingAttributeReferenceExpression(context, (HyAttributeReferenceExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_BOOLEAN_VALUE_EXPRESSION:
				sequence_EvoMappingBooleanValueExpression(context, (HyBooleanValueExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_CONDITIONAL_FEATURE_REFERENCE_EXPRESSION:
				sequence_EvoMappingConditionalFeatureReferenceExpression(context, (HyConditionalFeatureReferenceExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_CONTEXT_INFORMATION_REFERENCE_EXPRESSION:
				sequence_EvoMappingContextInformationReferenceExpression(context, (HyContextInformationReferenceExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_DIVISION_EXPRESSION:
				sequence_EvoMappingDivisionExpression(context, (HyDivisionExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_EQUAL_EXPRESSION:
				if (rule == grammarAccess.getEvoExpressionRule()
						|| rule == grammarAccess.getEvoXOrRule()
						|| action == grammarAccess.getEvoXOrAccess().getEvoXOrOperand1Action_1_0()
						|| rule == grammarAccess.getEvoOrRule()
						|| action == grammarAccess.getEvoOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoAndRule()
						|| action == grammarAccess.getEvoAndAccess().getHyAndExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoEqualRule()
						|| action == grammarAccess.getEvoEqualAccess().getHyEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoUnequalSizeRule()
						|| rule == grammarAccess.getEvoUnequalRule()
						|| action == grammarAccess.getEvoUnequalAccess().getHyNotEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoImplicationSizeRule()
						|| rule == grammarAccess.getEvoImplicationRule()
						|| action == grammarAccess.getEvoImplicationAccess().getHyImpliesExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoBiconditionalSizeRule()
						|| rule == grammarAccess.getEvoBiconditionalRule()
						|| action == grammarAccess.getEvoBiconditionalAccess().getEvoBinaryExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetInclusionSizeRule()
						|| rule == grammarAccess.getEvoSetInclusionRule()
						|| action == grammarAccess.getEvoSetInclusionAccess().getEvoSetInclusionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetIntersectionRule()
						|| action == grammarAccess.getEvoSetIntersectionAccess().getEvoSetIntersectionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetUnionRule()
						|| action == grammarAccess.getEvoSetUnionAccess().getEvoSetUnionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetDifferenceRule()
						|| action == grammarAccess.getEvoSetDifferenceAccess().getEvoSetDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetSymmetricDifferenceRule()
						|| action == grammarAccess.getEvoSetSymmetricDifferenceAccess().getEvoSetSymmetricDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetCartesianProductRule()
						|| action == grammarAccess.getEvoSetCartesianProductAccess().getEvoSetCartesianProductOperand1Action_1_0()
						|| rule == grammarAccess.getEvoElementOfRule()
						|| action == grammarAccess.getEvoElementOfAccess().getEvoSetElementOfOperand1Action_1_0()
						|| rule == grammarAccess.getEvoTerminalRule()) {
					sequence_EvoEqual(context, (HyEqualExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEvoMappingExpressionRule()
						|| rule == grammarAccess.getEvoMappingOrRule()
						|| action == grammarAccess.getEvoMappingOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingAndRule()
						|| action == grammarAccess.getEvoMappingAndAccess().getHyAndExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingEqualRule()
						|| action == grammarAccess.getEvoMappingEqualAccess().getHyEqualExpressionOperand1Action_1_0()) {
					sequence_EvoMappingEqual(context, (HyEqualExpression) semanticObject); 
					return; 
				}
				else break;
			case HyExpressionPackage.HY_EQUIVALENCE_EXPRESSION:
				sequence_EvoMappingEquivalence(context, (HyEquivalenceExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_FEATURE_REFERENCE_EXPRESSION:
				sequence_EvoMappingFeatureReferenceExpression(context, (HyFeatureReferenceExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_GREATER_EXPRESSION:
				sequence_EvoMappingGreaterExpression(context, (HyGreaterExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_GREATER_OR_EQUAL_EXPRESSION:
				sequence_EvoMappingGreaterOrEqualExpression(context, (HyGreaterOrEqualExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_IF_POSSIBLE_EXPRESSION:
				sequence_EvoMappingIfPossibleExpression(context, (HyIfPossibleExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_IMPLIES_EXPRESSION:
				if (rule == grammarAccess.getEvoExpressionRule()
						|| rule == grammarAccess.getEvoXOrRule()
						|| action == grammarAccess.getEvoXOrAccess().getEvoXOrOperand1Action_1_0()
						|| rule == grammarAccess.getEvoOrRule()
						|| action == grammarAccess.getEvoOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoAndRule()
						|| action == grammarAccess.getEvoAndAccess().getHyAndExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoEqualRule()
						|| action == grammarAccess.getEvoEqualAccess().getHyEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoUnequalSizeRule()
						|| rule == grammarAccess.getEvoUnequalRule()
						|| action == grammarAccess.getEvoUnequalAccess().getHyNotEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoImplicationSizeRule()
						|| rule == grammarAccess.getEvoImplicationRule()
						|| action == grammarAccess.getEvoImplicationAccess().getHyImpliesExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoBiconditionalSizeRule()
						|| rule == grammarAccess.getEvoBiconditionalRule()
						|| action == grammarAccess.getEvoBiconditionalAccess().getEvoBinaryExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetInclusionSizeRule()
						|| rule == grammarAccess.getEvoSetInclusionRule()
						|| action == grammarAccess.getEvoSetInclusionAccess().getEvoSetInclusionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetIntersectionRule()
						|| action == grammarAccess.getEvoSetIntersectionAccess().getEvoSetIntersectionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetUnionRule()
						|| action == grammarAccess.getEvoSetUnionAccess().getEvoSetUnionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetDifferenceRule()
						|| action == grammarAccess.getEvoSetDifferenceAccess().getEvoSetDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetSymmetricDifferenceRule()
						|| action == grammarAccess.getEvoSetSymmetricDifferenceAccess().getEvoSetSymmetricDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetCartesianProductRule()
						|| action == grammarAccess.getEvoSetCartesianProductAccess().getEvoSetCartesianProductOperand1Action_1_0()
						|| rule == grammarAccess.getEvoElementOfRule()
						|| action == grammarAccess.getEvoElementOfAccess().getEvoSetElementOfOperand1Action_1_0()
						|| rule == grammarAccess.getEvoTerminalRule()) {
					sequence_EvoImplication(context, (HyImpliesExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEvoMappingExpressionRule()
						|| rule == grammarAccess.getEvoMappingOrRule()
						|| action == grammarAccess.getEvoMappingOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingAndRule()
						|| action == grammarAccess.getEvoMappingAndAccess().getHyAndExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingEqualRule()
						|| action == grammarAccess.getEvoMappingEqualAccess().getHyEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingUnequalRule()
						|| action == grammarAccess.getEvoMappingUnequalAccess().getHyNotEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingImplicationRule()
						|| action == grammarAccess.getEvoMappingImplicationAccess().getHyImpliesExpressionOperand1Action_1_0()) {
					sequence_EvoMappingImplication(context, (HyImpliesExpression) semanticObject); 
					return; 
				}
				else break;
			case HyExpressionPackage.HY_LESS_EXPRESSION:
				sequence_EvoMappingLessExpression(context, (HyLessExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_LESS_OR_EQUAL_EXPRESSION:
				sequence_EvoMappingLessOrEqualExpression(context, (HyLessOrEqualExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_MAXIMUM_EXPRESSION:
				sequence_EvoMappingMaximumExpression(context, (HyMaximumExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_MINIMUM_EXPRESSION:
				sequence_EvoMappingMimumumExpression(context, (HyMinimumExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_MODULO_EXPRESSION:
				sequence_EvoMappingModuloExpression(context, (HyModuloExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_MULTIPLICATION_EXPRESSION:
				sequence_EvoMappingMultiplicationExpression(context, (HyMultiplicationExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_NEGATION_EXPRESSION:
				sequence_EvoMappingNegation(context, (HyNegationExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_NESTED_EXPRESSION:
				sequence_EvoMappingNestedExpression(context, (HyNestedExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_NOT_EQUAL_EXPRESSION:
				if (rule == grammarAccess.getEvoMappingExpressionRule()
						|| rule == grammarAccess.getEvoMappingOrRule()
						|| action == grammarAccess.getEvoMappingOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingAndRule()
						|| action == grammarAccess.getEvoMappingAndAccess().getHyAndExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingEqualRule()
						|| action == grammarAccess.getEvoMappingEqualAccess().getHyEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingUnequalRule()
						|| action == grammarAccess.getEvoMappingUnequalAccess().getHyNotEqualExpressionOperand1Action_1_0()) {
					sequence_EvoMappingUnequal(context, (HyNotEqualExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEvoExpressionRule()
						|| rule == grammarAccess.getEvoXOrRule()
						|| action == grammarAccess.getEvoXOrAccess().getEvoXOrOperand1Action_1_0()
						|| rule == grammarAccess.getEvoOrRule()
						|| action == grammarAccess.getEvoOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoAndRule()
						|| action == grammarAccess.getEvoAndAccess().getHyAndExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoEqualRule()
						|| action == grammarAccess.getEvoEqualAccess().getHyEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoUnequalSizeRule()
						|| rule == grammarAccess.getEvoUnequalRule()
						|| action == grammarAccess.getEvoUnequalAccess().getHyNotEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoImplicationSizeRule()
						|| rule == grammarAccess.getEvoImplicationRule()
						|| action == grammarAccess.getEvoImplicationAccess().getHyImpliesExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoBiconditionalSizeRule()
						|| rule == grammarAccess.getEvoBiconditionalRule()
						|| action == grammarAccess.getEvoBiconditionalAccess().getEvoBinaryExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetInclusionSizeRule()
						|| rule == grammarAccess.getEvoSetInclusionRule()
						|| action == grammarAccess.getEvoSetInclusionAccess().getEvoSetInclusionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetIntersectionRule()
						|| action == grammarAccess.getEvoSetIntersectionAccess().getEvoSetIntersectionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetUnionRule()
						|| action == grammarAccess.getEvoSetUnionAccess().getEvoSetUnionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetDifferenceRule()
						|| action == grammarAccess.getEvoSetDifferenceAccess().getEvoSetDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetSymmetricDifferenceRule()
						|| action == grammarAccess.getEvoSetSymmetricDifferenceAccess().getEvoSetSymmetricDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetCartesianProductRule()
						|| action == grammarAccess.getEvoSetCartesianProductAccess().getEvoSetCartesianProductOperand1Action_1_0()
						|| rule == grammarAccess.getEvoElementOfRule()
						|| action == grammarAccess.getEvoElementOfAccess().getEvoSetElementOfOperand1Action_1_0()
						|| rule == grammarAccess.getEvoTerminalRule()) {
					sequence_EvoUnequal(context, (HyNotEqualExpression) semanticObject); 
					return; 
				}
				else break;
			case HyExpressionPackage.HY_NOT_EXPRESSION:
				if (rule == grammarAccess.getEvoMappingExpressionRule()
						|| rule == grammarAccess.getEvoMappingOrRule()
						|| action == grammarAccess.getEvoMappingOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingAndRule()
						|| action == grammarAccess.getEvoMappingAndAccess().getHyAndExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingEqualRule()
						|| action == grammarAccess.getEvoMappingEqualAccess().getHyEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingUnequalRule()
						|| action == grammarAccess.getEvoMappingUnequalAccess().getHyNotEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingImplicationRule()
						|| action == grammarAccess.getEvoMappingImplicationAccess().getHyImpliesExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingEquivalenceRule()
						|| action == grammarAccess.getEvoMappingEquivalenceAccess().getHyEquivalenceExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingLessExpressionRule()
						|| action == grammarAccess.getEvoMappingLessExpressionAccess().getHyLessExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingIfPossibleExpressionRule()
						|| action == grammarAccess.getEvoMappingIfPossibleExpressionAccess().getHyIfPossibleExpressionOperandsAction_1_1()
						|| rule == grammarAccess.getEvoMappingLessOrEqualExpressionRule()
						|| action == grammarAccess.getEvoMappingLessOrEqualExpressionAccess().getHyLessOrEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingGreaterExpressionRule()
						|| action == grammarAccess.getEvoMappingGreaterExpressionAccess().getHyGreaterExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingGreaterOrEqualExpressionRule()
						|| action == grammarAccess.getEvoMappingGreaterOrEqualExpressionAccess().getHyGreaterOrEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingSubtractionExpressionRule()
						|| action == grammarAccess.getEvoMappingSubtractionExpressionAccess().getHySubtractionExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingAdditionExpressionRule()
						|| action == grammarAccess.getEvoMappingAdditionExpressionAccess().getHyAdditionExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingModuloExpressionRule()
						|| action == grammarAccess.getEvoMappingModuloExpressionAccess().getHyModuloExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingMultiplicationExpressionRule()
						|| action == grammarAccess.getEvoMappingMultiplicationExpressionAccess().getHyMultiplicationExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingDivisionExpressionRule()
						|| action == grammarAccess.getEvoMappingDivisionExpressionAccess().getHyDivisionExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoMappingTerminalRule()
						|| rule == grammarAccess.getEvoMappingNotRule()) {
					sequence_EvoMappingNot(context, (HyNotExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEvoExpressionRule()
						|| rule == grammarAccess.getEvoXOrRule()
						|| action == grammarAccess.getEvoXOrAccess().getEvoXOrOperand1Action_1_0()
						|| rule == grammarAccess.getEvoOrRule()
						|| action == grammarAccess.getEvoOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoAndRule()
						|| action == grammarAccess.getEvoAndAccess().getHyAndExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoEqualRule()
						|| action == grammarAccess.getEvoEqualAccess().getHyEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoUnequalSizeRule()
						|| rule == grammarAccess.getEvoUnequalRule()
						|| action == grammarAccess.getEvoUnequalAccess().getHyNotEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoImplicationSizeRule()
						|| rule == grammarAccess.getEvoImplicationRule()
						|| action == grammarAccess.getEvoImplicationAccess().getHyImpliesExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoBiconditionalSizeRule()
						|| rule == grammarAccess.getEvoBiconditionalRule()
						|| action == grammarAccess.getEvoBiconditionalAccess().getEvoBinaryExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetInclusionSizeRule()
						|| rule == grammarAccess.getEvoSetInclusionRule()
						|| action == grammarAccess.getEvoSetInclusionAccess().getEvoSetInclusionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetIntersectionRule()
						|| action == grammarAccess.getEvoSetIntersectionAccess().getEvoSetIntersectionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetUnionRule()
						|| action == grammarAccess.getEvoSetUnionAccess().getEvoSetUnionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetDifferenceRule()
						|| action == grammarAccess.getEvoSetDifferenceAccess().getEvoSetDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetSymmetricDifferenceRule()
						|| action == grammarAccess.getEvoSetSymmetricDifferenceAccess().getEvoSetSymmetricDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetCartesianProductRule()
						|| action == grammarAccess.getEvoSetCartesianProductAccess().getEvoSetCartesianProductOperand1Action_1_0()
						|| rule == grammarAccess.getEvoElementOfRule()
						|| action == grammarAccess.getEvoElementOfAccess().getEvoSetElementOfOperand1Action_1_0()
						|| rule == grammarAccess.getEvoNotRule()
						|| rule == grammarAccess.getEvoTerminalRule()
						|| rule == grammarAccess.getEvoSetVariableRule()) {
					sequence_EvoNot(context, (HyNotExpression) semanticObject); 
					return; 
				}
				else break;
			case HyExpressionPackage.HY_OR_EXPRESSION:
				if (rule == grammarAccess.getEvoMappingExpressionRule()
						|| rule == grammarAccess.getEvoMappingOrRule()
						|| action == grammarAccess.getEvoMappingOrAccess().getHyOrExpressionOperand1Action_1_0()) {
					sequence_EvoMappingOr(context, (HyOrExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEvoExpressionRule()
						|| rule == grammarAccess.getEvoXOrRule()
						|| action == grammarAccess.getEvoXOrAccess().getEvoXOrOperand1Action_1_0()
						|| rule == grammarAccess.getEvoOrRule()
						|| action == grammarAccess.getEvoOrAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoAndRule()
						|| action == grammarAccess.getEvoAndAccess().getHyAndExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoEqualRule()
						|| action == grammarAccess.getEvoEqualAccess().getHyEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoUnequalSizeRule()
						|| rule == grammarAccess.getEvoUnequalRule()
						|| action == grammarAccess.getEvoUnequalAccess().getHyNotEqualExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoImplicationSizeRule()
						|| rule == grammarAccess.getEvoImplicationRule()
						|| action == grammarAccess.getEvoImplicationAccess().getHyImpliesExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoBiconditionalSizeRule()
						|| rule == grammarAccess.getEvoBiconditionalRule()
						|| action == grammarAccess.getEvoBiconditionalAccess().getEvoBinaryExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetInclusionSizeRule()
						|| rule == grammarAccess.getEvoSetInclusionRule()
						|| action == grammarAccess.getEvoSetInclusionAccess().getEvoSetInclusionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetIntersectionRule()
						|| action == grammarAccess.getEvoSetIntersectionAccess().getEvoSetIntersectionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetUnionRule()
						|| action == grammarAccess.getEvoSetUnionAccess().getEvoSetUnionOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetDifferenceRule()
						|| action == grammarAccess.getEvoSetDifferenceAccess().getEvoSetDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetSymmetricDifferenceRule()
						|| action == grammarAccess.getEvoSetSymmetricDifferenceAccess().getEvoSetSymmetricDifferenceOperand1Action_1_0()
						|| rule == grammarAccess.getEvoSetCartesianProductRule()
						|| action == grammarAccess.getEvoSetCartesianProductAccess().getEvoSetCartesianProductOperand1Action_1_0()
						|| rule == grammarAccess.getEvoElementOfRule()
						|| action == grammarAccess.getEvoElementOfAccess().getEvoSetElementOfOperand1Action_1_0()
						|| rule == grammarAccess.getEvoTerminalRule()) {
					sequence_EvoOr(context, (HyOrExpression) semanticObject); 
					return; 
				}
				else break;
			case HyExpressionPackage.HY_RELATIVE_VERSION_RESTRICTION:
				sequence_EvoMappingRelativeVersionRestriction(context, (HyRelativeVersionRestriction) semanticObject); 
				return; 
			case HyExpressionPackage.HY_SUBTRACTION_EXPRESSION:
				sequence_EvoMappingSubtractionExpression(context, (HySubtractionExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_VALUE_EXPRESSION:
				sequence_EvoMappingValueExpression(context, (HyValueExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_VERSION_RANGE_RESTRICTION:
				sequence_EvoMappingVersionRangeRestriction(context, (HyVersionRangeRestriction) semanticObject); 
				return; 
			}
		else if (epackage == MappingRepairDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MappingRepairDslPackage.EVO_MAPPING_KEEP:
				sequence_EvoMappingKeep(context, (EvoMappingKeep) semanticObject); 
				return; 
			case MappingRepairDslPackage.EVO_MAPPING_REPLACE:
				sequence_EvoMappingReplace(context, (EvoMappingReplace) semanticObject); 
				return; 
			case MappingRepairDslPackage.MAPPING_REPAIR_GRAMMAR_ENTRY:
				sequence_MappingRepairGrammarEntry(context, (MappingRepairGrammarEntry) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     EvoMappingRepairExpression returns EvoMappingKeep
	 *     EvoMappingKeep returns EvoMappingKeep
	 *
	 * Constraint:
	 *     operand=EvoMappingExpression
	 */
	protected void sequence_EvoMappingKeep(ISerializationContext context, EvoMappingKeep semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingRepairDslPackage.Literals.EVO_MAPPING_KEEP__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingRepairDslPackage.Literals.EVO_MAPPING_KEEP__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingKeepAccess().getOperandEvoMappingExpressionParserRuleCall_2_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvoMappingRepairExpression returns EvoMappingReplace
	 *     EvoMappingReplace returns EvoMappingReplace
	 *
	 * Constraint:
	 *     (operand1=EvoMappingExpression operand2=EvoMappingExpression)
	 */
	protected void sequence_EvoMappingReplace(ISerializationContext context, EvoMappingReplace semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingRepairDslPackage.Literals.EVO_MAPPING_REPLACE__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingRepairDslPackage.Literals.EVO_MAPPING_REPLACE__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, MappingRepairDslPackage.Literals.EVO_MAPPING_REPLACE__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingRepairDslPackage.Literals.EVO_MAPPING_REPLACE__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvoMappingReplaceAccess().getOperand1EvoMappingExpressionParserRuleCall_2_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getEvoMappingReplaceAccess().getOperand2EvoMappingExpressionParserRuleCall_6_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MappingRepairGrammarEntry returns MappingRepairGrammarEntry
	 *
	 * Constraint:
	 *     action=EvoMappingRepairExpression
	 */
	protected void sequence_MappingRepairGrammarEntry(ISerializationContext context, MappingRepairGrammarEntry semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingRepairDslPackage.Literals.MAPPING_REPAIR_GRAMMAR_ENTRY__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingRepairDslPackage.Literals.MAPPING_REPAIR_GRAMMAR_ENTRY__ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMappingRepairGrammarEntryAccess().getActionEvoMappingRepairExpressionParserRuleCall_0(), semanticObject.getAction());
		feeder.finish();
	}
	
	
}
