// automatically generated by Xtext
grammar de.evorepair.logic.EvoDsl with org.eclipse.xtext.common.Terminals

generate formuladsl "http://darwinspl.de/evorepair/logic/dsl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://hyvar-project.eu/feature/1.0" as hyfeature
import "http://darwinspl.de/evorepair/logic/0.3" 
import "http://darwinspl.de/evorepair/variable/0.2" as evovar
import "http://darwinspl.de/evorepair/evolutionoperation/0.1" as evooperations

 
Start : formula=EvoFormula;
  
EvoFormula returns EvoFormula:
	
	'formula'
	'{'
		'term' ':' term=EvoAbstractTerm ';'
	'}';

QualifiedName returns ecore::EString:
	ID ("." ID)*
;

EvoAbstractTerm:
	EvoXOr
;

EvoXOr returns EvoAbstractTerm:
	EvoOr({EvoXOr.leftElement=current} ('xor') rightElement=EvoOr)*;
	
	
EvoOr returns EvoAbstractTerm:
	EvoAnd({EvoOr.leftElement=current} ('or') rightElement=EvoAnd)*;
	
	
EvoAnd returns EvoAbstractTerm:
	EvoEqual({EvoAnd.leftElement=current} ('and') rightElement=EvoEqual)*;
	
	
EvoEqual returns EvoAbstractTerm:
	EvoUnequal({EvoEqual.leftElement=current} ('==') rightElement=EvoUnequalSize)*;
	
	
EvoUnequalSize returns EvoAbstractTerm:
	EvoUnequal | EvoSize;


EvoUnequal returns EvoAbstractTerm:
	EvoImplication({EvoUnequal.leftElement=current} ('!=') rightElement=EvoImplicationSize)* ;


EvoImplicationSize returns EvoAbstractTerm:
	EvoImplication | EvoSize;


EvoImplication returns EvoAbstractTerm:
	EvoBiconditional({EvoImplication.leftElement=current} ('=>') rightElement=EvoBiconditionalSize)*;
	
	
EvoBiconditionalSize returns EvoAbstractTerm:
	EvoBiconditional | EvoSize;
		
		
EvoBiconditional returns EvoAbstractTerm:
	EvoSetInclusion({EvoBiconditional.leftElement=current} ('<=>') rightElement=EvoSetInclusionSize)*;
	
	
EvoSetInclusionSize returns EvoAbstractTerm:
	EvoSetInclusion | EvoSize;


EvoSetInclusion returns EvoAbstractTerm:
	EvoSetIntersection({EvoSetInclusion.leftElement=current} ('inclusion') rightElement=EvoSetIntersection)*;
	

EvoSetIntersection returns EvoAbstractTerm:
	EvoSetUnion({EvoSetIntersection.leftElement=current} ('intersection') rightElement=EvoSetUnion)*;


EvoSetUnion returns EvoAbstractTerm:
	EvoSetDifference({EvoSetUnion.leftElement=current} ('union') rightElement=EvoSetDifference)*;


EvoSetDifference returns EvoAbstractTerm:
	EvoSetSymmetricDifference({EvoSetDifference.leftElement=current} ('diff') rightElement=EvoSetSymmetricDifference)*;


EvoSetSymmetricDifference returns EvoAbstractTerm:
	EvoSetCartesianProduct({EvoSetSymmetricDifference.leftElement=current} ('symdiff') rightElement=EvoSetCartesianProduct)*;


EvoSetCartesianProduct returns EvoAbstractTerm:
	EvoElementOf({EvoSetCartesianProduct.leftElement=current} ('x') rightElement=EvoElementOf)*;

EvoSetCardinality returns EvoAbstractTerm:
	{EvoSetCardinality} (('|' element=EvoAbstractTerm '|') | ('size' '(' element=EvoAbstractTerm ')'));

EvoElementOf returns EvoAbstractTerm:
	EvoTerminal({EvoSetElementOf.leftElement=current} ('elementOf') rightElement=EvoTerminal)*;

EvoForAll returns EvoAbstractTerm:
	{EvoForAll}'forAll' '('
		boundedVariables+=[evovar::EvoVariable | QualifiedName] (',' boundedVariables+=[evovar::EvoVariable | QualifiedName]) ':'
		element=EvoAbstractTerm
	')';
EvoExists returns EvoAbstractTerm:
	{EvoExits}'exists' '('
		boundedVariables+=[evovar::EvoVariable | QualifiedName] ':'
		element=EvoAbstractTerm
	')'
;

EvoSatisfiable returns EvoAbstractTerm: 
	({EvoSatisfiable}'satisfiable' '(' variables+=(EvoSetVariable | EvoApplicationConstraintTerm) (',' variables+=(EvoSetVariable | EvoApplicationConstraintTerm))* ')');
	
EvoTerminal returns EvoAbstractTerm:
	EvoVariableTerm | 
	EvoSetTerm | 
	EvoApplicationConstraintTerm | 
	EvoAllMappingsVariable | 
	EvoNot | 
	EvoForAll |
	EvoFeatureType | 
	EvoGroupType | 
	EvoSetCardinality |
	EvoChildrenOf |
	EvoParentOf |
	EvoSiblingsOf |
	EvoSatisfiable |
	'(' EvoXOr ')';






EvoSize returns EvoAbstractTerm:
	{EvoSize}size=INT;


enum EvoVariableType returns evovar::EvoVariableType: 
	EvoIdentifier = '@ident' |
	EvoSource = '@pre' |
	EvoTarget = '@post'
;

EvoVariableTerm returns EvoVariableTerm:
	variable=[evovar::EvoVariable | QualifiedName](type=EvoVariableType)?;
	
EvoApplicationConstraintTerm returns EvoVariableTerm:
	'AC' '(' variable=[evovar::EvoMappingVariable | QualifiedName] ')';
	


EvoNot returns EvoAbstractTerm:
	({EvoNot} 'not' element=EvoEqual);



EvoFeatureType returns EvoAbstractTerm:
	({EvoFeatureType}'featureType' ('(' variables+=EvoVariableTerm (',' variables+=EvoVariableTerm)* ')') '==' type=HyFeatureTypeEnum)
;


enum HyFeatureTypeEnum returns hyfeature::HyFeatureTypeEnum:
	OPTIONAL = 'optional' | MANDATORY = 'mandatory'
;

EvoGroupType returns EvoAbstractTerm:
	({EvoGroupType}'groupType' ('(' variables+=EvoGroupTerm (',' variables+=EvoGroupTerm)* ')') '==' type=HyGroupTypeEnum)
;

EvoGroupTerm returns EvoVariableTerm:
	variable=[evovar::EvoGroupVariable | QualifiedName](type=EvoVariableType)?;

enum HyGroupTypeEnum returns hyfeature::HyGroupTypeEnum:
	AND = 'and' | OR = 'or' | ALTERNATIVE = 'alternative'
;

EvoSetTerm:
	'{' variables+=EvoSetVariable (',' variables+=EvoSetVariable)* '}'
;

EvoSetVariable returns EvoAbstractTerm:
	EvoVariableTerm | EvoSetTerm | EvoNot
;



EvoAllMappingsVariable returns EvoAbstractTerm: 
	{EvoAllMappingsVariable}'M' ('(' variables+=EvoSetVariable (',' variables+=EvoSetVariable)*')');

EvoParentOf:
	'parentOf' '(' variable=EvoVariableTerm ')'
;

EvoSiblingsOf:
	'sibilingsOf' '(' variable=EvoVariableTerm ')'
;

EvoChildrenOf: 
	'childrenOf' '(' variable=EvoVariableTerm ')'
;









/*
EvoElementOf returns EvoElementOf:
	'EvoElementOf'
	'{'
		'leftElement' leftElement=EvoAbstractTerm
		'rightElement' rightElement=EvoAbstractTerm
	'}';

EvoNotElementOf returns EvoNotElementOf:
	'EvoNotElementOf'
	'{'
		'leftElement' leftElement=EvoAbstractTerm
		'rightElement' rightElement=EvoAbstractTerm
	'}';

EvoComplement returns EvoComplement:
	'EvoComplement'
	'{'
		'element' element=EvoAbstractTerm
	'}';


EvoForAll returns EvoForAll:
	'EvoForAll'
	'{'
		'boundedVariable' boundedVariable=[EvoVariable|STRING]
		'element' element=EvoAbstractTerm
	'}';

EvoExist returns EvoExist:
	'EvoExist'
	'{'
		'boundedVariable' boundedVariable=[EvoVariable|STRING]
		'element' element=EvoAbstractTerm
	'}';

EvoUniqueExists returns EvoUniqueExists:
	'EvoUniqueExists'
	'{'
		'boundedVariable' boundedVariable=[EvoVariable|STRING]
		'element' element=EvoAbstractTerm
	'}';

EvoIndexedIntegerVariable returns EvoIndexedIntegerVariable:
	'EvoIndexedIntegerVariable'
	name=STRING
	'{'
		'index' index=[EvoIntegerVariable|STRING]
	'}';

EvoIntegerVariable returns EvoIntegerVariable:
	{EvoIntegerVariable}
	'EvoIntegerVariable'
	name=STRING;

EvoVariableTerm returns EvoVariableTerm:
	'EvoVariableTerm'
	'{'
		'variable' variable=[EvoVariable|STRING]
	'}';

EvoApplicationConstraintVariable returns EvoApplicationConstraintVariable:
	{EvoApplicationConstraintVariable}
	'EvoApplicationConstraintVariable'
	name=STRING;

EvoFeatureModelConstraintVariable returns EvoFeatureModelConstraintVariable:
	{EvoFeatureModelConstraintVariable}
	'EvoFeatureModelConstraintVariable'
	name=STRING;

EvoArbitratyFeatureVariable returns EvoArbitratyFeatureVariable:
	{EvoArbitratyFeatureVariable}
	'EvoArbitratyFeatureVariable'
	name=STRING
	'{'
		('feature' feature=[feature::HyFeature|STRING])?
	'}';

EvoPredefinedVariable_Impl returns EvoPredefinedVariable:
	{EvoPredefinedVariable}
	(afterEvolution?='afterEvolution')?
	'EvoPredefinedVariable'
	name=STRING;

EvoAllFeaturesVariable returns EvoAllFeaturesVariable:
	{EvoAllFeaturesVariable}
	'EvoAllFeaturesVariable'
	name=STRING;

EvoMappingVariable returns EvoMappingVariable:
	(afterEvolution?='afterEvolution')?
	'EvoMappingVariable'
	name=STRING
	'{'
		'associatedMapping' associatedMapping=[mapping::HyMapping|STRING]
	'}';

EvoRequirementVariable returns EvoRequirementVariable:
	{EvoRequirementVariable}
	(afterEvolution?='afterEvolution')?
	'EvoRequirementVariable'
	name=STRING;
*/



/**
 * Rules for variables
 */
 /* 
 
EvoVariable returns EvoFormulaSetVariable:
	EvoFormulaSetVariable;

EvoVariableTerm returns EvoVariableTerm:
	variable=[EvoFormulaVariable];
	

EvoFormulaSetVariable returns EvoFormulaSetVariable:
	'set' name = ID ('_' index=INT) '=' '{' elements+=[EvoFormulaVariable] ( "," elements+=[EvoFormulaVariable])*  '}';
	
EvoInvolvedFeatureVariable returns EvoInvolvedFeatureVariable: 
	'inv_feature' name = ID; 
EvoMappingAssociatedAssetsVariable returns EvoMappingAssociatedAssetsVariable:
	associatedMapping=[EvoMappingVariable];

EvoMappingVariable returns EvoMappingVariable:
	'mapping' mapping=STRING containingFeature=[EvoFormulaVariable];
*/
