// automatically generated by Xtext
grammar de.evorepair.logic.EvoDsl with org.eclipse.xtext.common.Terminals

generate formuladsl "http://darwinspl.de/evorepair/logic/dsl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://hyvar-project.eu/feature/1.0" as hyfeature
import "http://darwinspl.de/evorepair/logic/0.3" 
import "http://darwinspl.de/evorepair/variable/0.1" as evovariables
import "http://darwinspl.de/evorepair/evolutionoperation/0.1" as evooperations

 
Start : formula=EvoFormula;
  
EvoFormula returns EvoFormula:
	
	'formula'
	'{'
		('test'
			"mapsTo" testTrigger=[evooperations::EvoOperation|QualifiedName]	
		)?
		
		'term' ':' term=EvoAbstractTerm ';'
	'}';

QualifiedName returns ecore::EString:
	ID ("." ID)*
;

EvoAbstractTerm returns EvoAbstractTerm:
	EvoXOr;
	
EvoXOr returns EvoAbstractTerm:
	EvoOr({EvoXOr.leftElement=current} ('xor') rightElement=EvoOr)*;
	
EvoOr returns EvoAbstractTerm:
	EvoAnd({EvoOr.leftElement=current} ('or') rightElement=EvoAnd)*;
	
EvoAnd returns EvoAbstractTerm:
	EvoNot({EvoAnd.leftElement=current} ('and') rightElement=EvoNot)*;
EvoNot returns EvoAbstractTerm:
	({EvoNot} 'not' element=EvoEqual) | EvoEqual;
EvoEqual returns EvoAbstractTerm:
	EvoUnequal({EvoEqual.leftElement=current} ('=') rightElement=EvoUnequalEmpty)*;
	
EvoUnequalEmpty returns EvoAbstractTerm:
	EvoUnequal | EvoEmpty;

EvoUnequal returns EvoAbstractTerm:
	EvoImplication({EvoUnequal.leftElement=current} ('!=') rightElement=EvoImplicationEmpty)* ;

EvoImplicationEmpty returns EvoAbstractTerm:
	EvoImplication | EvoEmpty;

EvoImplication returns EvoAbstractTerm:
	EvoBiconditional({EvoImplication.leftElement=current} ('=>') rightElement=EvoBiconditionalEmpty)*;
	
EvoBiconditionalEmpty returns EvoAbstractTerm:
EvoBiconditional | EvoEmpty;
		
EvoBiconditional returns EvoAbstractTerm:
	EvoSetInclusion({EvoBiconditional.leftElement=current} ('<=>') rightElement=EvoSetInclusionEmpty)*;
	
EvoSetInclusionEmpty returns EvoAbstractTerm:
EvoSetInclusion | EvoEmpty;


EvoAbstractOneParameterTerm returns EvoAbstractTerm:
	EvoVariableTerm | '(' EvoXOr ')';

 	
EvoSetInclusion returns EvoAbstractTerm:
	EvoSetIntersection({EvoBiconditional.leftElement=current} ('inclusion') rightElement=EvoSetIntersection)*;
	

EvoSetIntersection returns EvoAbstractTerm:
	EvoSetUnion({EvoBiconditional.leftElement=current} ('intersection') rightElement=EvoSetUnion)*;


EvoSetUnion returns EvoAbstractTerm:
	EvoSetDifference({EvoBiconditional.leftElement=current} ('union') rightElement=EvoSetDifference)*;


EvoSetDifference returns EvoAbstractTerm:
	EvoSetSymmetricDifference({EvoSetDifference.leftElement=current} ('diff') rightElement=EvoSetSymmetricDifference)*;


EvoSetSymmetricDifference returns EvoAbstractTerm:
	EvoSetCartesianProduct({EvoSetSymmetricDifference.leftElement=current} ('symdiff') rightElement=EvoSetCartesianProduct)*;


EvoSetCartesianProduct returns EvoAbstractTerm:
	EvoSetCardinality({EvoSetCartesianProduct.leftElement=current} ('x') rightElement=EvoSetCardinality)*;


EvoSetCardinality returns EvoAbstractTerm:
	({EvoSetCardinality} '|' element=EvoAbstractOneParameterTerm '|' | EvoAbstractOneParameterTerm);

EvoEmpty:
	{EvoEmpty}"empty";


EvoVariableTerm returns EvoVariableTerm:
	variable=[evovariables::EvoVariable|QualifiedName];



















/*
EvoElementOf returns EvoElementOf:
	'EvoElementOf'
	'{'
		'leftElement' leftElement=EvoAbstractTerm
		'rightElement' rightElement=EvoAbstractTerm
	'}';

EvoNotElementOf returns EvoNotElementOf:
	'EvoNotElementOf'
	'{'
		'leftElement' leftElement=EvoAbstractTerm
		'rightElement' rightElement=EvoAbstractTerm
	'}';

EvoComplement returns EvoComplement:
	'EvoComplement'
	'{'
		'element' element=EvoAbstractTerm
	'}';


EvoForAll returns EvoForAll:
	'EvoForAll'
	'{'
		'boundedVariable' boundedVariable=[EvoVariable|STRING]
		'element' element=EvoAbstractTerm
	'}';

EvoExist returns EvoExist:
	'EvoExist'
	'{'
		'boundedVariable' boundedVariable=[EvoVariable|STRING]
		'element' element=EvoAbstractTerm
	'}';

EvoUniqueExists returns EvoUniqueExists:
	'EvoUniqueExists'
	'{'
		'boundedVariable' boundedVariable=[EvoVariable|STRING]
		'element' element=EvoAbstractTerm
	'}';

EvoIndexedIntegerVariable returns EvoIndexedIntegerVariable:
	'EvoIndexedIntegerVariable'
	name=STRING
	'{'
		'index' index=[EvoIntegerVariable|STRING]
	'}';

EvoIntegerVariable returns EvoIntegerVariable:
	{EvoIntegerVariable}
	'EvoIntegerVariable'
	name=STRING;

EvoVariableTerm returns EvoVariableTerm:
	'EvoVariableTerm'
	'{'
		'variable' variable=[EvoVariable|STRING]
	'}';

EvoApplicationConstraintVariable returns EvoApplicationConstraintVariable:
	{EvoApplicationConstraintVariable}
	'EvoApplicationConstraintVariable'
	name=STRING;

EvoFeatureModelConstraintVariable returns EvoFeatureModelConstraintVariable:
	{EvoFeatureModelConstraintVariable}
	'EvoFeatureModelConstraintVariable'
	name=STRING;

EvoArbitratyFeatureVariable returns EvoArbitratyFeatureVariable:
	{EvoArbitratyFeatureVariable}
	'EvoArbitratyFeatureVariable'
	name=STRING
	'{'
		('feature' feature=[feature::HyFeature|STRING])?
	'}';

EvoPredefinedVariable_Impl returns EvoPredefinedVariable:
	{EvoPredefinedVariable}
	(afterEvolution?='afterEvolution')?
	'EvoPredefinedVariable'
	name=STRING;

EvoAllFeaturesVariable returns EvoAllFeaturesVariable:
	{EvoAllFeaturesVariable}
	'EvoAllFeaturesVariable'
	name=STRING;

EvoMappingVariable returns EvoMappingVariable:
	(afterEvolution?='afterEvolution')?
	'EvoMappingVariable'
	name=STRING
	'{'
		'associatedMapping' associatedMapping=[mapping::HyMapping|STRING]
	'}';

EvoRequirementVariable returns EvoRequirementVariable:
	{EvoRequirementVariable}
	(afterEvolution?='afterEvolution')?
	'EvoRequirementVariable'
	name=STRING;
*/



/**
 * Rules for variables
 */
 /* 
 
EvoVariable returns EvoFormulaSetVariable:
	EvoFormulaSetVariable;

EvoVariableTerm returns EvoVariableTerm:
	variable=[EvoFormulaVariable];
	

EvoFormulaSetVariable returns EvoFormulaSetVariable:
	'set' name = ID ('_' index=INT) '=' '{' elements+=[EvoFormulaVariable] ( "," elements+=[EvoFormulaVariable])*  '}';
	
EvoInvolvedFeatureVariable returns EvoInvolvedFeatureVariable: 
	'inv_feature' name = ID; 
EvoMappingAssociatedAssetsVariable returns EvoMappingAssociatedAssetsVariable:
	associatedMapping=[EvoMappingVariable];

EvoMappingVariable returns EvoMappingVariable:
	'mapping' mapping=STRING containingFeature=[EvoFormulaVariable];
*/
