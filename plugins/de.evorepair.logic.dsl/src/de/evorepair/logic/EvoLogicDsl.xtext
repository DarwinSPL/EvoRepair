// automatically generated by Xtext
grammar de.evorepair.logic.EvoLogicDsl with org.eclipse.xtext.common.Terminals

generate evo_logic_dsl "http://darwinspl.de/evorepair/logic/dsl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://hyvar-project.eu/feature/1.0" as dw_feature
import "http://hyvar-project.eu/feature/expression/1.0" as dw_expression
import "http://darwinspl.de/evorepair/logic/0.4" as evo_logic
import "http://darwinspl.de/evorepair/variable/0.2" as evo_variable

 
GrammarEntry : formula=EvoFormula;
  
  
EvoFormula returns evo_logic::EvoFormula:	
	'formula'
	'{'
		'term' ':' term=EvoExpression ';'
	'}';


QualifiedName returns ecore::EString:
	ID ("." ID)*;


EvoExpression returns dw_expression::HyExpression:
	EvoXOr;


EvoXOr returns dw_expression::HyExpression:
	EvoOr({EvoXOr.operand1=current} ('xor') operand2=EvoOr)*;
	
	
EvoOr returns dw_expression::HyExpression:
	EvoAnd({EvoOr.operand1=current} ('||') operand2=EvoAnd)*;
	
	
EvoAnd returns dw_expression::HyExpression:
	EvoEqual({EvoAnd.operand1=current} ('&&') operand2=EvoEqual)*;
	
	
EvoEqual returns dw_expression::HyExpression:
	EvoUnequal({EvoEqual.operand1=current} ('==') operand2=EvoUnequalSize)*;
	
	
EvoUnequalSize returns dw_expression::HyExpression:
	EvoUnequal | EvoSize;


EvoUnequal returns dw_expression::HyExpression:
	EvoImplication({EvoUnequal.operand1=current} ('!=') operand2=EvoImplicationSize)* ;


EvoImplicationSize returns dw_expression::HyExpression:
	EvoImplication | EvoSize;


EvoImplication returns dw_expression::HyExpression:
	EvoBiconditional({EvoImplication.operand1=current} ('=>') operand2=EvoBiconditionalSize)*;
	
	
EvoBiconditionalSize returns dw_expression::HyExpression:
	EvoBiconditional | EvoSize;
		
		
EvoBiconditional returns dw_expression::HyExpression:
	EvoSetInclusion({EvoBiconditional.operand1=current} ('<=>') operand2=EvoSetInclusionSize)*;
	
	
EvoSetInclusionSize returns dw_expression::HyExpression:
	EvoSetInclusion | EvoSize;


EvoSetInclusion returns dw_expression::HyExpression:
	EvoSetIntersection({EvoSetInclusion.operand1=current} ('inclusion') operand2=EvoSetIntersection)*;
	

EvoSetIntersection returns dw_expression::HyExpression:
	EvoSetUnion({EvoSetIntersection.operand1=current} ('intersection') operand2=EvoSetUnion)*;


EvoSetUnion returns dw_expression::HyExpression:
	EvoSetDifference({EvoSetUnion.operand1=current} ('union') operand2=EvoSetDifference)*;


EvoSetDifference returns dw_expression::HyExpression:
	EvoSetSymmetricDifference({EvoSetDifference.operand1=current} ('difference') operand2=EvoSetSymmetricDifference)*;


EvoSetSymmetricDifference returns dw_expression::HyExpression:
	EvoSetCartesianProduct({EvoSetSymmetricDifference.operand1=current} ('symmetric_difference') operand2=EvoSetCartesianProduct)*;


EvoSetCartesianProduct returns dw_expression::HyExpression:
	EvoElementOf({EvoSetCartesianProduct.operand1=current} ('x') operand2=EvoElementOf)*;


EvoSetCardinality returns dw_expression::HyExpression:
	{EvoSetCardinality} (('|' operand=EvoExpression '|') | ('size' '(' operand=EvoExpression ')'));


EvoElementOf returns dw_expression::HyExpression:
	EvoTerminal({EvoSetElementOf.operand1=current} ('elementOf') operand2=EvoTerminal)*;



	
EvoForAll:
	'forAll' '('
		boundedVariables += EvoVariableTerm (',' boundedVariables += EvoVariableTerm) ':'
		operand=EvoExpression
	')';
	
	
EvoExists:
	'exists' '('
		boundedVariables+=EvoVariableTerm ':'
		element=EvoExpression
	')';


EvoNot returns dw_expression::HyNotExpression:
	('not' '(' operand=EvoExpression ')') | ('!' operand=EvoVariableTerm);


EvoSatisfiable returns dw_expression::HyExpression: 
	({EvoSatisfiable}'satisfiable' '(' variables+=(EvoSetVariable | EvoApplicationConstraintTerm) (',' variables+=(EvoSetVariable | EvoApplicationConstraintTerm))* ')');


EvoTerminal returns dw_expression::HyExpression:
	EvoVariableTerm | 
	EvoSetTerm | 
	EvoApplicationConstraintTerm | 
	EvoForAll |
	EvoExists |
	EvoNot |
	EvoFeatureType | 
	EvoGroupType | 
	EvoSetCardinality |
	EvoChildrenOf |
	EvoParentOf |
	EvoSiblingsOf |
	EvoSatisfiable |
	'(' EvoXOr ')';
	


EvoSize returns dw_expression::HyExpression:
	{EvoSize}size=INT;


enum EvoVariableType returns evo_variable::EvoVariableType: 
	EvoIdentifier = '@ident' |
	EvoSource = '@pre' |
	EvoTarget = '@post';


EvoVariableTerm returns evo_logic::EvoVariableTerm:
	variable=[evo_variable::EvoVariable | QualifiedName](type=EvoVariableType)?;
	
	
EvoApplicationConstraintTerm returns evo_logic::EvoVariableTerm:
	'AC' '(' variable=[evo_variable::EvoMappingVariable | QualifiedName] ')';
	
	
EvoFeatureType returns dw_expression::HyExpression:
	({EvoFeatureType}'featureType' ('(' variables+=EvoVariableTerm (',' variables+=EvoVariableTerm)* ')') '==' type=HyFeatureTypeEnum)
;

enum HyFeatureTypeEnum returns dw_feature::HyFeatureTypeEnum:
	OPTIONAL = 'optional' | MANDATORY = 'mandatory';


EvoGroupType returns dw_expression::HyExpression:
	({EvoGroupType}'groupType' ('(' variables+=EvoGroupTerm (',' variables+=EvoGroupTerm)* ')') '==' type=HyGroupTypeEnum);


EvoGroupTerm returns evo_logic::EvoVariableTerm:
	variable=[evo_variable::EvoGroupVariable | QualifiedName](type=EvoVariableType)?;


enum HyGroupTypeEnum returns dw_feature::HyGroupTypeEnum:
	AND = 'and' | OR = 'or' | ALTERNATIVE = 'alternative';


EvoSetTerm:
	'{' variables+=EvoSetVariable (',' variables+=EvoSetVariable)* '}';


EvoSetVariable returns dw_expression::HyExpression:
	EvoVariableTerm | EvoSetTerm | EvoNot;


EvoParentOf:
	'parentOf' '(' variable=EvoVariableTerm ')';


EvoSiblingsOf:
	'sibilingsOf' '(' variable=EvoVariableTerm ')';


EvoChildrenOf: 
	'childrenOf' '(' variable=EvoVariableTerm ')';