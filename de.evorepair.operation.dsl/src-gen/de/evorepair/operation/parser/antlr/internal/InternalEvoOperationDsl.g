/*
 * generated by Xtext 2.11.0
 */
grammar InternalEvoOperationDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.evorepair.operation.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.evorepair.operation.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.evorepair.operation.services.EvoOperationDslGrammarAccess;

}

@parser::members {

 	private EvoOperationDslGrammarAccess grammarAccess;

    public InternalEvoOperationDslParser(TokenStream input, EvoOperationDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "GrammarEntry";
   	}

   	@Override
   	protected EvoOperationDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleGrammarEntry
entryRuleGrammarEntry returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGrammarEntryRule()); }
	iv_ruleGrammarEntry=ruleGrammarEntry
	{ $current=$iv_ruleGrammarEntry.current; }
	EOF;

// Rule GrammarEntry
ruleGrammarEntry returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getGrammarEntryAccess().getContainerEvoOperationContainerParserRuleCall_0());
			}
			lv_container_0_0=ruleEvoOperationContainer
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getGrammarEntryRule());
				}
				set(
					$current,
					"container",
					lv_container_0_0,
					"de.evorepair.operation.EvoOperationDsl.EvoOperationContainer");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleEvoOperationContainer
entryRuleEvoOperationContainer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEvoOperationContainerRule()); }
	iv_ruleEvoOperationContainer=ruleEvoOperationContainer
	{ $current=$iv_ruleEvoOperationContainer.current; }
	EOF;

// Rule EvoOperationContainer
ruleEvoOperationContainer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEvoOperationContainerAccess().getOperationsEvoOperationParserRuleCall_0_0());
				}
				lv_operations_0_0=ruleEvoOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEvoOperationContainerRule());
					}
					add(
						$current,
						"operations",
						lv_operations_0_0,
						"de.evorepair.operation.EvoOperationDsl.EvoOperation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEvoOperationContainerAccess().getOperationsEvoOperationParserRuleCall_1_0());
				}
				lv_operations_1_0=ruleEvoOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEvoOperationContainerRule());
					}
					add(
						$current,
						"operations",
						lv_operations_1_0,
						"de.evorepair.operation.EvoOperationDsl.EvoOperation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleEvoOperation
entryRuleEvoOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEvoOperationRule()); }
	iv_ruleEvoOperation=ruleEvoOperation
	{ $current=$iv_ruleEvoOperation.current; }
	EOF;

// Rule EvoOperation
ruleEvoOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='operation'
		{
			newLeafNode(otherlv_0, grammarAccess.getEvoOperationAccess().getOperationKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEvoOperationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEvoOperationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getEvoOperationAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='variables'
		{
			newLeafNode(otherlv_3, grammarAccess.getEvoOperationAccess().getVariablesKeyword_3());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getEvoOperationAccess().getColonKeyword_4());
		}
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getEvoOperationAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEvoOperationAccess().getVariablesEvoVariableParserRuleCall_6_0());
				}
				lv_variables_6_0=ruleEvoVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEvoOperationRule());
					}
					add(
						$current,
						"variables",
						lv_variables_6_0,
						"de.evorepair.evolution.variable.EvoVariableDsl.EvoVariable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEvoOperationAccess().getVariablesEvoVariableParserRuleCall_7_0());
				}
				lv_variables_7_0=ruleEvoVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEvoOperationRule());
					}
					add(
						$current,
						"variables",
						lv_variables_7_0,
						"de.evorepair.evolution.variable.EvoVariableDsl.EvoVariable");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getEvoOperationAccess().getRightCurlyBracketKeyword_8());
		}
		otherlv_9='timestamp'
		{
			newLeafNode(otherlv_9, grammarAccess.getEvoOperationAccess().getTimestampKeyword_9());
		}
		otherlv_10=':'
		{
			newLeafNode(otherlv_10, grammarAccess.getEvoOperationAccess().getColonKeyword_10());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEvoOperationAccess().getDateDateParserRuleCall_11_0());
				}
				lv_date_11_0=ruleDate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEvoOperationRule());
					}
					set(
						$current,
						"date",
						lv_date_11_0,
						"de.evorepair.operation.EvoOperationDsl.Date");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_12='}'
		{
			newLeafNode(otherlv_12, grammarAccess.getEvoOperationAccess().getRightCurlyBracketKeyword_12());
		}
	)
;

// Entry rule entryRuleDate
entryRuleDate returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDateRule()); }
	iv_ruleDate=ruleDate
	{ $current=$iv_ruleDate.current.getText(); }
	EOF;

// Rule Date
ruleDate returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getDateAccess().getSTRINGTerminalRuleCall());
	}
;

// Entry rule entryRuleEvoVariable
entryRuleEvoVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEvoVariableRule()); }
	iv_ruleEvoVariable=ruleEvoVariable
	{ $current=$iv_ruleEvoVariable.current; }
	EOF;

// Rule EvoVariable
ruleEvoVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getEvoVariableAccess().getVarKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEvoVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEvoVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='_'
			{
				newLeafNode(otherlv_2, grammarAccess.getEvoVariableAccess().get_Keyword_2_0());
			}
			(
				(
					lv_index_3_0=RULE_INT
					{
						newLeafNode(lv_index_3_0, grammarAccess.getEvoVariableAccess().getIndexINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEvoVariableRule());
						}
						setWithLastConsumed(
							$current,
							"index",
							lv_index_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEvoVariableAccess().getVariableTypeEvoVariableTypeEnumRuleCall_3_0());
				}
				lv_variableType_4_0=ruleEvoVariableType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEvoVariableRule());
					}
					set(
						$current,
						"variableType",
						lv_variableType_4_0,
						"de.evorepair.evolution.variable.EvoVariableDsl.EvoVariableType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Rule EvoVariableType
ruleEvoVariableType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='@ident'
			{
				$current = grammarAccess.getEvoVariableTypeAccess().getEvoIdentifierEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEvoVariableTypeAccess().getEvoIdentifierEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='@pre'
			{
				$current = grammarAccess.getEvoVariableTypeAccess().getEvoSourceEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEvoVariableTypeAccess().getEvoSourceEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='@post'
			{
				$current = grammarAccess.getEvoVariableTypeAccess().getEvoTargetEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getEvoVariableTypeAccess().getEvoTargetEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule EvoFeatureVariableType
ruleEvoFeatureVariableType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='parent'
			{
				$current = grammarAccess.getEvoFeatureVariableTypeAccess().getEvoParentEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEvoFeatureVariableTypeAccess().getEvoParentEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='source'
			{
				$current = grammarAccess.getEvoFeatureVariableTypeAccess().getEvoSiblingEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEvoFeatureVariableTypeAccess().getEvoSiblingEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='child'
			{
				$current = grammarAccess.getEvoFeatureVariableTypeAccess().getEvoChildEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getEvoFeatureVariableTypeAccess().getEvoChildEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
