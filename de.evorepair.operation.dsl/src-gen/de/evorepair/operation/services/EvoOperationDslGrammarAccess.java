/*
 * generated by Xtext 2.11.0
 */
package de.evorepair.operation.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.evorepair.evolution.variable.services.EvoVariableDslGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EvoOperationDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class GrammarEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.operation.EvoOperationDsl.GrammarEntry");
		private final Assignment cContainerAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cContainerEvoOperationContainerParserRuleCall_0 = (RuleCall)cContainerAssignment.eContents().get(0);
		
		//GrammarEntry:
		//	container=EvoOperationContainer;
		@Override public ParserRule getRule() { return rule; }
		
		//container=EvoOperationContainer
		public Assignment getContainerAssignment() { return cContainerAssignment; }
		
		//EvoOperationContainer
		public RuleCall getContainerEvoOperationContainerParserRuleCall_0() { return cContainerEvoOperationContainerParserRuleCall_0; }
	}
	public class EvoOperationContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.operation.EvoOperationDsl.EvoOperationContainer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationsEvoOperationParserRuleCall_0_0 = (RuleCall)cOperationsAssignment_0.eContents().get(0);
		private final Assignment cOperationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperationsEvoOperationParserRuleCall_1_0 = (RuleCall)cOperationsAssignment_1.eContents().get(0);
		
		//EvoOperationContainer:
		//	operations+=EvoOperation operations+=EvoOperation*;
		@Override public ParserRule getRule() { return rule; }
		
		//operations+=EvoOperation operations+=EvoOperation*
		public Group getGroup() { return cGroup; }
		
		//operations+=EvoOperation
		public Assignment getOperationsAssignment_0() { return cOperationsAssignment_0; }
		
		//EvoOperation
		public RuleCall getOperationsEvoOperationParserRuleCall_0_0() { return cOperationsEvoOperationParserRuleCall_0_0; }
		
		//operations+=EvoOperation*
		public Assignment getOperationsAssignment_1() { return cOperationsAssignment_1; }
		
		//EvoOperation
		public RuleCall getOperationsEvoOperationParserRuleCall_1_0() { return cOperationsEvoOperationParserRuleCall_1_0; }
	}
	public class EvoOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.operation.EvoOperationDsl.EvoOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cVariablesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cVariablesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVariablesEvoVariableParserRuleCall_6_0 = (RuleCall)cVariablesAssignment_6.eContents().get(0);
		private final Assignment cVariablesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cVariablesEvoVariableParserRuleCall_7_0 = (RuleCall)cVariablesAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cTimestampKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cColonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cDateAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cDateDateParserRuleCall_11_0 = (RuleCall)cDateAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//EvoOperation:
		//	'operation' name=ID '{'
		//	'variables' ':' '{'
		//	variables+=EvoVariable variables+=EvoVariable* '}'
		//	'timestamp' ':' date=Date
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'operation' name=ID '{' 'variables' ':' '{' variables+=EvoVariable variables+=EvoVariable* '}' 'timestamp' ':' date=Date
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'operation'
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'variables'
		public Keyword getVariablesKeyword_3() { return cVariablesKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//variables+=EvoVariable
		public Assignment getVariablesAssignment_6() { return cVariablesAssignment_6; }
		
		//EvoVariable
		public RuleCall getVariablesEvoVariableParserRuleCall_6_0() { return cVariablesEvoVariableParserRuleCall_6_0; }
		
		//variables+=EvoVariable*
		public Assignment getVariablesAssignment_7() { return cVariablesAssignment_7; }
		
		//EvoVariable
		public RuleCall getVariablesEvoVariableParserRuleCall_7_0() { return cVariablesEvoVariableParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//'timestamp'
		public Keyword getTimestampKeyword_9() { return cTimestampKeyword_9; }
		
		//':'
		public Keyword getColonKeyword_10() { return cColonKeyword_10; }
		
		//date=Date
		public Assignment getDateAssignment_11() { return cDateAssignment_11; }
		
		//Date
		public RuleCall getDateDateParserRuleCall_11_0() { return cDateDateParserRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class DateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.evorepair.operation.EvoOperationDsl.Date");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Date ecore::EDate:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	
	
	private final GrammarEntryElements pGrammarEntry;
	private final EvoOperationContainerElements pEvoOperationContainer;
	private final EvoOperationElements pEvoOperation;
	private final DateElements pDate;
	
	private final Grammar grammar;
	
	private final EvoVariableDslGrammarAccess gaEvoVariableDsl;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EvoOperationDslGrammarAccess(GrammarProvider grammarProvider,
			EvoVariableDslGrammarAccess gaEvoVariableDsl,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaEvoVariableDsl = gaEvoVariableDsl;
		this.gaTerminals = gaTerminals;
		this.pGrammarEntry = new GrammarEntryElements();
		this.pEvoOperationContainer = new EvoOperationContainerElements();
		this.pEvoOperation = new EvoOperationElements();
		this.pDate = new DateElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.evorepair.operation.EvoOperationDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public EvoVariableDslGrammarAccess getEvoVariableDslGrammarAccess() {
		return gaEvoVariableDsl;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//GrammarEntry:
	//	container=EvoOperationContainer;
	public GrammarEntryElements getGrammarEntryAccess() {
		return pGrammarEntry;
	}
	
	public ParserRule getGrammarEntryRule() {
		return getGrammarEntryAccess().getRule();
	}
	
	//EvoOperationContainer:
	//	operations+=EvoOperation operations+=EvoOperation*;
	public EvoOperationContainerElements getEvoOperationContainerAccess() {
		return pEvoOperationContainer;
	}
	
	public ParserRule getEvoOperationContainerRule() {
		return getEvoOperationContainerAccess().getRule();
	}
	
	//EvoOperation:
	//	'operation' name=ID '{'
	//	'variables' ':' '{'
	//	variables+=EvoVariable variables+=EvoVariable* '}'
	//	'timestamp' ':' date=Date
	//	'}';
	public EvoOperationElements getEvoOperationAccess() {
		return pEvoOperation;
	}
	
	public ParserRule getEvoOperationRule() {
		return getEvoOperationAccess().getRule();
	}
	
	//Date ecore::EDate:
	//	STRING;
	public DateElements getDateAccess() {
		return pDate;
	}
	
	public ParserRule getDateRule() {
		return getDateAccess().getRule();
	}
	
	//Model:
	//	variables+=EvoVariable*;
	public EvoVariableDslGrammarAccess.ModelElements getModelAccess() {
		return gaEvoVariableDsl.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//EvoVariable:
	//	'var' name=ID ('_' index=INT) variableType=EvoVariableType;
	public EvoVariableDslGrammarAccess.EvoVariableElements getEvoVariableAccess() {
		return gaEvoVariableDsl.getEvoVariableAccess();
	}
	
	public ParserRule getEvoVariableRule() {
		return getEvoVariableAccess().getRule();
	}
	
	//enum EvoVariableType:
	//	EvoIdentifier='@ident' |
	//	EvoSource='@pre' |
	//	EvoTarget='@post';
	public EvoVariableDslGrammarAccess.EvoVariableTypeElements getEvoVariableTypeAccess() {
		return gaEvoVariableDsl.getEvoVariableTypeAccess();
	}
	
	public EnumRule getEvoVariableTypeRule() {
		return getEvoVariableTypeAccess().getRule();
	}
	
	//EvoFeatureVariable:
	//	'var' name=ID ('_' index=INT) ('.' ('parent' | 'child' | 'sibling')? ('.' featureType=EvoFeatureVariableType));
	public EvoVariableDslGrammarAccess.EvoFeatureVariableElements getEvoFeatureVariableAccess() {
		return gaEvoVariableDsl.getEvoFeatureVariableAccess();
	}
	
	public ParserRule getEvoFeatureVariableRule() {
		return getEvoFeatureVariableAccess().getRule();
	}
	
	//enum EvoFeatureVariableType:
	//	EvoParent='parent' |
	//	EvoSibling='source' |
	//	EvoChild='child';
	public EvoVariableDslGrammarAccess.EvoFeatureVariableTypeElements getEvoFeatureVariableTypeAccess() {
		return gaEvoVariableDsl.getEvoFeatureVariableTypeAccess();
	}
	
	public EnumRule getEvoFeatureVariableTypeRule() {
		return getEvoFeatureVariableTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
