/*
 * generated by Xtext 2.11.0
 */
package de.evorepair.operation.serializer;

import com.google.inject.Inject;
import de.evorepair.evolution.evooperation.EvoOperation;
import de.evorepair.evolution.evooperation.EvoOperationContainer;
import de.evorepair.evolution.evooperation.EvoOperationPackage;
import de.evorepair.evolution.evovariable.EvoFeatureVariable;
import de.evorepair.evolution.evovariable.EvoVariable;
import de.evorepair.evolution.evovariable.EvoVariablePackage;
import de.evorepair.evolution.variable.evoVariableDsl.EvoVariableDslPackage;
import de.evorepair.evolution.variable.evoVariableDsl.Model;
import de.evorepair.evolution.variable.serializer.EvoVariableDslSemanticSequencer;
import de.evorepair.operation.evoOperationDsl.EvoOperationDslPackage;
import de.evorepair.operation.evoOperationDsl.GrammarEntry;
import de.evorepair.operation.services.EvoOperationDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class EvoOperationDslSemanticSequencer extends EvoVariableDslSemanticSequencer {

	@Inject
	private EvoOperationDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == EvoOperationDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EvoOperationDslPackage.GRAMMAR_ENTRY:
				sequence_GrammarEntry(context, (GrammarEntry) semanticObject); 
				return; 
			}
		else if (epackage == EvoVariableDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EvoVariableDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			}
		else if (epackage == EvoOperationPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EvoOperationPackage.EVO_OPERATION:
				sequence_EvoOperation(context, (EvoOperation) semanticObject); 
				return; 
			case EvoOperationPackage.EVO_OPERATION_CONTAINER:
				sequence_EvoOperationContainer(context, (EvoOperationContainer) semanticObject); 
				return; 
			}
		else if (epackage == EvoVariablePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EvoVariablePackage.EVO_FEATURE_VARIABLE:
				sequence_EvoFeatureVariable(context, (EvoFeatureVariable) semanticObject); 
				return; 
			case EvoVariablePackage.EVO_VARIABLE:
				sequence_EvoVariable(context, (EvoVariable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     EvoOperationContainer returns EvoOperationContainer
	 *
	 * Constraint:
	 *     (operations+=EvoOperation operations+=EvoOperation*)
	 */
	protected void sequence_EvoOperationContainer(ISerializationContext context, EvoOperationContainer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EvoOperation returns EvoOperation
	 *
	 * Constraint:
	 *     (name=ID variables+=EvoVariable variables+=EvoVariable* date=Date)
	 */
	protected void sequence_EvoOperation(ISerializationContext context, EvoOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GrammarEntry returns GrammarEntry
	 *
	 * Constraint:
	 *     container=EvoOperationContainer
	 */
	protected void sequence_GrammarEntry(ISerializationContext context, GrammarEntry semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EvoOperationDslPackage.Literals.GRAMMAR_ENTRY__CONTAINER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EvoOperationDslPackage.Literals.GRAMMAR_ENTRY__CONTAINER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGrammarEntryAccess().getContainerEvoOperationContainerParserRuleCall_0(), semanticObject.getContainer());
		feeder.finish();
	}
	
	
}
